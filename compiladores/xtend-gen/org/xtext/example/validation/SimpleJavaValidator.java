/**
 * generated by Xtext
 */
package org.xtext.example.validation;

import com.google.common.base.Objects;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.example.simpleJava.SimpleJavaPackage;
import org.xtext.example.simpleJava.arglist;
import org.xtext.example.simpleJava.class_declaration;
import org.xtext.example.simpleJava.compilation_unit;
import org.xtext.example.simpleJava.constructor_declaration;
import org.xtext.example.simpleJava.creating_expression;
import org.xtext.example.simpleJava.expression;
import org.xtext.example.simpleJava.expression_aux;
import org.xtext.example.simpleJava.field_declaration;
import org.xtext.example.simpleJava.interface_declaration;
import org.xtext.example.simpleJava.literal_expression;
import org.xtext.example.simpleJava.logical_expression;
import org.xtext.example.simpleJava.mais_aux;
import org.xtext.example.simpleJava.method_declaration;
import org.xtext.example.simpleJava.name;
import org.xtext.example.simpleJava.numeric_expression;
import org.xtext.example.simpleJava.parameter;
import org.xtext.example.simpleJava.parameter_list;
import org.xtext.example.simpleJava.statement;
import org.xtext.example.simpleJava.statement_block;
import org.xtext.example.simpleJava.type;
import org.xtext.example.simpleJava.type_declaration;
import org.xtext.example.simpleJava.type_specifier;
import org.xtext.example.simpleJava.variable_declaration;
import org.xtext.example.simpleJava.variable_declarator;
import org.xtext.example.simpleJava.variable_initializer;
import org.xtext.example.simpleJava.while_statement;
import org.xtext.example.validation.AbstractSimpleJavaValidator;
import org.xtext.example.validation.Metodo;
import org.xtext.example.validation.Tipo;
import org.xtext.example.validation.Variavel;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SimpleJavaValidator extends AbstractSimpleJavaValidator {
  private final List<Tipo> tipos = new ArrayList<Tipo>();
  
  private final Map<String, Variavel> variaveis = new HashMap<String, Variavel>();
  
  private final Map<String, Metodo> metodos = new HashMap<String, Metodo>();
  
  private final List<Integer> registradores = new ArrayList<Integer>();
  
  private final List<Integer> labels = new ArrayList<Integer>();
  
  @Check
  public void runChecks(final compilation_unit comp) {
    this.genStart();
    EList<type_declaration> _declaracao = comp.getDeclaracao();
    this.checkType_Declaration(_declaracao);
  }
  
  @Check
  public void checkType_Declaration(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      {
        interface_declaration _declaracaoInterface = td.getDeclaracaoInterface();
        this.checkInterfaceDeclaration(_declaracaoInterface);
        class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
        this.checkClassDeclaration(_declaracaoClasse);
      }
    }
  }
  
  @Check
  public void checkInterfaceDeclaration(final interface_declaration id) {
    String _nomeInterface = id.getNomeInterface();
    Tipo _tipo = new Tipo(_nomeInterface);
    this.tipos.add(_tipo);
    EList<field_declaration> _corpoInterface = id.getCorpoInterface();
    for (final field_declaration fd : _corpoInterface) {
      variable_declaration _declaracaoVariavel = fd.getDeclaracaoVariavel();
      this.checkVariableDeclaration(_declaracaoVariavel);
    }
  }
  
  @Check
  public void checkVariableDeclaration(final variable_declaration vd) {
    type _tipoVariavel = vd.getTipoVariavel();
    type_specifier _primitivo = _tipoVariavel.getPrimitivo();
    String _nome = _primitivo.getNome();
    Tipo tipoPrimitivo = new Tipo(_nome);
    type _tipoVariavel_1 = vd.getTipoVariavel();
    name _objeto = _tipoVariavel_1.getObjeto();
    String _nome_1 = _objeto.getNome();
    Tipo tipoObjeto = new Tipo(_nome_1);
    boolean _and = false;
    boolean _contains = this.tipos.contains(tipoPrimitivo);
    boolean _not = (!_contains);
    if (!_not) {
      _and = false;
    } else {
      boolean _contains_1 = this.tipos.contains(tipoObjeto);
      boolean _not_1 = (!_contains_1);
      _and = _not_1;
    }
    if (_and) {
      this.error("Inexistent type", SimpleJavaPackage.Literals.VARIABLE_DECLARATION__TIPO_VARIAVEL);
    } else {
      EList<variable_declarator> vars = vd.getDeclaracaoVariaveis();
      for (final variable_declarator variable : vars) {
        String _nomeVariavel = variable.getNomeVariavel();
        boolean _containsKey = this.variaveis.containsKey(_nomeVariavel);
        boolean _not_2 = (!_containsKey);
        if (_not_2) {
          boolean _notEquals = (!Objects.equal(tipoPrimitivo, null));
          if (_notEquals) {
            String _nomeVariavel_1 = variable.getNomeVariavel();
            Variavel variavel = new Variavel(_nomeVariavel_1, tipoPrimitivo);
            String _nomeVariavel_2 = variable.getNomeVariavel();
            this.variaveis.put(_nomeVariavel_2, variavel);
          } else {
            String _nomeVariavel_3 = variable.getNomeVariavel();
            Variavel variavel_1 = new Variavel(_nomeVariavel_3, tipoObjeto);
            String _nomeVariavel_4 = variable.getNomeVariavel();
            this.variaveis.put(_nomeVariavel_4, variavel_1);
          }
          String _op = variable.getOp();
          boolean _notEquals_1 = (!Objects.equal(_op, null));
          if (_notEquals_1) {
            variable_initializer _valorVariavel = variable.getValorVariavel();
            this.checkVariableInitializer(_valorVariavel);
            this.genDeclarationVariableCode(variable);
          }
        } else {
          this.error("Variable alredy exist", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL);
        }
      }
    }
  }
  
  @Check
  public Object checkVariableInitializer(final variable_initializer vi) {
    Object _xblockexpression = null;
    {
      EList<variable_initializer> vars = vi.getValorVariaveis();
      Object _xifexpression = null;
      boolean _notEquals = (!Objects.equal(vars, null));
      if (_notEquals) {
        for (final variable_initializer newvi : vars) {
          this.checkVariableInitializer(newvi);
        }
      } else {
        expression _expressaoVariavel = vi.getExpressaoVariavel();
        _xifexpression = this.checkExp(_expressaoVariavel);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  @Check
  public Object checkExp(final expression exp) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      Object _xblockexpression = null;
      {
        this.checkBoolean(exp);
        _xblockexpression = this.genExpCode(exp);
      }
      _xifexpression = _xblockexpression;
    } else {
      Object _xifexpression_1 = null;
      boolean _isLiteral = this.isLiteral(exp);
      if (_isLiteral) {
        this.checkLiterals(exp);
      } else {
        Object _xifexpression_2 = null;
        boolean _isArimeticExp = this.isArimeticExp(exp);
        if (_isArimeticExp) {
          Object _xblockexpression_1 = null;
          {
            this.checkAritmetic(exp);
            _xblockexpression_1 = this.genExpCode(exp);
          }
          _xifexpression_2 = _xblockexpression_1;
        } else {
          Object _xifexpression_3 = null;
          boolean _isVariable = this.isVariable(exp);
          if (_isVariable) {
            Boolean _xblockexpression_2 = null;
            {
              this.checkVariableUsed(exp);
              _xblockexpression_2 = this.genUseVariableCode(exp);
            }
            _xifexpression_3 = _xblockexpression_2;
          } else {
            Object _xifexpression_4 = null;
            boolean _isMethod = this.isMethod(exp);
            if (_isMethod) {
              this.checkMethodUsed(exp);
              String _identificador = exp.getIdentificador();
              this.genUseMethodCode(_identificador, "#16");
            } else {
              Object _xifexpression_5 = null;
              boolean _isAtribuicao = this.isAtribuicao(exp);
              if (_isAtribuicao) {
                Object _xblockexpression_3 = null;
                {
                  this.checkAttribution(exp);
                  _xblockexpression_3 = this.genExpCode(exp);
                }
                _xifexpression_5 = _xblockexpression_3;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  @Check
  public void checkClassDeclaration(final class_declaration cd) {
    String _nomeClasse = cd.getNomeClasse();
    Tipo tipo = new Tipo(_nomeClasse);
    this.tipos.add(tipo);
    EList<class_declaration> _declaracaoClasse = cd.getDeclaracaoClasse();
    for (final class_declaration newcd : _declaracaoClasse) {
      this.checkClassDeclaration(newcd);
    }
    EList<field_declaration> _corpoClasse = cd.getCorpoClasse();
    for (final field_declaration fd : _corpoClasse) {
      {
        variable_declaration _declaracaoVariavel = fd.getDeclaracaoVariavel();
        this.checkVariableDeclaration(_declaracaoVariavel);
        method_declaration _declaracaoMetodo = fd.getDeclaracaoMetodo();
        this.checkMethodDeclaration(_declaracaoMetodo);
        String _nomeClasse_1 = cd.getNomeClasse();
        constructor_declaration _declaracaoConstrutor = fd.getDeclaracaoConstrutor();
        this.checkConstructorDeclaration(_nomeClasse_1, _declaracaoConstrutor);
      }
    }
  }
  
  @Check
  public Metodo checkConstructorDeclaration(final String nameClass, final constructor_declaration cd) {
    Metodo _xblockexpression = null;
    {
      Tipo tipo = new Tipo(nameClass);
      Metodo _xifexpression = null;
      String _nomeContrutor = cd.getNomeContrutor();
      boolean _equals = nameClass.equals(_nomeContrutor);
      if (_equals) {
        String _nomeContrutor_1 = cd.getNomeContrutor();
        String _nomeContrutor_2 = cd.getNomeContrutor();
        parameter_list _parametrosContrutor = cd.getParametrosContrutor();
        Map<String, Tipo> _parametros = this.getparametros(_parametrosContrutor);
        Metodo _metodo = new Metodo(_nomeContrutor_2, tipo, _parametros);
        _xifexpression = this.metodos.put(_nomeContrutor_1, _metodo);
      } else {
        this.error("Invalid constructor name", SimpleJavaPackage.Literals.CONSTRUCTOR_DECLARATION__NOME_CONTRUTOR);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  @Check
  public void checkMethodDeclaration(final method_declaration md) {
    type _tipoRetorno = md.getTipoRetorno();
    type_specifier _primitivo = _tipoRetorno.getPrimitivo();
    String _nome = _primitivo.getNome();
    Tipo tipoPrimitivo = new Tipo(_nome);
    type _tipoRetorno_1 = md.getTipoRetorno();
    name _objeto = _tipoRetorno_1.getObjeto();
    String _nome_1 = _objeto.getNome();
    Tipo tipoObjeto = new Tipo(_nome_1);
    boolean _and = false;
    boolean _contains = this.tipos.contains(tipoPrimitivo);
    boolean _not = (!_contains);
    if (!_not) {
      _and = false;
    } else {
      boolean _contains_1 = this.tipos.contains(tipoObjeto);
      boolean _not_1 = (!_contains_1);
      _and = _not_1;
    }
    if (_and) {
      this.error("Inexistent type", SimpleJavaPackage.Literals.METHOD_DECLARATION__TIPO_RETORNO);
    } else {
      String _nomeMetodo = md.getNomeMetodo();
      boolean _containsKey = this.metodos.containsKey(_nomeMetodo);
      boolean _not_2 = (!_containsKey);
      if (_not_2) {
        boolean _notEquals = (!Objects.equal(tipoPrimitivo, null));
        if (_notEquals) {
          String _nomeMetodo_1 = md.getNomeMetodo();
          parameter_list _parametrosMetodo = md.getParametrosMetodo();
          Map<String, Tipo> _parametros = this.getparametros(_parametrosMetodo);
          Metodo metodo = new Metodo(_nomeMetodo_1, tipoPrimitivo, _parametros);
          String _nomeMetodo_2 = md.getNomeMetodo();
          this.metodos.put(_nomeMetodo_2, metodo);
        } else {
          String _nomeMetodo_3 = md.getNomeMetodo();
          parameter_list _parametrosMetodo_1 = md.getParametrosMetodo();
          Map<String, Tipo> _parametros_1 = this.getparametros(_parametrosMetodo_1);
          Metodo metodo_1 = new Metodo(_nomeMetodo_3, tipoPrimitivo, _parametros_1);
          String _nomeMetodo_4 = md.getNomeMetodo();
          this.metodos.put(_nomeMetodo_4, metodo_1);
        }
        statement_block _blocoMetodo = md.getBlocoMetodo();
        boolean _notEquals_1 = (!Objects.equal(_blocoMetodo, null));
        if (_notEquals_1) {
          statement_block _blocoMetodo_1 = md.getBlocoMetodo();
          this.checkStatementBlock(_blocoMetodo_1);
        }
      } else {
        this.error("Method already exists", SimpleJavaPackage.Literals.METHOD_DECLARATION__NOME_METODO);
      }
    }
  }
  
  @Check
  public void checkStatementBlock(final statement_block sb) {
    EList<statement> _corpo = sb.getCorpo();
    for (final statement s : _corpo) {
      this.checkStatement(s);
    }
  }
  
  @Check
  public Object checkStatement(final statement s) {
    Object _xifexpression = null;
    while_statement _corpoWhile = s.getCorpoWhile();
    boolean _notEquals = (!Objects.equal(_corpoWhile, null));
    if (_notEquals) {
      while_statement _corpoWhile_1 = s.getCorpoWhile();
      this.checkWhile(_corpoWhile_1);
    } else {
      Object _xifexpression_1 = null;
      variable_declaration _declaracaoVariavel = s.getDeclaracaoVariavel();
      boolean _notEquals_1 = (!Objects.equal(_declaracaoVariavel, null));
      if (_notEquals_1) {
        variable_declaration _declaracaoVariavel_1 = s.getDeclaracaoVariavel();
        this.checkDeclaracaoVariavel(_declaracaoVariavel_1);
      } else {
        Object _xifexpression_2 = null;
        expression _expressao = s.getExpressao();
        boolean _notEquals_2 = (!Objects.equal(_expressao, null));
        if (_notEquals_2) {
          expression _expressao_1 = s.getExpressao();
          _xifexpression_2 = this.checkExp(_expressao_1);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  @Check
  public void checkWhile(final while_statement statement) {
    expression _expressaoWhile = statement.getExpressaoWhile();
    boolean _isBooleanExp = this.isBooleanExp(_expressaoWhile);
    boolean _not = (!_isBooleanExp);
    if (_not) {
      this.error("Invalid expression", SimpleJavaPackage.Literals.WHILE_STATEMENT__EXPRESSAO_WHILE);
    } else {
      org.xtext.example.simpleJava.statement _blocoWhile = statement.getBlocoWhile();
      this.checkStatement(_blocoWhile);
      this.genWhileCode(statement);
    }
  }
  
  @Check
  public boolean checkBoolean(final expression expression) {
    String _identificador = expression.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = expression.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    logical_expression _logical = expression.getLogical();
    String _operador = _logical.getOperador();
    boolean _notEquals = (!Objects.equal(_operador, null));
    if (_notEquals) {
      _or_1 = true;
    } else {
      boolean _and = false;
      boolean _notEquals_1 = (!Objects.equal(metodo, null));
      if (!_notEquals_1) {
        _and = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals = _nome.equals("boolean");
        _and = _equals;
      }
      _or_1 = _and;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _and_1 = false;
      boolean _notEquals_2 = (!Objects.equal(variavel, null));
      if (!_notEquals_2) {
        _and_1 = false;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_1 = _nome_1.equals("boolean");
        _and_1 = _equals_1;
      }
      _or = _and_1;
    }
    if (_or) {
      boolean _and_2 = false;
      boolean _or_2 = false;
      logical_expression _logical_1 = expression.getLogical();
      String _operador_1 = _logical_1.getOperador();
      boolean _notEquals_3 = (!Objects.equal(_operador_1, "!"));
      if (_notEquals_3) {
        _or_2 = true;
      } else {
        logical_expression _logical_2 = expression.getLogical();
        org.xtext.example.simpleJava.expression _exp = _logical_2.getExp();
        boolean _isBooleanExp = this.isBooleanExp(_exp);
        boolean _not = (!_isBooleanExp);
        _or_2 = _not;
      }
      if (!_or_2) {
        _and_2 = false;
      } else {
        boolean _and_3 = false;
        logical_expression _logical_3 = expression.getLogical();
        String _operador_2 = _logical_3.getOperador();
        boolean _notEquals_4 = (!Objects.equal(_operador_2, "true"));
        if (!_notEquals_4) {
          _and_3 = false;
        } else {
          logical_expression _logical_4 = expression.getLogical();
          String _operador_3 = _logical_4.getOperador();
          boolean _notEquals_5 = (!Objects.equal(_operador_3, "false"));
          _and_3 = _notEquals_5;
        }
        _and_2 = _and_3;
      }
      if (_and_2) {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL);
      }
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _equals_2 = Objects.equal(metodo, null);
      if (_equals_2) {
        _or_4 = true;
      } else {
        Tipo _tipoRetorno_1 = metodo.getTipoRetorno();
        String _nome_2 = _tipoRetorno_1.getNome();
        boolean _equals_3 = _nome_2.equals("boolean");
        boolean _not_1 = (!_equals_3);
        _or_4 = _not_1;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        boolean _and_4 = false;
        boolean _equals_4 = Objects.equal(variavel, null);
        if (!_equals_4) {
          _and_4 = false;
        } else {
          Tipo _tipo_1 = variavel.getTipo();
          String _nome_3 = _tipo_1.getNome();
          boolean _equals_5 = _nome_3.equals("boolean");
          boolean _not_2 = (!_equals_5);
          _and_4 = _not_2;
        }
        _or_3 = _and_4;
      }
      if (_or_3) {
        this.error("Invalid type", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
      }
      expression_aux _expressoes = expression.getExpressoes();
      this.checkBooleanExpAux(_expressoes);
    }
    return false;
  }
  
  @Check
  public void checkBooleanExpAux(final expression_aux exp) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    boolean _and_3 = false;
    boolean _and_4 = false;
    boolean _and_5 = false;
    boolean _and_6 = false;
    boolean _and_7 = false;
    boolean _and_8 = false;
    boolean _and_9 = false;
    String _operador = exp.getOperador();
    boolean _notEquals = (!Objects.equal(_operador, "&"));
    if (!_notEquals) {
      _and_9 = false;
    } else {
      String _operador_1 = exp.getOperador();
      boolean _notEquals_1 = (!Objects.equal(_operador_1, "^="));
      _and_9 = _notEquals_1;
    }
    if (!_and_9) {
      _and_8 = false;
    } else {
      String _operador_2 = exp.getOperador();
      boolean _notEquals_2 = (!Objects.equal(_operador_2, "&="));
      _and_8 = _notEquals_2;
    }
    if (!_and_8) {
      _and_7 = false;
    } else {
      String _operador_3 = exp.getOperador();
      boolean _notEquals_3 = (!Objects.equal(_operador_3, "||"));
      _and_7 = _notEquals_3;
    }
    if (!_and_7) {
      _and_6 = false;
    } else {
      String _operador_4 = exp.getOperador();
      boolean _notEquals_4 = (!Objects.equal(_operador_4, "&&"));
      _and_6 = _notEquals_4;
    }
    if (!_and_6) {
      _and_5 = false;
    } else {
      String _operador_5 = exp.getOperador();
      boolean _notEquals_5 = (!Objects.equal(_operador_5, "|"));
      _and_5 = _notEquals_5;
    }
    if (!_and_5) {
      _and_4 = false;
    } else {
      String _operador_6 = exp.getOperador();
      boolean _notEquals_6 = (!Objects.equal(_operador_6, "||="));
      _and_4 = _notEquals_6;
    }
    if (!_and_4) {
      _and_3 = false;
    } else {
      String _operador_7 = exp.getOperador();
      boolean _notEquals_7 = (!Objects.equal(_operador_7, "|="));
      _and_3 = _notEquals_7;
    }
    if (!_and_3) {
      _and_2 = false;
    } else {
      String _operador_8 = exp.getOperador();
      boolean _notEquals_8 = (!Objects.equal(_operador_8, "%"));
      _and_2 = _notEquals_8;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      String _operador_9 = exp.getOperador();
      boolean _notEquals_9 = (!Objects.equal(_operador_9, "^"));
      _and_1 = _notEquals_9;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _operador_10 = exp.getOperador();
      boolean _notEquals_10 = (!Objects.equal(_operador_10, "%="));
      _and = _notEquals_10;
    }
    if (_and) {
      this.error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR);
    } else {
      expression _exp = exp.getExp();
      this.checkBooleanAux(_exp);
    }
  }
  
  @Check
  public void checkBooleanAux(final expression exp) {
    String _identificador = exp.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = exp.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    boolean _equals = Objects.equal(metodo, null);
    if (_equals) {
      _or_1 = true;
    } else {
      Tipo _tipoRetorno = metodo.getTipoRetorno();
      String _nome = _tipoRetorno.getNome();
      boolean _equals_1 = _nome.equals("boolean");
      boolean _not = (!_equals_1);
      _or_1 = _not;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _or_2 = false;
      boolean _equals_2 = Objects.equal(variavel, null);
      if (_equals_2) {
        _or_2 = true;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_3 = _nome_1.equals("boolean");
        boolean _not_1 = (!_equals_3);
        _or_2 = _not_1;
      }
      _or = _or_2;
    }
    if (_or) {
      logical_expression _logical = exp.getLogical();
      String _operador = _logical.getOperador();
      boolean _equals_4 = Objects.equal(_operador, null);
      if (_equals_4) {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL);
      } else {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
      }
    }
  }
  
  @Check
  public void checkLiterals(final expression expression) {
    boolean _and = false;
    literal_expression _literal = expression.getLiteral();
    String _inteiro = _literal.getInteiro();
    boolean _equals = Objects.equal(_inteiro, null);
    if (!_equals) {
      _and = false;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _string = _literal_1.getString();
      boolean _equals_1 = Objects.equal(_string, null);
      _and = _equals_1;
    }
    if (_and) {
      logical_expression _logical = expression.getLogical();
      boolean _equals_2 = Objects.equal(_logical, null);
      if (_equals_2) {
        this.error("Invalid literal", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL);
      } else {
        this.error("Invalid literal", SimpleJavaPackage.Literals.EXPRESSION__LITERAL);
      }
    }
  }
  
  @Check
  public void checkVariableUsed(final expression exp) {
    String _identificador = exp.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(_identificador);
    boolean _not = (!_containsKey);
    if (_not) {
      this.error("Inexistent variable", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
    }
  }
  
  @Check
  public void checkMethodUsed(final expression exp) {
    String _identificador = exp.getIdentificador();
    boolean _containsKey = this.metodos.containsKey(_identificador);
    if (_containsKey) {
      String _identificador_1 = exp.getIdentificador();
      Metodo m = this.metodos.get(_identificador_1);
      boolean _or = false;
      expression_aux _expressoes = exp.getExpressoes();
      arglist _parametros = _expressoes.getParametros();
      boolean _equals = Objects.equal(_parametros, null);
      if (_equals) {
        _or = true;
      } else {
        expression_aux _expressoes_1 = exp.getExpressoes();
        arglist _parametros_1 = _expressoes_1.getParametros();
        boolean _verificaParametros = this.verificaParametros(m, _parametros_1);
        boolean _not = (!_verificaParametros);
        _or = _not;
      }
      if (_or) {
        this.error("Invalid parameters", SimpleJavaPackage.Literals.EXPRESSION_AUX__PARAMETROS);
      }
    } else {
      this.error("inexistent method", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
    }
  }
  
  @Check
  public void checkAttribution(final expression exp) {
    String _identificador = exp.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(_identificador);
    boolean _not = (!_containsKey);
    if (_not) {
      this.error("inexistent variable", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
    } else {
      expression _exp = exp.getExp();
      creating_expression _novo = _exp.getNovo();
      boolean _equals = Objects.equal(_novo, null);
      if (_equals) {
        this.error("inexistent command", SimpleJavaPackage.Literals.EXPRESSION__NOVO);
      } else {
        expression_aux _expressoes = exp.getExpressoes();
        this.checkAttributionExpAux(_expressoes);
      }
    }
  }
  
  @Check
  public void checkAttributionExpAux(final expression_aux exp) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    boolean _and_3 = false;
    boolean _and_4 = false;
    boolean _and_5 = false;
    boolean _and_6 = false;
    String _operador = exp.getOperador();
    boolean _notEquals = (!Objects.equal(_operador, "^="));
    if (!_notEquals) {
      _and_6 = false;
    } else {
      String _operador_1 = exp.getOperador();
      boolean _notEquals_1 = (!Objects.equal(_operador_1, "*="));
      _and_6 = _notEquals_1;
    }
    if (!_and_6) {
      _and_5 = false;
    } else {
      String _operador_2 = exp.getOperador();
      boolean _notEquals_2 = (!Objects.equal(_operador_2, "-="));
      _and_5 = _notEquals_2;
    }
    if (!_and_5) {
      _and_4 = false;
    } else {
      String _operador_3 = exp.getOperador();
      boolean _notEquals_3 = (!Objects.equal(_operador_3, "||="));
      _and_4 = _notEquals_3;
    }
    if (!_and_4) {
      _and_3 = false;
    } else {
      String _operador_4 = exp.getOperador();
      boolean _notEquals_4 = (!Objects.equal(_operador_4, "|="));
      _and_3 = _notEquals_4;
    }
    if (!_and_3) {
      _and_2 = false;
    } else {
      String _operador_5 = exp.getOperador();
      boolean _notEquals_5 = (!Objects.equal(_operador_5, "/="));
      _and_2 = _notEquals_5;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      String _operador_6 = exp.getOperador();
      boolean _notEquals_6 = (!Objects.equal(_operador_6, "%="));
      _and_1 = _notEquals_6;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _operador_7 = exp.getOperador();
      boolean _notEquals_7 = (!Objects.equal(_operador_7, "&="));
      _and = _notEquals_7;
    }
    if (_and) {
      this.error("inexistent operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR);
    }
  }
  
  @Check
  public void checkAritmetic(final expression expression) {
    String _identificador = expression.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = expression.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _and = false;
    boolean _and_1 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _equals = Objects.equal(_decimal, null);
    if (!_equals) {
      _and_1 = false;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _equals_1 = Objects.equal(_inteiro, null);
      _and_1 = _equals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _equals_2 = Objects.equal(_l_float, null);
      _and = _equals_2;
    }
    if (_and) {
      this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LITERAL);
    } else {
      boolean _and_2 = false;
      boolean _and_3 = false;
      boolean _and_4 = false;
      boolean _and_5 = false;
      boolean _and_6 = false;
      boolean _and_7 = false;
      boolean _and_8 = false;
      boolean _or = false;
      boolean _equals_3 = Objects.equal(metodo, null);
      if (_equals_3) {
        _or = true;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals_4 = _nome.equals("int");
        boolean _not = (!_equals_4);
        _or = _not;
      }
      if (!_or) {
        _and_8 = false;
      } else {
        boolean _or_1 = false;
        boolean _equals_5 = Objects.equal(variavel, null);
        if (_equals_5) {
          _or_1 = true;
        } else {
          Tipo _tipo = variavel.getTipo();
          String _nome_1 = _tipo.getNome();
          boolean _equals_6 = _nome_1.equals("int");
          boolean _not_1 = (!_equals_6);
          _or_1 = _not_1;
        }
        _and_8 = _or_1;
      }
      if (!_and_8) {
        _and_7 = false;
      } else {
        boolean _or_2 = false;
        boolean _equals_7 = Objects.equal(metodo, null);
        if (_equals_7) {
          _or_2 = true;
        } else {
          Tipo _tipoRetorno_1 = metodo.getTipoRetorno();
          String _nome_2 = _tipoRetorno_1.getNome();
          boolean _equals_8 = _nome_2.equals("float");
          boolean _not_2 = (!_equals_8);
          _or_2 = _not_2;
        }
        _and_7 = _or_2;
      }
      if (!_and_7) {
        _and_6 = false;
      } else {
        boolean _or_3 = false;
        boolean _equals_9 = Objects.equal(variavel, null);
        if (_equals_9) {
          _or_3 = true;
        } else {
          Tipo _tipo_1 = variavel.getTipo();
          String _nome_3 = _tipo_1.getNome();
          boolean _equals_10 = _nome_3.equals("float");
          boolean _not_3 = (!_equals_10);
          _or_3 = _not_3;
        }
        _and_6 = _or_3;
      }
      if (!_and_6) {
        _and_5 = false;
      } else {
        boolean _or_4 = false;
        boolean _equals_11 = Objects.equal(metodo, null);
        if (_equals_11) {
          _or_4 = true;
        } else {
          Tipo _tipoRetorno_2 = metodo.getTipoRetorno();
          String _nome_4 = _tipoRetorno_2.getNome();
          boolean _equals_12 = _nome_4.equals("long");
          boolean _not_4 = (!_equals_12);
          _or_4 = _not_4;
        }
        _and_5 = _or_4;
      }
      if (!_and_5) {
        _and_4 = false;
      } else {
        boolean _or_5 = false;
        boolean _equals_13 = Objects.equal(variavel, null);
        if (_equals_13) {
          _or_5 = true;
        } else {
          Tipo _tipo_2 = variavel.getTipo();
          String _nome_5 = _tipo_2.getNome();
          boolean _equals_14 = _nome_5.equals("long");
          boolean _not_5 = (!_equals_14);
          _or_5 = _not_5;
        }
        _and_4 = _or_5;
      }
      if (!_and_4) {
        _and_3 = false;
      } else {
        boolean _or_6 = false;
        boolean _equals_15 = Objects.equal(metodo, null);
        if (_equals_15) {
          _or_6 = true;
        } else {
          Tipo _tipoRetorno_3 = metodo.getTipoRetorno();
          String _nome_6 = _tipoRetorno_3.getNome();
          boolean _equals_16 = _nome_6.equals("double");
          boolean _not_6 = (!_equals_16);
          _or_6 = _not_6;
        }
        _and_3 = _or_6;
      }
      if (!_and_3) {
        _and_2 = false;
      } else {
        boolean _or_7 = false;
        boolean _equals_17 = Objects.equal(variavel, null);
        if (_equals_17) {
          _or_7 = true;
        } else {
          Tipo _tipo_3 = variavel.getTipo();
          String _nome_7 = _tipo_3.getNome();
          boolean _equals_18 = _nome_7.equals("double");
          boolean _not_7 = (!_equals_18);
          _or_7 = _not_7;
        }
        _and_2 = _or_7;
      }
      if (_and_2) {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
      } else {
        expression_aux _expressoes = expression.getExpressoes();
        this.checkAritmeticExpAux(_expressoes);
      }
    }
  }
  
  @Check
  public void checkAritmeticExpAux(final expression_aux exp) {
    boolean _and = false;
    boolean _and_1 = false;
    boolean _and_2 = false;
    boolean _and_3 = false;
    boolean _and_4 = false;
    boolean _and_5 = false;
    boolean _and_6 = false;
    boolean _and_7 = false;
    boolean _and_8 = false;
    boolean _and_9 = false;
    mais_aux _op = exp.getOp();
    boolean _equals = Objects.equal(_op, null);
    if (!_equals) {
      _and_9 = false;
    } else {
      String _operador = exp.getOperador();
      boolean _notEquals = (!Objects.equal(_operador, "++"));
      _and_9 = _notEquals;
    }
    if (!_and_9) {
      _and_8 = false;
    } else {
      String _operador_1 = exp.getOperador();
      boolean _notEquals_1 = (!Objects.equal(_operador_1, "--"));
      _and_8 = _notEquals_1;
    }
    if (!_and_8) {
      _and_7 = false;
    } else {
      String _operador_2 = exp.getOperador();
      boolean _notEquals_2 = (!Objects.equal(_operador_2, "-"));
      _and_7 = _notEquals_2;
    }
    if (!_and_7) {
      _and_6 = false;
    } else {
      String _operador_3 = exp.getOperador();
      boolean _notEquals_3 = (!Objects.equal(_operador_3, "-="));
      _and_6 = _notEquals_3;
    }
    if (!_and_6) {
      _and_5 = false;
    } else {
      String _operador_4 = exp.getOperador();
      boolean _notEquals_4 = (!Objects.equal(_operador_4, "*"));
      _and_5 = _notEquals_4;
    }
    if (!_and_5) {
      _and_4 = false;
    } else {
      String _operador_5 = exp.getOperador();
      boolean _notEquals_5 = (!Objects.equal(_operador_5, "*="));
      _and_4 = _notEquals_5;
    }
    if (!_and_4) {
      _and_3 = false;
    } else {
      String _operador_6 = exp.getOperador();
      boolean _notEquals_6 = (!Objects.equal(_operador_6, "/"));
      _and_3 = _notEquals_6;
    }
    if (!_and_3) {
      _and_2 = false;
    } else {
      String _operador_7 = exp.getOperador();
      boolean _notEquals_7 = (!Objects.equal(_operador_7, "/="));
      _and_2 = _notEquals_7;
    }
    if (!_and_2) {
      _and_1 = false;
    } else {
      String _operador_8 = exp.getOperador();
      boolean _notEquals_8 = (!Objects.equal(_operador_8, "%"));
      _and_1 = _notEquals_8;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _operador_9 = exp.getOperador();
      boolean _notEquals_9 = (!Objects.equal(_operador_9, "%="));
      _and = _notEquals_9;
    }
    if (_and) {
      this.error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR);
    } else {
      expression _exp = exp.getExp();
      this.checkAritmeticAux(_exp);
    }
  }
  
  @Check
  public void checkAritmeticAux(final expression exp) {
    String _identificador = exp.getIdentificador();
    Metodo m = this.metodos.get(_identificador);
    String _identificador_1 = exp.getIdentificador();
    Variavel v = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    boolean _or_2 = false;
    boolean _or_3 = false;
    boolean _or_4 = false;
    boolean _or_5 = false;
    boolean _or_6 = false;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (!_notEquals) {
      _and = false;
    } else {
      Tipo _tipoRetorno = m.getTipoRetorno();
      String _nome = _tipoRetorno.getNome();
      boolean _equals = _nome.equals("int");
      _and = _equals;
    }
    if (_and) {
      _or_6 = true;
    } else {
      boolean _and_1 = false;
      boolean _notEquals_1 = (!Objects.equal(v, null));
      if (!_notEquals_1) {
        _and_1 = false;
      } else {
        Tipo _tipo = v.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_1 = _nome_1.equals("int");
        _and_1 = _equals_1;
      }
      _or_6 = _and_1;
    }
    if (_or_6) {
      _or_5 = true;
    } else {
      boolean _and_2 = false;
      boolean _notEquals_2 = (!Objects.equal(m, null));
      if (!_notEquals_2) {
        _and_2 = false;
      } else {
        Tipo _tipoRetorno_1 = m.getTipoRetorno();
        String _nome_2 = _tipoRetorno_1.getNome();
        boolean _equals_2 = _nome_2.equals("float");
        _and_2 = _equals_2;
      }
      _or_5 = _and_2;
    }
    if (_or_5) {
      _or_4 = true;
    } else {
      boolean _and_3 = false;
      boolean _notEquals_3 = (!Objects.equal(v, null));
      if (!_notEquals_3) {
        _and_3 = false;
      } else {
        Tipo _tipo_1 = v.getTipo();
        String _nome_3 = _tipo_1.getNome();
        boolean _equals_3 = _nome_3.equals("float");
        _and_3 = _equals_3;
      }
      _or_4 = _and_3;
    }
    if (_or_4) {
      _or_3 = true;
    } else {
      boolean _and_4 = false;
      boolean _notEquals_4 = (!Objects.equal(m, null));
      if (!_notEquals_4) {
        _and_4 = false;
      } else {
        Tipo _tipoRetorno_2 = m.getTipoRetorno();
        String _nome_4 = _tipoRetorno_2.getNome();
        boolean _equals_4 = _nome_4.equals("long");
        _and_4 = _equals_4;
      }
      _or_3 = _and_4;
    }
    if (_or_3) {
      _or_2 = true;
    } else {
      boolean _and_5 = false;
      boolean _notEquals_5 = (!Objects.equal(v, null));
      if (!_notEquals_5) {
        _and_5 = false;
      } else {
        Tipo _tipo_2 = v.getTipo();
        String _nome_5 = _tipo_2.getNome();
        boolean _equals_5 = _nome_5.equals("long");
        _and_5 = _equals_5;
      }
      _or_2 = _and_5;
    }
    if (_or_2) {
      _or_1 = true;
    } else {
      boolean _and_6 = false;
      boolean _notEquals_6 = (!Objects.equal(m, null));
      if (!_notEquals_6) {
        _and_6 = false;
      } else {
        Tipo _tipoRetorno_3 = m.getTipoRetorno();
        String _nome_6 = _tipoRetorno_3.getNome();
        boolean _equals_6 = _nome_6.equals("double");
        _and_6 = _equals_6;
      }
      _or_1 = _and_6;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _and_7 = false;
      boolean _notEquals_7 = (!Objects.equal(v, null));
      if (!_notEquals_7) {
        _and_7 = false;
      } else {
        Tipo _tipo_3 = v.getTipo();
        String _nome_7 = _tipo_3.getNome();
        boolean _equals_7 = _nome_7.equals("double");
        _and_7 = _equals_7;
      }
      _or = _and_7;
    }
    if (_or) {
      boolean _and_8 = false;
      boolean _and_9 = false;
      literal_expression _literal = exp.getLiteral();
      String _decimal = _literal.getDecimal();
      boolean _equals_8 = Objects.equal(_decimal, null);
      if (!_equals_8) {
        _and_9 = false;
      } else {
        literal_expression _literal_1 = exp.getLiteral();
        String _inteiro = _literal_1.getInteiro();
        boolean _equals_9 = Objects.equal(_inteiro, null);
        _and_9 = _equals_9;
      }
      if (!_and_9) {
        _and_8 = false;
      } else {
        literal_expression _literal_2 = exp.getLiteral();
        String _l_float = _literal_2.getL_float();
        boolean _equals_10 = Objects.equal(_l_float, null);
        _and_8 = _equals_10;
      }
      if (_and_8) {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LITERAL);
      } else {
        this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
      }
    }
  }
  
  public boolean isMethod(final expression exp) {
    String _identificador = exp.getIdentificador();
    boolean _containsKey = this.metodos.containsKey(_identificador);
    if (_containsKey) {
      return true;
    }
    return false;
  }
  
  public Map<String, Tipo> getparametros(final arglist list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    int i = 0;
    while ((i < ((Object[])Conversions.unwrapArray(list.getTipoParametro(), Object.class)).length)) {
      {
        EList<String> _nomeParametro = list.getNomeParametro();
        String _get = _nomeParametro.get(i);
        EList<type> _tipoParametro = list.getTipoParametro();
        type _get_1 = _tipoParametro.get(i);
        String _valueOf = String.valueOf(_get_1);
        Tipo _tipo = new Tipo(_valueOf);
        p.put(_get, _tipo);
        i++;
      }
    }
    return p;
  }
  
  public boolean verificaParametros(final Metodo metodo, final arglist arglist) {
    Map<String, Tipo> _parametros = metodo.getParametros();
    Map<String, Tipo> _parametros_1 = this.getparametros(arglist);
    boolean _equals = _parametros.equals(_parametros_1);
    if (_equals) {
      return true;
    } else {
      return false;
    }
  }
  
  public Tipo getTipo(final expression expression) {
    logical_expression _logical = expression.getLogical();
    boolean _notEquals = (!Objects.equal(_logical, null));
    if (_notEquals) {
      return new Tipo("boolean");
    } else {
      literal_expression _literal = expression.getLiteral();
      String _decimal = _literal.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal, null));
      if (_notEquals_1) {
        return new Tipo("double");
      } else {
        literal_expression _literal_1 = expression.getLiteral();
        String _inteiro = _literal_1.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          return new Tipo("int");
        } else {
          literal_expression _literal_2 = expression.getLiteral();
          String _l_float = _literal_2.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            return new Tipo("float");
          } else {
            literal_expression _literal_3 = expression.getLiteral();
            String _string = _literal_3.getString();
            boolean _notEquals_4 = (!Objects.equal(_string, null));
            if (_notEquals_4) {
              return new Tipo("String");
            } else {
              String _identificador = expression.getIdentificador();
              boolean _notEquals_5 = (!Objects.equal(_identificador, null));
              if (_notEquals_5) {
                String _identificador_1 = expression.getIdentificador();
                boolean _containsKey = this.variaveis.containsKey(_identificador_1);
                if (_containsKey) {
                  String _identificador_2 = expression.getIdentificador();
                  Variavel _get = this.variaveis.get(_identificador_2);
                  return _get.getTipo();
                } else {
                  String _identificador_3 = expression.getIdentificador();
                  Metodo _get_1 = this.metodos.get(_identificador_3);
                  return _get_1.getTipoRetorno();
                }
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  public Map<String, Tipo> getparametros(final parameter_list list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    EList<parameter> _parametros = list.getParametros();
    for (final parameter parametro : _parametros) {
      {
        String _nomeParametro = parametro.getNomeParametro();
        type _tipoParametro = parametro.getTipoParametro();
        Tipo _tipo = this.getTipo(_tipoParametro);
        String _valueOf = String.valueOf(_tipo);
        Tipo _tipo_1 = new Tipo(_valueOf);
        p.put(_nomeParametro, _tipo_1);
        String _nomeParametro_1 = parametro.getNomeParametro();
        String _nomeParametro_2 = parametro.getNomeParametro();
        type _tipoParametro_1 = parametro.getTipoParametro();
        Tipo _tipo_2 = this.getTipo(_tipoParametro_1);
        String _valueOf_1 = String.valueOf(_tipo_2);
        Tipo _tipo_3 = new Tipo(_valueOf_1);
        Variavel _variavel = new Variavel(_nomeParametro_2, _tipo_3);
        this.variaveis.put(_nomeParametro_1, _variavel);
      }
    }
    return p;
  }
  
  @Check
  public void checkDeclaracaoVariavel(final variable_declaration declaration) {
    type _tipoVariavel = declaration.getTipoVariavel();
    type_specifier _primitivo = _tipoVariavel.getPrimitivo();
    String _nome = _primitivo.getNome();
    Tipo tipoPrimitivo = new Tipo(_nome);
    type _tipoVariavel_1 = declaration.getTipoVariavel();
    name _objeto = _tipoVariavel_1.getObjeto();
    String _nome_1 = _objeto.getNome();
    Tipo tipoObjeto = new Tipo(_nome_1);
    boolean _or = false;
    boolean _contains = this.tipos.contains(tipoPrimitivo);
    boolean _not = (!_contains);
    if (_not) {
      _or = true;
    } else {
      boolean _contains_1 = this.tipos.contains(tipoObjeto);
      boolean _not_1 = (!_contains_1);
      _or = _not_1;
    }
    if (_or) {
      this.error("Inexistent type", SimpleJavaPackage.Literals.VARIABLE_DECLARATION__TIPO_VARIAVEL);
    } else {
      EList<variable_declarator> vars = declaration.getDeclaracaoVariaveis();
      for (final variable_declarator variable : vars) {
        boolean _notEquals = (!Objects.equal(tipoPrimitivo, null));
        if (_notEquals) {
          this.checkVariableDeclarator(variable, tipoPrimitivo);
        } else {
          boolean _notEquals_1 = (!Objects.equal(tipoObjeto, null));
          if (_notEquals_1) {
            this.checkVariableDeclarator(variable, tipoObjeto);
          }
        }
      }
    }
  }
  
  @Check
  public void checkVariableDeclarator(final variable_declarator vd, final Tipo tipo) {
    String _nomeVariavel = vd.getNomeVariavel();
    Variavel variavel = new Variavel(_nomeVariavel, tipo);
    String _nomeVariavel_1 = vd.getNomeVariavel();
    boolean _containsKey = this.variaveis.containsKey(_nomeVariavel_1);
    boolean _not = (!_containsKey);
    if (_not) {
      String _nomeVariavel_2 = vd.getNomeVariavel();
      this.variaveis.put(_nomeVariavel_2, variavel);
      this.genDeclarationVariableCode(vd);
    } else {
      this.error("Variable alredy exist", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL);
    }
  }
  
  public boolean isArimeticExp(final expression expression) {
    String _identificador = expression.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = expression.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    boolean _or_2 = false;
    boolean _or_3 = false;
    boolean _or_4 = false;
    boolean _or_5 = false;
    boolean _or_6 = false;
    boolean _or_7 = false;
    boolean _or_8 = false;
    boolean _or_9 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      _or_9 = true;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _notEquals_1 = (!Objects.equal(_inteiro, null));
      _or_9 = _notEquals_1;
    }
    if (_or_9) {
      _or_8 = true;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _notEquals_2 = (!Objects.equal(_l_float, null));
      _or_8 = _notEquals_2;
    }
    if (_or_8) {
      _or_7 = true;
    } else {
      boolean _and = false;
      boolean _notEquals_3 = (!Objects.equal(metodo, null));
      if (!_notEquals_3) {
        _and = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals = _nome.equals("int");
        _and = _equals;
      }
      _or_7 = _and;
    }
    if (_or_7) {
      _or_6 = true;
    } else {
      boolean _and_1 = false;
      boolean _notEquals_4 = (!Objects.equal(variavel, null));
      if (!_notEquals_4) {
        _and_1 = false;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_1 = _nome_1.equals("int");
        _and_1 = _equals_1;
      }
      _or_6 = _and_1;
    }
    if (_or_6) {
      _or_5 = true;
    } else {
      boolean _and_2 = false;
      boolean _notEquals_5 = (!Objects.equal(metodo, null));
      if (!_notEquals_5) {
        _and_2 = false;
      } else {
        Tipo _tipoRetorno_1 = metodo.getTipoRetorno();
        String _nome_2 = _tipoRetorno_1.getNome();
        boolean _equals_2 = _nome_2.equals("float");
        _and_2 = _equals_2;
      }
      _or_5 = _and_2;
    }
    if (_or_5) {
      _or_4 = true;
    } else {
      boolean _and_3 = false;
      boolean _notEquals_6 = (!Objects.equal(variavel, null));
      if (!_notEquals_6) {
        _and_3 = false;
      } else {
        Tipo _tipo_1 = variavel.getTipo();
        String _nome_3 = _tipo_1.getNome();
        boolean _equals_3 = _nome_3.equals("float");
        _and_3 = _equals_3;
      }
      _or_4 = _and_3;
    }
    if (_or_4) {
      _or_3 = true;
    } else {
      boolean _and_4 = false;
      boolean _notEquals_7 = (!Objects.equal(metodo, null));
      if (!_notEquals_7) {
        _and_4 = false;
      } else {
        Tipo _tipoRetorno_2 = metodo.getTipoRetorno();
        String _nome_4 = _tipoRetorno_2.getNome();
        boolean _equals_4 = _nome_4.equals("long");
        _and_4 = _equals_4;
      }
      _or_3 = _and_4;
    }
    if (_or_3) {
      _or_2 = true;
    } else {
      boolean _and_5 = false;
      boolean _notEquals_8 = (!Objects.equal(variavel, null));
      if (!_notEquals_8) {
        _and_5 = false;
      } else {
        Tipo _tipo_2 = variavel.getTipo();
        String _nome_5 = _tipo_2.getNome();
        boolean _equals_5 = _nome_5.equals("long");
        _and_5 = _equals_5;
      }
      _or_2 = _and_5;
    }
    if (_or_2) {
      _or_1 = true;
    } else {
      boolean _and_6 = false;
      boolean _notEquals_9 = (!Objects.equal(metodo, null));
      if (!_notEquals_9) {
        _and_6 = false;
      } else {
        Tipo _tipoRetorno_3 = metodo.getTipoRetorno();
        String _nome_6 = _tipoRetorno_3.getNome();
        boolean _equals_6 = _nome_6.equals("double");
        _and_6 = _equals_6;
      }
      _or_1 = _and_6;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _and_7 = false;
      boolean _notEquals_10 = (!Objects.equal(variavel, null));
      if (!_notEquals_10) {
        _and_7 = false;
      } else {
        Tipo _tipo_3 = variavel.getTipo();
        String _nome_7 = _tipo_3.getNome();
        boolean _equals_7 = _nome_7.equals("double");
        _and_7 = _equals_7;
      }
      _or = _and_7;
    }
    if (_or) {
      boolean _or_10 = false;
      boolean _or_11 = false;
      boolean _or_12 = false;
      boolean _or_13 = false;
      boolean _or_14 = false;
      boolean _or_15 = false;
      boolean _or_16 = false;
      boolean _or_17 = false;
      boolean _or_18 = false;
      boolean _or_19 = false;
      boolean _or_20 = false;
      expression_aux _expressoes = expression.getExpressoes();
      mais_aux _op = _expressoes.getOp();
      boolean _notEquals_11 = (!Objects.equal(_op, null));
      if (_notEquals_11) {
        _or_20 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador = _expressoes_1.getOperador();
        boolean _equals_8 = Objects.equal(_operador, "++");
        _or_20 = _equals_8;
      }
      if (_or_20) {
        _or_19 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_1 = _expressoes_2.getOperador();
        boolean _equals_9 = Objects.equal(_operador_1, "--");
        _or_19 = _equals_9;
      }
      if (_or_19) {
        _or_18 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_2 = _expressoes_3.getOperador();
        boolean _equals_10 = Objects.equal(_operador_2, "-");
        _or_18 = _equals_10;
      }
      if (_or_18) {
        _or_17 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_3 = _expressoes_4.getOperador();
        boolean _equals_11 = Objects.equal(_operador_3, "-=");
        _or_17 = _equals_11;
      }
      if (_or_17) {
        _or_16 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_4 = _expressoes_5.getOperador();
        boolean _equals_12 = Objects.equal(_operador_4, "*");
        _or_16 = _equals_12;
      }
      if (_or_16) {
        _or_15 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_5 = _expressoes_6.getOperador();
        boolean _equals_13 = Objects.equal(_operador_5, "*=");
        _or_15 = _equals_13;
      }
      if (_or_15) {
        _or_14 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_6 = _expressoes_7.getOperador();
        boolean _equals_14 = Objects.equal(_operador_6, "/");
        _or_14 = _equals_14;
      }
      if (_or_14) {
        _or_13 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_7 = _expressoes_8.getOperador();
        boolean _equals_15 = Objects.equal(_operador_7, "/=");
        _or_13 = _equals_15;
      }
      if (_or_13) {
        _or_12 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_8 = _expressoes_9.getOperador();
        boolean _equals_16 = Objects.equal(_operador_8, "%");
        _or_12 = _equals_16;
      }
      if (_or_12) {
        _or_11 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_9 = _expressoes_10.getOperador();
        boolean _equals_17 = Objects.equal(_operador_9, "%=");
        _or_11 = _equals_17;
      }
      if (_or_11) {
        _or_10 = true;
      } else {
        numeric_expression _numeric = expression.getNumeric();
        boolean _notEquals_12 = (!Objects.equal(_numeric, null));
        _or_10 = _notEquals_12;
      }
      if (_or_10) {
        org.xtext.example.simpleJava.expression _exp = expression.getExp();
        String _identificador_2 = _exp.getIdentificador();
        Metodo m = this.metodos.get(_identificador_2);
        org.xtext.example.simpleJava.expression _exp_1 = expression.getExp();
        String _identificador_3 = _exp_1.getIdentificador();
        Variavel v = this.variaveis.get(_identificador_3);
        boolean _or_21 = false;
        boolean _or_22 = false;
        boolean _or_23 = false;
        boolean _or_24 = false;
        boolean _or_25 = false;
        boolean _or_26 = false;
        boolean _or_27 = false;
        boolean _or_28 = false;
        boolean _or_29 = false;
        boolean _or_30 = false;
        org.xtext.example.simpleJava.expression _exp_2 = expression.getExp();
        literal_expression _literal_3 = _exp_2.getLiteral();
        String _decimal_1 = _literal_3.getDecimal();
        boolean _notEquals_13 = (!Objects.equal(_decimal_1, null));
        if (_notEquals_13) {
          _or_30 = true;
        } else {
          org.xtext.example.simpleJava.expression _exp_3 = expression.getExp();
          literal_expression _literal_4 = _exp_3.getLiteral();
          String _inteiro_1 = _literal_4.getInteiro();
          boolean _notEquals_14 = (!Objects.equal(_inteiro_1, null));
          _or_30 = _notEquals_14;
        }
        if (_or_30) {
          _or_29 = true;
        } else {
          org.xtext.example.simpleJava.expression _exp_4 = expression.getExp();
          literal_expression _literal_5 = _exp_4.getLiteral();
          String _l_float_1 = _literal_5.getL_float();
          boolean _notEquals_15 = (!Objects.equal(_l_float_1, null));
          _or_29 = _notEquals_15;
        }
        if (_or_29) {
          _or_28 = true;
        } else {
          boolean _and_8 = false;
          boolean _notEquals_16 = (!Objects.equal(m, null));
          if (!_notEquals_16) {
            _and_8 = false;
          } else {
            Tipo _tipoRetorno_4 = m.getTipoRetorno();
            String _nome_8 = _tipoRetorno_4.getNome();
            boolean _equals_18 = _nome_8.equals("int");
            _and_8 = _equals_18;
          }
          _or_28 = _and_8;
        }
        if (_or_28) {
          _or_27 = true;
        } else {
          boolean _and_9 = false;
          boolean _notEquals_17 = (!Objects.equal(v, null));
          if (!_notEquals_17) {
            _and_9 = false;
          } else {
            Tipo _tipo_4 = v.getTipo();
            String _nome_9 = _tipo_4.getNome();
            boolean _equals_19 = _nome_9.equals("int");
            _and_9 = _equals_19;
          }
          _or_27 = _and_9;
        }
        if (_or_27) {
          _or_26 = true;
        } else {
          boolean _and_10 = false;
          boolean _notEquals_18 = (!Objects.equal(m, null));
          if (!_notEquals_18) {
            _and_10 = false;
          } else {
            Tipo _tipoRetorno_5 = m.getTipoRetorno();
            String _nome_10 = _tipoRetorno_5.getNome();
            boolean _equals_20 = _nome_10.equals("float");
            _and_10 = _equals_20;
          }
          _or_26 = _and_10;
        }
        if (_or_26) {
          _or_25 = true;
        } else {
          boolean _and_11 = false;
          boolean _notEquals_19 = (!Objects.equal(v, null));
          if (!_notEquals_19) {
            _and_11 = false;
          } else {
            Tipo _tipo_5 = v.getTipo();
            String _nome_11 = _tipo_5.getNome();
            boolean _equals_21 = _nome_11.equals("float");
            _and_11 = _equals_21;
          }
          _or_25 = _and_11;
        }
        if (_or_25) {
          _or_24 = true;
        } else {
          boolean _and_12 = false;
          boolean _notEquals_20 = (!Objects.equal(m, null));
          if (!_notEquals_20) {
            _and_12 = false;
          } else {
            Tipo _tipoRetorno_6 = m.getTipoRetorno();
            String _nome_12 = _tipoRetorno_6.getNome();
            boolean _equals_22 = _nome_12.equals("long");
            _and_12 = _equals_22;
          }
          _or_24 = _and_12;
        }
        if (_or_24) {
          _or_23 = true;
        } else {
          boolean _and_13 = false;
          boolean _notEquals_21 = (!Objects.equal(v, null));
          if (!_notEquals_21) {
            _and_13 = false;
          } else {
            Tipo _tipo_6 = v.getTipo();
            String _nome_13 = _tipo_6.getNome();
            boolean _equals_23 = _nome_13.equals("long");
            _and_13 = _equals_23;
          }
          _or_23 = _and_13;
        }
        if (_or_23) {
          _or_22 = true;
        } else {
          boolean _and_14 = false;
          boolean _notEquals_22 = (!Objects.equal(m, null));
          if (!_notEquals_22) {
            _and_14 = false;
          } else {
            Tipo _tipoRetorno_7 = m.getTipoRetorno();
            String _nome_14 = _tipoRetorno_7.getNome();
            boolean _equals_24 = _nome_14.equals("double");
            _and_14 = _equals_24;
          }
          _or_22 = _and_14;
        }
        if (_or_22) {
          _or_21 = true;
        } else {
          boolean _and_15 = false;
          boolean _notEquals_23 = (!Objects.equal(v, null));
          if (!_notEquals_23) {
            _and_15 = false;
          } else {
            Tipo _tipo_7 = v.getTipo();
            String _nome_15 = _tipo_7.getNome();
            boolean _equals_25 = _nome_15.equals("double");
            _and_15 = _equals_25;
          }
          _or_21 = _and_15;
        }
        if (_or_21) {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isBooleanExp(final expression expression) {
    String _identificador = expression.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = expression.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    logical_expression _logical = expression.getLogical();
    String _operador = _logical.getOperador();
    boolean _notEquals = (!Objects.equal(_operador, null));
    if (_notEquals) {
      _or_1 = true;
    } else {
      boolean _and = false;
      boolean _notEquals_1 = (!Objects.equal(metodo, null));
      if (!_notEquals_1) {
        _and = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals = _nome.equals("boolean");
        _and = _equals;
      }
      _or_1 = _and;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _and_1 = false;
      boolean _notEquals_2 = (!Objects.equal(variavel, null));
      if (!_notEquals_2) {
        _and_1 = false;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_1 = _nome_1.equals("boolean");
        _and_1 = _equals_1;
      }
      _or = _and_1;
    }
    if (_or) {
      boolean _or_2 = false;
      boolean _and_2 = false;
      logical_expression _logical_1 = expression.getLogical();
      String _operador_1 = _logical_1.getOperador();
      boolean _equals_2 = Objects.equal(_operador_1, "!");
      if (!_equals_2) {
        _and_2 = false;
      } else {
        logical_expression _logical_2 = expression.getLogical();
        org.xtext.example.simpleJava.expression _exp = _logical_2.getExp();
        boolean _isBooleanExp = this.isBooleanExp(_exp);
        _and_2 = _isBooleanExp;
      }
      if (_and_2) {
        _or_2 = true;
      } else {
        boolean _or_3 = false;
        logical_expression _logical_3 = expression.getLogical();
        String _operador_2 = _logical_3.getOperador();
        boolean _equals_3 = Objects.equal(_operador_2, "true");
        if (_equals_3) {
          _or_3 = true;
        } else {
          logical_expression _logical_4 = expression.getLogical();
          String _operador_3 = _logical_4.getOperador();
          boolean _equals_4 = Objects.equal(_operador_3, "false");
          _or_3 = _equals_4;
        }
        _or_2 = _or_3;
      }
      if (_or_2) {
        return true;
      }
      boolean _or_4 = false;
      boolean _and_3 = false;
      boolean _notEquals_3 = (!Objects.equal(metodo, null));
      if (!_notEquals_3) {
        _and_3 = false;
      } else {
        Tipo _tipoRetorno_1 = metodo.getTipoRetorno();
        String _nome_2 = _tipoRetorno_1.getNome();
        boolean _equals_5 = _nome_2.equals("boolean");
        _and_3 = _equals_5;
      }
      if (_and_3) {
        _or_4 = true;
      } else {
        boolean _and_4 = false;
        boolean _notEquals_4 = (!Objects.equal(variavel, null));
        if (!_notEquals_4) {
          _and_4 = false;
        } else {
          Tipo _tipo_1 = variavel.getTipo();
          String _nome_3 = _tipo_1.getNome();
          boolean _equals_6 = _nome_3.equals("boolean");
          _and_4 = _equals_6;
        }
        _or_4 = _and_4;
      }
      if (_or_4) {
        return true;
      }
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      boolean _or_11 = false;
      boolean _or_12 = false;
      boolean _or_13 = false;
      boolean _or_14 = false;
      expression_aux _expressoes = expression.getExpressoes();
      String _operador_4 = _expressoes.getOperador();
      boolean _equals_7 = Objects.equal(_operador_4, "&");
      if (_equals_7) {
        _or_14 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador_5 = _expressoes_1.getOperador();
        boolean _equals_8 = Objects.equal(_operador_5, "^=");
        _or_14 = _equals_8;
      }
      if (_or_14) {
        _or_13 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_6 = _expressoes_2.getOperador();
        boolean _equals_9 = Objects.equal(_operador_6, "&=");
        _or_13 = _equals_9;
      }
      if (_or_13) {
        _or_12 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_7 = _expressoes_3.getOperador();
        boolean _equals_10 = Objects.equal(_operador_7, "||");
        _or_12 = _equals_10;
      }
      if (_or_12) {
        _or_11 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_8 = _expressoes_4.getOperador();
        boolean _equals_11 = Objects.equal(_operador_8, "&&");
        _or_11 = _equals_11;
      }
      if (_or_11) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_9 = _expressoes_5.getOperador();
        boolean _equals_12 = Objects.equal(_operador_9, "|");
        _or_10 = _equals_12;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_10 = _expressoes_6.getOperador();
        boolean _equals_13 = Objects.equal(_operador_10, "||=");
        _or_9 = _equals_13;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_11 = _expressoes_7.getOperador();
        boolean _equals_14 = Objects.equal(_operador_11, "|=");
        _or_8 = _equals_14;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_12 = _expressoes_8.getOperador();
        boolean _equals_15 = Objects.equal(_operador_12, "%");
        _or_7 = _equals_15;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_13 = _expressoes_9.getOperador();
        boolean _equals_16 = Objects.equal(_operador_13, "^");
        _or_6 = _equals_16;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_14 = _expressoes_10.getOperador();
        boolean _equals_17 = Objects.equal(_operador_14, "%=");
        _or_5 = _equals_17;
      }
      if (_or_5) {
        org.xtext.example.simpleJava.expression _exp_1 = expression.getExp();
        String _identificador_2 = _exp_1.getIdentificador();
        Metodo m = this.metodos.get(_identificador_2);
        org.xtext.example.simpleJava.expression _exp_2 = expression.getExp();
        String _identificador_3 = _exp_2.getIdentificador();
        Variavel v = this.variaveis.get(_identificador_3);
        boolean _or_15 = false;
        boolean _or_16 = false;
        org.xtext.example.simpleJava.expression _exp_3 = expression.getExp();
        logical_expression _logical_5 = _exp_3.getLogical();
        String _operador_15 = _logical_5.getOperador();
        boolean _notEquals_5 = (!Objects.equal(_operador_15, null));
        if (_notEquals_5) {
          _or_16 = true;
        } else {
          boolean _and_5 = false;
          boolean _notEquals_6 = (!Objects.equal(m, null));
          if (!_notEquals_6) {
            _and_5 = false;
          } else {
            Tipo _tipoRetorno_2 = m.getTipoRetorno();
            String _nome_4 = _tipoRetorno_2.getNome();
            boolean _equals_18 = _nome_4.equals("boolean");
            _and_5 = _equals_18;
          }
          _or_16 = _and_5;
        }
        if (_or_16) {
          _or_15 = true;
        } else {
          boolean _and_6 = false;
          boolean _notEquals_7 = (!Objects.equal(v, null));
          if (!_notEquals_7) {
            _and_6 = false;
          } else {
            Tipo _tipo_2 = v.getTipo();
            String _nome_5 = _tipo_2.getNome();
            boolean _equals_19 = _nome_5.equals("boolean");
            _and_6 = _equals_19;
          }
          _or_15 = _and_6;
        }
        if (_or_15) {
          return true;
        }
      }
      boolean _and_7 = false;
      expression_aux _expressoes_11 = expression.getExpressoes();
      String _operador_16 = _expressoes_11.getOperador();
      boolean _equals_20 = Objects.equal(_operador_16, "?");
      if (!_equals_20) {
        _and_7 = false;
      } else {
        expression_aux _expressoes_12 = expression.getExpressoes();
        org.xtext.example.simpleJava.expression _exp_4 = _expressoes_12.getExp();
        expression_aux _expressoes_13 = _exp_4.getExpressoes();
        String _operador_17 = _expressoes_13.getOperador();
        boolean _equals_21 = Objects.equal(_operador_17, ":");
        _and_7 = _equals_21;
      }
      if (_and_7) {
        return true;
      }
    }
    return false;
  }
  
  public boolean isVariable(final expression expression) {
    String _identificador = expression.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(_identificador);
    if (_containsKey) {
      return true;
    }
    return false;
  }
  
  public boolean isLiteral(final expression expression) {
    boolean _or = false;
    literal_expression _literal = expression.getLiteral();
    boolean _notEquals = (!Objects.equal(_literal, null));
    if (_notEquals) {
      _or = true;
    } else {
      logical_expression _logical = expression.getLogical();
      String _operador = _logical.getOperador();
      boolean _notEquals_1 = (!Objects.equal(_operador, "!"));
      _or = _notEquals_1;
    }
    if (_or) {
      return true;
    }
    return false;
  }
  
  public boolean isAtribuicao(final expression expression) {
    String _identificador = expression.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(_identificador);
    if (_containsKey) {
      boolean _or = false;
      boolean _or_1 = false;
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      expression_aux _expressoes = expression.getExpressoes();
      String _operador = _expressoes.getOperador();
      boolean _equals = Objects.equal(_operador, "^=");
      if (_equals) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador_1 = _expressoes_1.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "*=");
        _or_6 = _equals_1;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_2 = _expressoes_2.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "-=");
        _or_5 = _equals_2;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_3 = _expressoes_3.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "||=");
        _or_4 = _equals_3;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_4 = _expressoes_4.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "|=");
        _or_3 = _equals_4;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_5 = _expressoes_5.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "/=");
        _or_2 = _equals_5;
      }
      if (_or_2) {
        _or_1 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_6 = _expressoes_6.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "%=");
        _or_1 = _equals_6;
      }
      if (_or_1) {
        _or = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_7 = _expressoes_7.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "&=");
        _or = _equals_7;
      }
      if (_or) {
        return true;
      }
    } else {
      org.xtext.example.simpleJava.expression _exp = expression.getExp();
      creating_expression _novo = _exp.getNovo();
      boolean _notEquals = (!Objects.equal(_novo, null));
      if (_notEquals) {
        return true;
      }
    }
    return false;
  }
  
  public void load(final String end1, final String end2) {
    this.salvarArquivo(((("LD " + end1) + ", ") + end2));
  }
  
  public void load(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("LD " + end1) + ", ") + end2) + "(") + deslocamento) + ")"));
  }
  
  public void storeRight(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("ST " + end1) + ", ") + end2) + "(") + deslocamento) + ")"));
  }
  
  public void storeLeft(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("ST " + end1) + "(") + deslocamento) + ")") + ", ") + end2));
  }
  
  public void store(final String end1, final String end2) {
    this.salvarArquivo(((("ST " + end1) + ", ") + end2));
  }
  
  public void DesvioIncod(final String label) {
    this.salvarArquivo(("BR " + label));
  }
  
  public void DesvioCond(final String op, final String end, final String label) {
    boolean _equals = op.equals("maior");
    if (_equals) {
      this.salvarArquivo(((("BGTZ " + end) + ", ") + label));
    } else {
      boolean _equals_1 = op.equals("menor");
      if (_equals_1) {
        this.salvarArquivo(((("BLTZ " + end) + ", ") + label));
      } else {
        boolean _equals_2 = op.equals("igual");
        if (_equals_2) {
          this.salvarArquivo(((("BETZ " + end) + ", ") + label));
        }
      }
    }
  }
  
  public void op(final String op, final String dest, final String end1, final String end2) {
    boolean _equals = op.equals("soma");
    if (_equals) {
      this.salvarArquivo(((((("ADD " + dest) + ", ") + end1) + ", ") + end2));
    } else {
      boolean _equals_1 = op.equals("subtracao");
      if (_equals_1) {
        this.salvarArquivo(((((("SUB " + dest) + ", ") + end1) + ", ") + end2));
      } else {
        boolean _equals_2 = op.equals("multplicacao");
        if (_equals_2) {
          this.salvarArquivo(((((("MULT " + dest) + ", ") + end1) + ", ") + end2));
        } else {
          boolean _equals_3 = op.equals("divisao");
          if (_equals_3) {
            this.salvarArquivo(((((("DIV " + dest) + ", ") + end1) + ", ") + end2));
          }
        }
      }
    }
  }
  
  public void salvarArquivo(final String s) {
    try {
      File arquivo = new File("/home/franklin/teste.txt");
      FileWriter fw = new FileWriter(arquivo, true);
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(s);
      bw.newLine();
      bw.close();
      fw.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void genCodeOP(final expression exp, final String op) {
    literal_expression _literal = exp.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      expression _exp = exp.getExp();
      literal_expression _literal_1 = _exp.getLiteral();
      String _decimal_1 = _literal_1.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal_1, null));
      if (_notEquals_1) {
        literal_expression _literal_2 = exp.getLiteral();
        String _decimal_2 = _literal_2.getDecimal();
        expression _exp_1 = exp.getExp();
        literal_expression _literal_3 = _exp_1.getLiteral();
        String _decimal_3 = _literal_3.getDecimal();
        this.op(op, "r1", _decimal_2, _decimal_3);
      } else {
        expression _exp_2 = exp.getExp();
        literal_expression _literal_4 = _exp_2.getLiteral();
        String _inteiro = _literal_4.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          literal_expression _literal_5 = exp.getLiteral();
          String _decimal_4 = _literal_5.getDecimal();
          expression _exp_3 = exp.getExp();
          literal_expression _literal_6 = _exp_3.getLiteral();
          String _inteiro_1 = _literal_6.getInteiro();
          this.op(op, "r1", _decimal_4, _inteiro_1);
        } else {
          expression _exp_4 = exp.getExp();
          literal_expression _literal_7 = _exp_4.getLiteral();
          String _l_float = _literal_7.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            literal_expression _literal_8 = exp.getLiteral();
            String _decimal_5 = _literal_8.getDecimal();
            expression _exp_5 = exp.getExp();
            literal_expression _literal_9 = _exp_5.getLiteral();
            String _l_float_1 = _literal_9.getL_float();
            this.op(op, "r1", _decimal_5, _l_float_1);
          } else {
            expression _exp_6 = exp.getExp();
            String _identificador = _exp_6.getIdentificador();
            boolean _notEquals_4 = (!Objects.equal(_identificador, null));
            if (_notEquals_4) {
              expression _exp_7 = exp.getExp();
              this.genUseVariableCode(_exp_7);
              literal_expression _literal_10 = exp.getLiteral();
              String _decimal_6 = _literal_10.getDecimal();
              int _size = this.registradores.size();
              int _minus = (_size - 1);
              Integer _get = this.registradores.get(_minus);
              String _plus = ("r" + _get);
              this.op(op, "r1", _decimal_6, _plus);
            }
          }
        }
      }
    } else {
      literal_expression _literal_11 = exp.getLiteral();
      String _inteiro_2 = _literal_11.getInteiro();
      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
      if (_notEquals_5) {
        expression _exp_8 = exp.getExp();
        literal_expression _literal_12 = _exp_8.getLiteral();
        String _decimal_7 = _literal_12.getDecimal();
        boolean _notEquals_6 = (!Objects.equal(_decimal_7, null));
        if (_notEquals_6) {
          literal_expression _literal_13 = exp.getLiteral();
          String _inteiro_3 = _literal_13.getInteiro();
          expression _exp_9 = exp.getExp();
          literal_expression _literal_14 = _exp_9.getLiteral();
          String _decimal_8 = _literal_14.getDecimal();
          this.op(op, "r1", _inteiro_3, _decimal_8);
        } else {
          expression _exp_10 = exp.getExp();
          literal_expression _literal_15 = _exp_10.getLiteral();
          String _inteiro_4 = _literal_15.getInteiro();
          boolean _notEquals_7 = (!Objects.equal(_inteiro_4, null));
          if (_notEquals_7) {
            literal_expression _literal_16 = exp.getLiteral();
            String _inteiro_5 = _literal_16.getInteiro();
            expression _exp_11 = exp.getExp();
            literal_expression _literal_17 = _exp_11.getLiteral();
            String _inteiro_6 = _literal_17.getInteiro();
            this.op(op, "r1", _inteiro_5, _inteiro_6);
          } else {
            expression _exp_12 = exp.getExp();
            literal_expression _literal_18 = _exp_12.getLiteral();
            String _l_float_2 = _literal_18.getL_float();
            boolean _notEquals_8 = (!Objects.equal(_l_float_2, null));
            if (_notEquals_8) {
              literal_expression _literal_19 = exp.getLiteral();
              String _inteiro_7 = _literal_19.getInteiro();
              expression _exp_13 = exp.getExp();
              literal_expression _literal_20 = _exp_13.getLiteral();
              String _l_float_3 = _literal_20.getL_float();
              this.op(op, "r1", _inteiro_7, _l_float_3);
            } else {
              expression _exp_14 = exp.getExp();
              String _identificador_1 = _exp_14.getIdentificador();
              boolean _notEquals_9 = (!Objects.equal(_identificador_1, null));
              if (_notEquals_9) {
                expression _exp_15 = exp.getExp();
                this.genUseVariableCode(_exp_15);
                literal_expression _literal_21 = exp.getLiteral();
                String _decimal_9 = _literal_21.getDecimal();
                int _size_1 = this.registradores.size();
                int _minus_1 = (_size_1 - 1);
                Integer _get_1 = this.registradores.get(_minus_1);
                String _plus_1 = ("r" + _get_1);
                this.op(op, "r1", _decimal_9, _plus_1);
              }
            }
          }
        }
      } else {
        literal_expression _literal_22 = exp.getLiteral();
        String _l_float_4 = _literal_22.getL_float();
        boolean _notEquals_10 = (!Objects.equal(_l_float_4, null));
        if (_notEquals_10) {
          expression _exp_16 = exp.getExp();
          literal_expression _literal_23 = _exp_16.getLiteral();
          String _decimal_10 = _literal_23.getDecimal();
          boolean _notEquals_11 = (!Objects.equal(_decimal_10, null));
          if (_notEquals_11) {
            literal_expression _literal_24 = exp.getLiteral();
            String _l_float_5 = _literal_24.getL_float();
            expression _exp_17 = exp.getExp();
            literal_expression _literal_25 = _exp_17.getLiteral();
            String _decimal_11 = _literal_25.getDecimal();
            this.op(op, "r1", _l_float_5, _decimal_11);
          } else {
            expression _exp_18 = exp.getExp();
            literal_expression _literal_26 = _exp_18.getLiteral();
            String _inteiro_8 = _literal_26.getInteiro();
            boolean _notEquals_12 = (!Objects.equal(_inteiro_8, null));
            if (_notEquals_12) {
              literal_expression _literal_27 = exp.getLiteral();
              String _l_float_6 = _literal_27.getL_float();
              expression _exp_19 = exp.getExp();
              literal_expression _literal_28 = _exp_19.getLiteral();
              String _inteiro_9 = _literal_28.getInteiro();
              this.op(op, "r1", _l_float_6, _inteiro_9);
            } else {
              expression _exp_20 = exp.getExp();
              literal_expression _literal_29 = _exp_20.getLiteral();
              String _l_float_7 = _literal_29.getL_float();
              boolean _notEquals_13 = (!Objects.equal(_l_float_7, null));
              if (_notEquals_13) {
                literal_expression _literal_30 = exp.getLiteral();
                String _l_float_8 = _literal_30.getL_float();
                expression _exp_21 = exp.getExp();
                literal_expression _literal_31 = _exp_21.getLiteral();
                String _l_float_9 = _literal_31.getL_float();
                this.op(op, "r1", _l_float_8, _l_float_9);
              } else {
                expression _exp_22 = exp.getExp();
                String _identificador_2 = _exp_22.getIdentificador();
                boolean _notEquals_14 = (!Objects.equal(_identificador_2, null));
                if (_notEquals_14) {
                  expression _exp_23 = exp.getExp();
                  this.genUseVariableCode(_exp_23);
                  literal_expression _literal_32 = exp.getLiteral();
                  String _decimal_12 = _literal_32.getDecimal();
                  int _size_2 = this.registradores.size();
                  int _minus_2 = (_size_2 - 1);
                  Integer _get_2 = this.registradores.get(_minus_2);
                  String _plus_2 = ("r" + _get_2);
                  this.op(op, "r1", _decimal_12, _plus_2);
                }
              }
            }
          }
        } else {
          expression _exp_24 = exp.getExp();
          String _identificador_3 = _exp_24.getIdentificador();
          boolean _notEquals_15 = (!Objects.equal(_identificador_3, null));
          if (_notEquals_15) {
            expression _exp_25 = exp.getExp();
            literal_expression _literal_33 = _exp_25.getLiteral();
            String _decimal_13 = _literal_33.getDecimal();
            boolean _notEquals_16 = (!Objects.equal(_decimal_13, null));
            if (_notEquals_16) {
              String _identificador_4 = exp.getIdentificador();
              expression _exp_26 = exp.getExp();
              literal_expression _literal_34 = _exp_26.getLiteral();
              String _decimal_14 = _literal_34.getDecimal();
              this.op(op, "r1", _identificador_4, _decimal_14);
            } else {
              expression _exp_27 = exp.getExp();
              literal_expression _literal_35 = _exp_27.getLiteral();
              String _inteiro_10 = _literal_35.getInteiro();
              boolean _notEquals_17 = (!Objects.equal(_inteiro_10, null));
              if (_notEquals_17) {
                String _identificador_5 = exp.getIdentificador();
                expression _exp_28 = exp.getExp();
                literal_expression _literal_36 = _exp_28.getLiteral();
                String _inteiro_11 = _literal_36.getInteiro();
                this.op(op, "r1", _identificador_5, _inteiro_11);
              } else {
                expression _exp_29 = exp.getExp();
                literal_expression _literal_37 = _exp_29.getLiteral();
                String _l_float_10 = _literal_37.getL_float();
                boolean _notEquals_18 = (!Objects.equal(_l_float_10, null));
                if (_notEquals_18) {
                  String _identificador_6 = exp.getIdentificador();
                  expression _exp_30 = exp.getExp();
                  literal_expression _literal_38 = _exp_30.getLiteral();
                  String _l_float_11 = _literal_38.getL_float();
                  this.op(op, "r1", _identificador_6, _l_float_11);
                } else {
                  expression _exp_31 = exp.getExp();
                  String _identificador_7 = _exp_31.getIdentificador();
                  boolean _notEquals_19 = (!Objects.equal(_identificador_7, null));
                  if (_notEquals_19) {
                    expression _exp_32 = exp.getExp();
                    this.genUseVariableCode(_exp_32);
                    String _identificador_8 = exp.getIdentificador();
                    int _size_3 = this.registradores.size();
                    int _minus_3 = (_size_3 - 1);
                    Integer _get_3 = this.registradores.get(_minus_3);
                    String _plus_3 = ("r" + _get_3);
                    this.op(op, "r1", _identificador_8, _plus_3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void genCodeOP(final expression exp, final String op, final String r) {
    literal_expression _literal = exp.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      expression _exp = exp.getExp();
      literal_expression _literal_1 = _exp.getLiteral();
      String _decimal_1 = _literal_1.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal_1, null));
      if (_notEquals_1) {
        literal_expression _literal_2 = exp.getLiteral();
        String _decimal_2 = _literal_2.getDecimal();
        expression _exp_1 = exp.getExp();
        literal_expression _literal_3 = _exp_1.getLiteral();
        String _decimal_3 = _literal_3.getDecimal();
        this.op(op, r, _decimal_2, _decimal_3);
      } else {
        expression _exp_2 = exp.getExp();
        literal_expression _literal_4 = _exp_2.getLiteral();
        String _inteiro = _literal_4.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          literal_expression _literal_5 = exp.getLiteral();
          String _decimal_4 = _literal_5.getDecimal();
          expression _exp_3 = exp.getExp();
          literal_expression _literal_6 = _exp_3.getLiteral();
          String _inteiro_1 = _literal_6.getInteiro();
          this.op(op, r, _decimal_4, _inteiro_1);
        } else {
          expression _exp_4 = exp.getExp();
          literal_expression _literal_7 = _exp_4.getLiteral();
          String _l_float = _literal_7.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            literal_expression _literal_8 = exp.getLiteral();
            String _decimal_5 = _literal_8.getDecimal();
            expression _exp_5 = exp.getExp();
            literal_expression _literal_9 = _exp_5.getLiteral();
            String _l_float_1 = _literal_9.getL_float();
            this.op(op, r, _decimal_5, _l_float_1);
          } else {
            expression _exp_6 = exp.getExp();
            String _identificador = _exp_6.getIdentificador();
            boolean _notEquals_4 = (!Objects.equal(_identificador, null));
            if (_notEquals_4) {
              expression _exp_7 = exp.getExp();
              this.genUseVariableCode(_exp_7, r);
              literal_expression _literal_10 = exp.getLiteral();
              String _decimal_6 = _literal_10.getDecimal();
              int _size = this.registradores.size();
              int _minus = (_size - 1);
              Integer _get = this.registradores.get(_minus);
              String _plus = ("r" + _get);
              this.op(op, r, _decimal_6, _plus);
            }
          }
        }
      }
    } else {
      literal_expression _literal_11 = exp.getLiteral();
      String _inteiro_2 = _literal_11.getInteiro();
      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
      if (_notEquals_5) {
        expression _exp_8 = exp.getExp();
        literal_expression _literal_12 = _exp_8.getLiteral();
        String _decimal_7 = _literal_12.getDecimal();
        boolean _notEquals_6 = (!Objects.equal(_decimal_7, null));
        if (_notEquals_6) {
          literal_expression _literal_13 = exp.getLiteral();
          String _inteiro_3 = _literal_13.getInteiro();
          expression _exp_9 = exp.getExp();
          literal_expression _literal_14 = _exp_9.getLiteral();
          String _decimal_8 = _literal_14.getDecimal();
          this.op(op, r, _inteiro_3, _decimal_8);
        } else {
          expression _exp_10 = exp.getExp();
          literal_expression _literal_15 = _exp_10.getLiteral();
          String _inteiro_4 = _literal_15.getInteiro();
          boolean _notEquals_7 = (!Objects.equal(_inteiro_4, null));
          if (_notEquals_7) {
            literal_expression _literal_16 = exp.getLiteral();
            String _inteiro_5 = _literal_16.getInteiro();
            expression _exp_11 = exp.getExp();
            literal_expression _literal_17 = _exp_11.getLiteral();
            String _inteiro_6 = _literal_17.getInteiro();
            this.op(op, r, _inteiro_5, _inteiro_6);
          } else {
            expression _exp_12 = exp.getExp();
            literal_expression _literal_18 = _exp_12.getLiteral();
            String _l_float_2 = _literal_18.getL_float();
            boolean _notEquals_8 = (!Objects.equal(_l_float_2, null));
            if (_notEquals_8) {
              literal_expression _literal_19 = exp.getLiteral();
              String _inteiro_7 = _literal_19.getInteiro();
              expression _exp_13 = exp.getExp();
              literal_expression _literal_20 = _exp_13.getLiteral();
              String _l_float_3 = _literal_20.getL_float();
              this.op(op, r, _inteiro_7, _l_float_3);
            } else {
              expression _exp_14 = exp.getExp();
              String _identificador_1 = _exp_14.getIdentificador();
              boolean _notEquals_9 = (!Objects.equal(_identificador_1, null));
              if (_notEquals_9) {
                expression _exp_15 = exp.getExp();
                this.genUseVariableCode(_exp_15, r);
                literal_expression _literal_21 = exp.getLiteral();
                String _decimal_9 = _literal_21.getDecimal();
                int _size_1 = this.registradores.size();
                int _minus_1 = (_size_1 - 1);
                Integer _get_1 = this.registradores.get(_minus_1);
                String _plus_1 = ("r" + _get_1);
                this.op(op, r, _decimal_9, _plus_1);
              }
            }
          }
        }
      } else {
        literal_expression _literal_22 = exp.getLiteral();
        String _l_float_4 = _literal_22.getL_float();
        boolean _notEquals_10 = (!Objects.equal(_l_float_4, null));
        if (_notEquals_10) {
          expression _exp_16 = exp.getExp();
          literal_expression _literal_23 = _exp_16.getLiteral();
          String _decimal_10 = _literal_23.getDecimal();
          boolean _notEquals_11 = (!Objects.equal(_decimal_10, null));
          if (_notEquals_11) {
            literal_expression _literal_24 = exp.getLiteral();
            String _l_float_5 = _literal_24.getL_float();
            expression _exp_17 = exp.getExp();
            literal_expression _literal_25 = _exp_17.getLiteral();
            String _decimal_11 = _literal_25.getDecimal();
            this.op(op, r, _l_float_5, _decimal_11);
          } else {
            expression _exp_18 = exp.getExp();
            literal_expression _literal_26 = _exp_18.getLiteral();
            String _inteiro_8 = _literal_26.getInteiro();
            boolean _notEquals_12 = (!Objects.equal(_inteiro_8, null));
            if (_notEquals_12) {
              literal_expression _literal_27 = exp.getLiteral();
              String _l_float_6 = _literal_27.getL_float();
              expression _exp_19 = exp.getExp();
              literal_expression _literal_28 = _exp_19.getLiteral();
              String _inteiro_9 = _literal_28.getInteiro();
              this.op(op, r, _l_float_6, _inteiro_9);
            } else {
              expression _exp_20 = exp.getExp();
              literal_expression _literal_29 = _exp_20.getLiteral();
              String _l_float_7 = _literal_29.getL_float();
              boolean _notEquals_13 = (!Objects.equal(_l_float_7, null));
              if (_notEquals_13) {
                literal_expression _literal_30 = exp.getLiteral();
                String _l_float_8 = _literal_30.getL_float();
                expression _exp_21 = exp.getExp();
                literal_expression _literal_31 = _exp_21.getLiteral();
                String _l_float_9 = _literal_31.getL_float();
                this.op(op, r, _l_float_8, _l_float_9);
              } else {
                expression _exp_22 = exp.getExp();
                String _identificador_2 = _exp_22.getIdentificador();
                boolean _notEquals_14 = (!Objects.equal(_identificador_2, null));
                if (_notEquals_14) {
                  expression _exp_23 = exp.getExp();
                  this.genUseVariableCode(_exp_23, r);
                  literal_expression _literal_32 = exp.getLiteral();
                  String _decimal_12 = _literal_32.getDecimal();
                  int _size_2 = this.registradores.size();
                  int _minus_2 = (_size_2 - 1);
                  Integer _get_2 = this.registradores.get(_minus_2);
                  String _plus_2 = ("r" + _get_2);
                  this.op(op, r, _decimal_12, _plus_2);
                }
              }
            }
          }
        } else {
          expression _exp_24 = exp.getExp();
          String _identificador_3 = _exp_24.getIdentificador();
          boolean _notEquals_15 = (!Objects.equal(_identificador_3, null));
          if (_notEquals_15) {
            expression _exp_25 = exp.getExp();
            literal_expression _literal_33 = _exp_25.getLiteral();
            String _decimal_13 = _literal_33.getDecimal();
            boolean _notEquals_16 = (!Objects.equal(_decimal_13, null));
            if (_notEquals_16) {
              String _identificador_4 = exp.getIdentificador();
              expression _exp_26 = exp.getExp();
              literal_expression _literal_34 = _exp_26.getLiteral();
              String _decimal_14 = _literal_34.getDecimal();
              this.op(op, r, _identificador_4, _decimal_14);
            } else {
              expression _exp_27 = exp.getExp();
              literal_expression _literal_35 = _exp_27.getLiteral();
              String _inteiro_10 = _literal_35.getInteiro();
              boolean _notEquals_17 = (!Objects.equal(_inteiro_10, null));
              if (_notEquals_17) {
                String _identificador_5 = exp.getIdentificador();
                expression _exp_28 = exp.getExp();
                literal_expression _literal_36 = _exp_28.getLiteral();
                String _inteiro_11 = _literal_36.getInteiro();
                this.op(op, r, _identificador_5, _inteiro_11);
              } else {
                expression _exp_29 = exp.getExp();
                literal_expression _literal_37 = _exp_29.getLiteral();
                String _l_float_10 = _literal_37.getL_float();
                boolean _notEquals_18 = (!Objects.equal(_l_float_10, null));
                if (_notEquals_18) {
                  String _identificador_6 = exp.getIdentificador();
                  expression _exp_30 = exp.getExp();
                  literal_expression _literal_38 = _exp_30.getLiteral();
                  String _l_float_11 = _literal_38.getL_float();
                  this.op(op, r, _identificador_6, _l_float_11);
                } else {
                  expression _exp_31 = exp.getExp();
                  String _identificador_7 = _exp_31.getIdentificador();
                  boolean _notEquals_19 = (!Objects.equal(_identificador_7, null));
                  if (_notEquals_19) {
                    expression _exp_32 = exp.getExp();
                    this.genUseVariableCode(_exp_32, r);
                    String _identificador_8 = exp.getIdentificador();
                    int _size_3 = this.registradores.size();
                    int _minus_3 = (_size_3 - 1);
                    Integer _get_3 = this.registradores.get(_minus_3);
                    String _plus_3 = ("r" + _get_3);
                    this.op(op, r, _identificador_8, _plus_3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void genAritmeticExpCode(final expression exp) {
    boolean _isArimeticExp = this.isArimeticExp(exp);
    if (_isArimeticExp) {
      String _operador = exp.getOperador();
      boolean _notEquals = (!Objects.equal(_operador, null));
      if (_notEquals) {
        String _operador_1 = exp.getOperador();
        boolean _equals = _operador_1.equals("+");
        if (_equals) {
          this.genCodeOP(exp, "soma");
        } else {
          expression _exp = exp.getExp();
          this.genCodeOP(_exp, "soma");
          String _identificador = exp.getIdentificador();
          this.store(_identificador, "r1");
        }
      } else {
        String _operador_2 = exp.getOperador();
        boolean _equals_1 = _operador_2.equals("-");
        if (_equals_1) {
          this.genCodeOP(exp, "subtracao");
        } else {
          String _operador_3 = exp.getOperador();
          boolean _equals_2 = _operador_3.equals("*");
          if (_equals_2) {
            this.genCodeOP(exp, "multplicacao");
          } else {
            String _operador_4 = exp.getOperador();
            boolean _equals_3 = _operador_4.equals("/");
            if (_equals_3) {
              this.genCodeOP(exp, "divisao");
            } else {
              String _operador_5 = exp.getOperador();
              boolean _equals_4 = _operador_5.equals("-");
              if (_equals_4) {
                this.genCodeOP(exp, "subtracao");
              } else {
                String _operador_6 = exp.getOperador();
                boolean _equals_5 = _operador_6.equals("++");
                if (_equals_5) {
                  literal_expression _literal = exp.getLiteral();
                  String _decimal = _literal.getDecimal();
                  boolean _notEquals_1 = (!Objects.equal(_decimal, null));
                  if (_notEquals_1) {
                    literal_expression _literal_1 = exp.getLiteral();
                    String _decimal_1 = _literal_1.getDecimal();
                    this.op("mais", "r1", _decimal_1, "1");
                  } else {
                    literal_expression _literal_2 = exp.getLiteral();
                    String _inteiro = _literal_2.getInteiro();
                    boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
                    if (_notEquals_2) {
                      literal_expression _literal_3 = exp.getLiteral();
                      String _inteiro_1 = _literal_3.getInteiro();
                      this.op("mais", "r1", _inteiro_1, "1");
                    } else {
                      literal_expression _literal_4 = exp.getLiteral();
                      String _l_float = _literal_4.getL_float();
                      boolean _notEquals_3 = (!Objects.equal(_l_float, null));
                      if (_notEquals_3) {
                        literal_expression _literal_5 = exp.getLiteral();
                        String _l_float_1 = _literal_5.getL_float();
                        this.op("mais", "r1", _l_float_1, "1");
                      }
                    }
                  }
                } else {
                  String _operador_7 = exp.getOperador();
                  boolean _equals_6 = _operador_7.equals("--");
                  if (_equals_6) {
                    literal_expression _literal_6 = exp.getLiteral();
                    String _decimal_2 = _literal_6.getDecimal();
                    boolean _notEquals_4 = (!Objects.equal(_decimal_2, null));
                    if (_notEquals_4) {
                      literal_expression _literal_7 = exp.getLiteral();
                      String _decimal_3 = _literal_7.getDecimal();
                      this.op("menos", "r1", _decimal_3, "1");
                    } else {
                      literal_expression _literal_8 = exp.getLiteral();
                      String _inteiro_2 = _literal_8.getInteiro();
                      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
                      if (_notEquals_5) {
                        literal_expression _literal_9 = exp.getLiteral();
                        String _inteiro_3 = _literal_9.getInteiro();
                        this.op("menos", "r1", _inteiro_3, "1");
                      } else {
                        literal_expression _literal_10 = exp.getLiteral();
                        String _l_float_2 = _literal_10.getL_float();
                        boolean _notEquals_6 = (!Objects.equal(_l_float_2, null));
                        if (_notEquals_6) {
                          literal_expression _literal_11 = exp.getLiteral();
                          String _l_float_3 = _literal_11.getL_float();
                          this.op("menos", "r1", _l_float_3, "1");
                        }
                      }
                    }
                  } else {
                    String _operador_8 = exp.getOperador();
                    boolean _equals_7 = _operador_8.equals("-=");
                    if (_equals_7) {
                      expression _exp_1 = exp.getExp();
                      this.genCodeOP(_exp_1, "menos");
                      String _identificador_1 = exp.getIdentificador();
                      this.store(_identificador_1, "r1");
                    } else {
                      String _operador_9 = exp.getOperador();
                      boolean _equals_8 = _operador_9.equals("*=");
                      if (_equals_8) {
                        expression _exp_2 = exp.getExp();
                        this.genCodeOP(_exp_2, "multiplicacao");
                        String _identificador_2 = exp.getIdentificador();
                        this.store(_identificador_2, "r1");
                      } else {
                        String _operador_10 = exp.getOperador();
                        boolean _equals_9 = _operador_10.equals("/=");
                        if (_equals_9) {
                          expression _exp_3 = exp.getExp();
                          this.genCodeOP(_exp_3, "divisao");
                          String _identificador_3 = exp.getIdentificador();
                          this.store(_identificador_3, "r1");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void genAritmeticExpCode(final expression exp, final String r) {
    boolean _isArimeticExp = this.isArimeticExp(exp);
    if (_isArimeticExp) {
      String _operador = exp.getOperador();
      boolean _notEquals = (!Objects.equal(_operador, null));
      if (_notEquals) {
        String _operador_1 = exp.getOperador();
        boolean _equals = _operador_1.equals("+");
        if (_equals) {
          this.genCodeOP(exp, "soma", r);
        } else {
          expression _exp = exp.getExp();
          this.genCodeOP(_exp, "soma", r);
          String _identificador = exp.getIdentificador();
          this.store(_identificador, r);
        }
      } else {
        String _operador_2 = exp.getOperador();
        boolean _equals_1 = _operador_2.equals("-");
        if (_equals_1) {
          this.genCodeOP(exp, "subtracao", r);
        } else {
          String _operador_3 = exp.getOperador();
          boolean _equals_2 = _operador_3.equals("*");
          if (_equals_2) {
            this.genCodeOP(exp, "multplicacao", r);
          } else {
            String _operador_4 = exp.getOperador();
            boolean _equals_3 = _operador_4.equals("/");
            if (_equals_3) {
              this.genCodeOP(exp, "divisao", r);
            } else {
              String _operador_5 = exp.getOperador();
              boolean _equals_4 = _operador_5.equals("-");
              if (_equals_4) {
                this.genCodeOP(exp, "subtracao", r);
              } else {
                String _operador_6 = exp.getOperador();
                boolean _equals_5 = _operador_6.equals("++");
                if (_equals_5) {
                  literal_expression _literal = exp.getLiteral();
                  String _decimal = _literal.getDecimal();
                  boolean _notEquals_1 = (!Objects.equal(_decimal, null));
                  if (_notEquals_1) {
                    literal_expression _literal_1 = exp.getLiteral();
                    String _decimal_1 = _literal_1.getDecimal();
                    this.op("mais", r, _decimal_1, "1");
                  } else {
                    literal_expression _literal_2 = exp.getLiteral();
                    String _inteiro = _literal_2.getInteiro();
                    boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
                    if (_notEquals_2) {
                      literal_expression _literal_3 = exp.getLiteral();
                      String _inteiro_1 = _literal_3.getInteiro();
                      this.op("mais", r, _inteiro_1, "1");
                    } else {
                      literal_expression _literal_4 = exp.getLiteral();
                      String _l_float = _literal_4.getL_float();
                      boolean _notEquals_3 = (!Objects.equal(_l_float, null));
                      if (_notEquals_3) {
                        literal_expression _literal_5 = exp.getLiteral();
                        String _l_float_1 = _literal_5.getL_float();
                        this.op("mais", r, _l_float_1, "1");
                      }
                    }
                  }
                } else {
                  String _operador_7 = exp.getOperador();
                  boolean _equals_6 = _operador_7.equals("--");
                  if (_equals_6) {
                    literal_expression _literal_6 = exp.getLiteral();
                    String _decimal_2 = _literal_6.getDecimal();
                    boolean _notEquals_4 = (!Objects.equal(_decimal_2, null));
                    if (_notEquals_4) {
                      literal_expression _literal_7 = exp.getLiteral();
                      String _decimal_3 = _literal_7.getDecimal();
                      this.op("menos", r, _decimal_3, "1");
                    } else {
                      literal_expression _literal_8 = exp.getLiteral();
                      String _inteiro_2 = _literal_8.getInteiro();
                      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
                      if (_notEquals_5) {
                        literal_expression _literal_9 = exp.getLiteral();
                        String _inteiro_3 = _literal_9.getInteiro();
                        this.op("menos", r, _inteiro_3, "1");
                      } else {
                        literal_expression _literal_10 = exp.getLiteral();
                        String _l_float_2 = _literal_10.getL_float();
                        boolean _notEquals_6 = (!Objects.equal(_l_float_2, null));
                        if (_notEquals_6) {
                          literal_expression _literal_11 = exp.getLiteral();
                          String _l_float_3 = _literal_11.getL_float();
                          this.op("menos", r, _l_float_3, "1");
                        }
                      }
                    }
                  } else {
                    String _operador_8 = exp.getOperador();
                    boolean _equals_7 = _operador_8.equals("-=");
                    if (_equals_7) {
                      expression _exp_1 = exp.getExp();
                      this.genCodeOP(_exp_1, "menos", r);
                      String _identificador_1 = exp.getIdentificador();
                      this.store(_identificador_1, r);
                    } else {
                      String _operador_9 = exp.getOperador();
                      boolean _equals_8 = _operador_9.equals("*=");
                      if (_equals_8) {
                        expression _exp_2 = exp.getExp();
                        this.genCodeOP(_exp_2, "multiplicacao", r);
                        String _identificador_2 = exp.getIdentificador();
                        this.store(_identificador_2, r);
                      } else {
                        String _operador_10 = exp.getOperador();
                        boolean _equals_9 = _operador_10.equals("/=");
                        if (_equals_9) {
                          expression _exp_3 = exp.getExp();
                          this.genCodeOP(_exp_3, "divisao", r);
                          String _identificador_3 = exp.getIdentificador();
                          this.store(_identificador_3, r);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public Object genBooleanExpCode(final expression exp) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      Object _xifexpression_1 = null;
      logical_expression _logical = exp.getLogical();
      String _operador = _logical.getOperador();
      boolean _equals = _operador.equals("!");
      if (_equals) {
        _xifexpression_1 = null;
      } else {
        Object _xifexpression_2 = null;
        logical_expression _logical_1 = exp.getLogical();
        String _operador_1 = _logical_1.getOperador();
        boolean _equals_1 = _operador_1.equals("true");
        if (_equals_1) {
          _xifexpression_2 = null;
        } else {
          Object _xifexpression_3 = null;
          logical_expression _logical_2 = exp.getLogical();
          String _operador_2 = _logical_2.getOperador();
          boolean _equals_2 = _operador_2.equals("false");
          if (_equals_2) {
            _xifexpression_3 = null;
          } else {
            Object _xifexpression_4 = null;
            boolean _or = false;
            String _operador_3 = exp.getOperador();
            boolean _equals_3 = _operador_3.equals("&");
            if (_equals_3) {
              _or = true;
            } else {
              String _operador_4 = exp.getOperador();
              boolean _equals_4 = _operador_4.equals("&&");
              _or = _equals_4;
            }
            if (_or) {
              String r1 = this.getRegister();
              String r2 = this.getRegister();
              this.genExpCode(exp, r1);
              expression _exp = exp.getExp();
              this.genExpCode(_exp, r2);
              this.salvarArquivo((("AND " + r1) + r2));
            } else {
              Object _xifexpression_5 = null;
              String _operador_5 = exp.getOperador();
              boolean _equals_5 = _operador_5.equals("&=");
              if (_equals_5) {
                _xifexpression_5 = null;
              } else {
                Object _xifexpression_6 = null;
                boolean _or_1 = false;
                String _operador_6 = exp.getOperador();
                boolean _equals_6 = _operador_6.equals("|");
                if (_equals_6) {
                  _or_1 = true;
                } else {
                  String _operador_7 = exp.getOperador();
                  boolean _equals_7 = _operador_7.equals("||");
                  _or_1 = _equals_7;
                }
                if (_or_1) {
                  _xifexpression_6 = null;
                } else {
                  Object _xifexpression_7 = null;
                  boolean _or_2 = false;
                  String _operador_8 = exp.getOperador();
                  boolean _equals_8 = _operador_8.equals("|=");
                  if (_equals_8) {
                    _or_2 = true;
                  } else {
                    String _operador_9 = exp.getOperador();
                    boolean _equals_9 = _operador_9.equals("||=");
                    _or_2 = _equals_9;
                  }
                  if (_or_2) {
                    _xifexpression_7 = null;
                  } else {
                    Object _xifexpression_8 = null;
                    String _operador_10 = exp.getOperador();
                    boolean _equals_10 = _operador_10.equals("^");
                    if (_equals_10) {
                      _xifexpression_8 = null;
                    } else {
                      Object _xifexpression_9 = null;
                      String _operador_11 = exp.getOperador();
                      boolean _equals_11 = _operador_11.equals("^=");
                      if (_equals_11) {
                        _xifexpression_9 = null;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Object genBooleanExpCode(final expression exp, final String r) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      Object _xifexpression_1 = null;
      logical_expression _logical = exp.getLogical();
      String _operador = _logical.getOperador();
      boolean _equals = _operador.equals("!");
      if (_equals) {
        _xifexpression_1 = null;
      } else {
        Object _xifexpression_2 = null;
        logical_expression _logical_1 = exp.getLogical();
        String _operador_1 = _logical_1.getOperador();
        boolean _equals_1 = _operador_1.equals("true");
        if (_equals_1) {
          _xifexpression_2 = null;
        } else {
          Object _xifexpression_3 = null;
          logical_expression _logical_2 = exp.getLogical();
          String _operador_2 = _logical_2.getOperador();
          boolean _equals_2 = _operador_2.equals("false");
          if (_equals_2) {
            _xifexpression_3 = null;
          } else {
            Object _xifexpression_4 = null;
            boolean _or = false;
            String _operador_3 = exp.getOperador();
            boolean _equals_3 = _operador_3.equals("&");
            if (_equals_3) {
              _or = true;
            } else {
              String _operador_4 = exp.getOperador();
              boolean _equals_4 = _operador_4.equals("&&");
              _or = _equals_4;
            }
            if (_or) {
              String r1 = this.getRegister();
              String r2 = this.getRegister();
              this.genExpCode(exp, r1);
              expression _exp = exp.getExp();
              this.genExpCode(_exp, r2);
              this.salvarArquivo((("AND " + r1) + r2));
            } else {
              Object _xifexpression_5 = null;
              String _operador_5 = exp.getOperador();
              boolean _equals_5 = _operador_5.equals("&=");
              if (_equals_5) {
                _xifexpression_5 = null;
              } else {
                Object _xifexpression_6 = null;
                boolean _or_1 = false;
                String _operador_6 = exp.getOperador();
                boolean _equals_6 = _operador_6.equals("|");
                if (_equals_6) {
                  _or_1 = true;
                } else {
                  String _operador_7 = exp.getOperador();
                  boolean _equals_7 = _operador_7.equals("||");
                  _or_1 = _equals_7;
                }
                if (_or_1) {
                  _xifexpression_6 = null;
                } else {
                  Object _xifexpression_7 = null;
                  boolean _or_2 = false;
                  String _operador_8 = exp.getOperador();
                  boolean _equals_8 = _operador_8.equals("|=");
                  if (_equals_8) {
                    _or_2 = true;
                  } else {
                    String _operador_9 = exp.getOperador();
                    boolean _equals_9 = _operador_9.equals("||=");
                    _or_2 = _equals_9;
                  }
                  if (_or_2) {
                    _xifexpression_7 = null;
                  } else {
                    Object _xifexpression_8 = null;
                    String _operador_10 = exp.getOperador();
                    boolean _equals_10 = _operador_10.equals("^");
                    if (_equals_10) {
                      _xifexpression_8 = null;
                    } else {
                      Object _xifexpression_9 = null;
                      String _operador_11 = exp.getOperador();
                      boolean _equals_11 = _operador_11.equals("^=");
                      if (_equals_11) {
                        _xifexpression_9 = null;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Object genExpCode(final expression exp, final String r) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      _xifexpression = this.genBooleanExpCode(exp, r);
    } else {
      boolean _isArimeticExp = this.isArimeticExp(exp);
      if (_isArimeticExp) {
        this.genAritmeticExpCode(exp, r);
      } else {
        boolean _isAtribuicao = this.isAtribuicao(exp);
        if (_isAtribuicao) {
          String _identificador = exp.getIdentificador();
          expression _exp = exp.getExp();
          this.genAttCode(_identificador, _exp, r);
        }
      }
    }
    return _xifexpression;
  }
  
  public Object genExpCode(final expression exp) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      _xifexpression = this.genBooleanExpCode(exp);
    } else {
      boolean _isArimeticExp = this.isArimeticExp(exp);
      if (_isArimeticExp) {
        this.genAritmeticExpCode(exp);
      } else {
        boolean _isAtribuicao = this.isAtribuicao(exp);
        if (_isAtribuicao) {
          String _identificador = exp.getIdentificador();
          expression _exp = exp.getExp();
          this.genAttCode(_identificador, _exp);
        }
      }
    }
    return _xifexpression;
  }
  
  public void genWhileCode(final while_statement loop) {
    int _size = this.labels.size();
    int _minus = (_size - 1);
    Integer _get = this.labels.get(_minus);
    int nextLabel = ((_get).intValue() + 1);
    String label = ("label" + Integer.valueOf(nextLabel));
    expression _expressaoWhile = loop.getExpressaoWhile();
    this.genExpCode(_expressaoWhile);
    this.label(label);
    int proxLabel = (nextLabel + 1);
    String label2 = ("label" + Integer.valueOf(proxLabel));
    this.DesvioCond("BETZ", "r2", label2);
    statement _blocoWhile = loop.getBlocoWhile();
    this.genStatementCode(_blocoWhile);
    this.DesvioIncod(label);
    this.label(label);
  }
  
  public void genSPIncCode(final String tamanho) {
    this.salvarArquivo(("ADD SP, SP, " + tamanho));
  }
  
  public void genSPDecCode(final String tamanho) {
    this.salvarArquivo(("SUB SP, SP, " + tamanho));
  }
  
  public void genUseMethodCode(final String metodo, final String tamanho) {
    this.genSPIncCode(tamanho);
    int _size = this.labels.size();
    int _minus = (_size - 1);
    Integer _get = this.labels.get(_minus);
    int nextLabel = ((_get).intValue() + 1);
    String label = ("label" + Integer.valueOf(nextLabel));
    this.store("*SP", label);
    this.DesvioIncod(metodo);
    this.label(label);
    this.genSPDecCode(tamanho);
  }
  
  public Object genStatementCode(final statement st) {
    Object _xifexpression = null;
    expression _expressao = st.getExpressao();
    boolean _notEquals = (!Objects.equal(_expressao, null));
    if (_notEquals) {
      expression _expressao_1 = st.getExpressao();
      _xifexpression = this.genExpCode(_expressao_1);
    } else {
      variable_declaration _declaracaoVariavel = st.getDeclaracaoVariavel();
      boolean _notEquals_1 = (!Objects.equal(_declaracaoVariavel, null));
      if (_notEquals_1) {
        variable_declaration _declaracaoVariavel_1 = st.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis = _declaracaoVariavel_1.getDeclaracaoVariaveis();
        for (final variable_declarator vd : _declaracaoVariaveis) {
          this.genDeclarationVariableCode(vd);
        }
      }
    }
    return _xifexpression;
  }
  
  public void label(final String name) {
    this.salvarArquivo((name + ":"));
  }
  
  public void genStart() {
    this.load("SP", "#600");
  }
  
  public void genAttCode(final String name, final expression exp) {
    boolean _isAtribuicao = this.isAtribuicao(exp);
    if (_isAtribuicao) {
      this.genExpCode(exp);
      this.store(name, "r1");
    }
  }
  
  public void genAttCode(final String name, final expression exp, final String r) {
    boolean _isAtribuicao = this.isAtribuicao(exp);
    if (_isAtribuicao) {
      this.genExpCode(exp, r);
      this.store(name, "r1");
    }
  }
  
  public Boolean genUseVariableCode(final expression exp) {
    boolean _xifexpression = false;
    boolean _isVariable = this.isVariable(exp);
    if (_isVariable) {
      boolean _xifexpression_1 = false;
      boolean _isEmpty = this.registradores.isEmpty();
      if (_isEmpty) {
        boolean _xblockexpression = false;
        {
          String _identificador = exp.getIdentificador();
          this.load("r10", _identificador);
          _xblockexpression = this.registradores.add(Integer.valueOf(10));
        }
        _xifexpression_1 = _xblockexpression;
      } else {
        String _register = this.getRegister();
        String _identificador = exp.getIdentificador();
        this.load(_register, _identificador);
      }
      _xifexpression = _xifexpression_1;
    }
    return Boolean.valueOf(_xifexpression);
  }
  
  public void genUseVariableCode(final expression exp, final String r) {
    boolean _isVariable = this.isVariable(exp);
    if (_isVariable) {
      String _identificador = exp.getIdentificador();
      this.load(r, _identificador);
    }
  }
  
  public void genDeclarationVariableCode(final variable_declarator vd) {
    variable_initializer _valorVariavel = vd.getValorVariavel();
    expression _expressaoVariavel = _valorVariavel.getExpressaoVariavel();
    this.genExpCode(_expressaoVariavel);
    String _nomeVariavel = vd.getNomeVariavel();
    this.store(_nomeVariavel, "r1");
  }
  
  public String getRegister() {
    int _size = this.registradores.size();
    int _minus = (_size - 1);
    Integer ultimo = this.registradores.get(_minus);
    int registrador = ((ultimo).intValue() + 1);
    return ("r" + Integer.valueOf(registrador));
  }
}
