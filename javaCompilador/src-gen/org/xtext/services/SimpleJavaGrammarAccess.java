/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cCompAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCompCompilation_unitParserRuleCall_0 = (RuleCall)cCompAssignment.eContents().get(0);
		
		//Model:
		//	comp=compilation_unit;
		@Override public ParserRule getRule() { return rule; }

		//comp=compilation_unit
		public Assignment getCompAssignment() { return cCompAssignment; }

		//compilation_unit
		public RuleCall getCompCompilation_unitParserRuleCall_0() { return cCompCompilation_unitParserRuleCall_0; }
	}

	public class Compilation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPacoteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPacotePackage_statementParserRuleCall_0_0 = (RuleCall)cPacoteAssignment_0.eContents().get(0);
		private final Assignment cImportesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportesImport_statementParserRuleCall_1_0 = (RuleCall)cImportesAssignment_1.eContents().get(0);
		private final Assignment cDeclaracaoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaracaoType_declarationParserRuleCall_2_0 = (RuleCall)cDeclaracaoAssignment_2.eContents().get(0);
		
		//compilation_unit:
		//	pacote=package_statement? importes+=import_statement* declaracao+=type_declaration*;
		@Override public ParserRule getRule() { return rule; }

		//pacote=package_statement? importes+=import_statement* declaracao+=type_declaration*
		public Group getGroup() { return cGroup; }

		//pacote=package_statement?
		public Assignment getPacoteAssignment_0() { return cPacoteAssignment_0; }

		//package_statement
		public RuleCall getPacotePackage_statementParserRuleCall_0_0() { return cPacotePackage_statementParserRuleCall_0_0; }

		//importes+=import_statement*
		public Assignment getImportesAssignment_1() { return cImportesAssignment_1; }

		//import_statement
		public RuleCall getImportesImport_statementParserRuleCall_1_0() { return cImportesImport_statementParserRuleCall_1_0; }

		//declaracao+=type_declaration*
		public Assignment getDeclaracaoAssignment_2() { return cDeclaracaoAssignment_2; }

		//type_declaration
		public RuleCall getDeclaracaoType_declarationParserRuleCall_2_0() { return cDeclaracaoType_declarationParserRuleCall_2_0; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoomePacoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoomePacoteNameParserRuleCall_1_0 = (RuleCall)cNoomePacoteAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//package_statement:
		//	"package" noomePacote=name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" noomePacote=name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//noomePacote=name
		public Assignment getNoomePacoteAssignment_1() { return cNoomePacoteAssignment_1; }

		//name
		public RuleCall getNoomePacoteNameParserRuleCall_1_0() { return cNoomePacoteNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomeImporteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomeImporteNameParserRuleCall_1_0 = (RuleCall)cNomeImporteAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFullStopAsteriskSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//import_statement:
		//	"import" nomeImporte=name (".*;" | ";");
		@Override public ParserRule getRule() { return rule; }

		//"import" nomeImporte=name (".*;" | ";")
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//nomeImporte=name
		public Assignment getNomeImporteAssignment_1() { return cNomeImporteAssignment_1; }

		//name
		public RuleCall getNomeImporteNameParserRuleCall_1_0() { return cNomeImporteNameParserRuleCall_1_0; }

		//".*;" | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//".*;"
		public Keyword getFullStopAsteriskSemicolonKeyword_2_0() { return cFullStopAsteriskSemicolonKeyword_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDoc_commentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclaracaoClasseAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclaracaoClasseClass_declarationParserRuleCall_1_0_0 = (RuleCall)cDeclaracaoClasseAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaracaoInterfaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclaracaoInterfaceInterface_declarationParserRuleCall_1_1_0 = (RuleCall)cDeclaracaoInterfaceAssignment_1_1.eContents().get(0);
		
		//type_declaration:
		//	doc_comment? (declaracaoClasse=class_declaration | declaracaoInterface=interface_declaration);
		@Override public ParserRule getRule() { return rule; }

		//doc_comment? (declaracaoClasse=class_declaration | declaracaoInterface=interface_declaration)
		public Group getGroup() { return cGroup; }

		//doc_comment?
		public RuleCall getDoc_commentParserRuleCall_0() { return cDoc_commentParserRuleCall_0; }

		//declaracaoClasse=class_declaration | declaracaoInterface=interface_declaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//declaracaoClasse=class_declaration
		public Assignment getDeclaracaoClasseAssignment_1_0() { return cDeclaracaoClasseAssignment_1_0; }

		//class_declaration
		public RuleCall getDeclaracaoClasseClass_declarationParserRuleCall_1_0_0() { return cDeclaracaoClasseClass_declarationParserRuleCall_1_0_0; }

		//declaracaoInterface=interface_declaration
		public Assignment getDeclaracaoInterfaceAssignment_1_1() { return cDeclaracaoInterfaceAssignment_1_1; }

		//interface_declaration
		public RuleCall getDeclaracaoInterfaceInterface_declarationParserRuleCall_1_1_0() { return cDeclaracaoInterfaceInterface_declarationParserRuleCall_1_1_0; }
	}

	public class Doc_commentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "doc_comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusAsteriskAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComentarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComentarioSTRINGTerminalRuleCall_1_0 = (RuleCall)cComentarioAssignment_1.eContents().get(0);
		private final Keyword cAsteriskSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//doc_comment:
		//	"/ **" comentario=STRING "* /";
		@Override public ParserRule getRule() { return rule; }

		//"/ **" comentario=STRING "* /"
		public Group getGroup() { return cGroup; }

		//"/ **"
		public Keyword getSolidusAsteriskAsteriskKeyword_0() { return cSolidusAsteriskAsteriskKeyword_0; }

		//comentario=STRING
		public Assignment getComentarioAssignment_1() { return cComentarioAssignment_1; }

		//STRING
		public RuleCall getComentarioSTRINGTerminalRuleCall_1_0() { return cComentarioSTRINGTerminalRuleCall_1_0; }

		//"* /"
		public Keyword getAsteriskSolidusKeyword_2() { return cAsteriskSolidusKeyword_2; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModificadoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModificadoresMODIFIERParserRuleCall_0_0 = (RuleCall)cModificadoresAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomeClasseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomeClasseIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNomeClasseAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperclasseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperclasseNameParserRuleCall_3_1_0 = (RuleCall)cSuperclasseAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementosClasseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementosClasseNameParserRuleCall_4_1_0 = (RuleCall)cImplementosClasseAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementosClasseAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementosClasseNameParserRuleCall_4_2_1_0 = (RuleCall)cImplementosClasseAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cCorpoClasseAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cCorpoClasseField_declarationParserRuleCall_6_0_0 = (RuleCall)cCorpoClasseAssignment_6_0.eContents().get(0);
		private final Assignment cDeclaracaoClasseAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cDeclaracaoClasseClass_declarationParserRuleCall_6_1_0 = (RuleCall)cDeclaracaoClasseAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//class_declaration:
		//	modificadores+=MODIFIER* "class" nomeClasse=IDENTIFIER ("extends" superclasse=name)? ("implements"
		//	implementosClasse+=name ("," implementosClasse+=name)*)? "{" (corpoClasse=field_declaration |
		//	declaracaoClasse=class_declaration)* "}";
		@Override public ParserRule getRule() { return rule; }

		//modificadores+=MODIFIER* "class" nomeClasse=IDENTIFIER ("extends" superclasse=name)? ("implements"
		//implementosClasse+=name ("," implementosClasse+=name)*)? "{" (corpoClasse=field_declaration |
		//declaracaoClasse=class_declaration)* "}"
		public Group getGroup() { return cGroup; }

		//modificadores+=MODIFIER*
		public Assignment getModificadoresAssignment_0() { return cModificadoresAssignment_0; }

		//MODIFIER
		public RuleCall getModificadoresMODIFIERParserRuleCall_0_0() { return cModificadoresMODIFIERParserRuleCall_0_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//nomeClasse=IDENTIFIER
		public Assignment getNomeClasseAssignment_2() { return cNomeClasseAssignment_2; }

		//IDENTIFIER
		public RuleCall getNomeClasseIDENTIFIERTerminalRuleCall_2_0() { return cNomeClasseIDENTIFIERTerminalRuleCall_2_0; }

		//("extends" superclasse=name)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superclasse=name
		public Assignment getSuperclasseAssignment_3_1() { return cSuperclasseAssignment_3_1; }

		//name
		public RuleCall getSuperclasseNameParserRuleCall_3_1_0() { return cSuperclasseNameParserRuleCall_3_1_0; }

		//("implements" implementosClasse+=name ("," implementosClasse+=name)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//implementosClasse+=name
		public Assignment getImplementosClasseAssignment_4_1() { return cImplementosClasseAssignment_4_1; }

		//name
		public RuleCall getImplementosClasseNameParserRuleCall_4_1_0() { return cImplementosClasseNameParserRuleCall_4_1_0; }

		//("," implementosClasse+=name)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implementosClasse+=name
		public Assignment getImplementosClasseAssignment_4_2_1() { return cImplementosClasseAssignment_4_2_1; }

		//name
		public RuleCall getImplementosClasseNameParserRuleCall_4_2_1_0() { return cImplementosClasseNameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(corpoClasse=field_declaration | declaracaoClasse=class_declaration)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//corpoClasse=field_declaration
		public Assignment getCorpoClasseAssignment_6_0() { return cCorpoClasseAssignment_6_0; }

		//field_declaration
		public RuleCall getCorpoClasseField_declarationParserRuleCall_6_0_0() { return cCorpoClasseField_declarationParserRuleCall_6_0_0; }

		//declaracaoClasse=class_declaration
		public Assignment getDeclaracaoClasseAssignment_6_1() { return cDeclaracaoClasseAssignment_6_1; }

		//class_declaration
		public RuleCall getDeclaracaoClasseClass_declarationParserRuleCall_6_1_0() { return cDeclaracaoClasseClass_declarationParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModificadoresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModificadoresMODIFIERParserRuleCall_0_0 = (RuleCall)cModificadoresAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNomeInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomeInterfaceIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNomeInterfaceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperinterfacesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperinterfacesNameParserRuleCall_3_1_0 = (RuleCall)cSuperinterfacesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperinterfacesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperinterfacesNameParserRuleCall_3_2_1_0 = (RuleCall)cSuperinterfacesAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCorpoInterfaceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCorpoInterfaceField_declarationParserRuleCall_5_0 = (RuleCall)cCorpoInterfaceAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//interface_declaration:
		//	modificadores+=MODIFIER* "interface" nomeInterface=IDENTIFIER ("extends" superinterfaces+=name (","
		//	superinterfaces+=name)*)? "{" corpoInterface=field_declaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//modificadores+=MODIFIER* "interface" nomeInterface=IDENTIFIER ("extends" superinterfaces+=name (","
		//superinterfaces+=name)*)? "{" corpoInterface=field_declaration* "}"
		public Group getGroup() { return cGroup; }

		//modificadores+=MODIFIER*
		public Assignment getModificadoresAssignment_0() { return cModificadoresAssignment_0; }

		//MODIFIER
		public RuleCall getModificadoresMODIFIERParserRuleCall_0_0() { return cModificadoresMODIFIERParserRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//nomeInterface=IDENTIFIER
		public Assignment getNomeInterfaceAssignment_2() { return cNomeInterfaceAssignment_2; }

		//IDENTIFIER
		public RuleCall getNomeInterfaceIDENTIFIERTerminalRuleCall_2_0() { return cNomeInterfaceIDENTIFIERTerminalRuleCall_2_0; }

		//("extends" superinterfaces+=name ("," superinterfaces+=name)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superinterfaces+=name
		public Assignment getSuperinterfacesAssignment_3_1() { return cSuperinterfacesAssignment_3_1; }

		//name
		public RuleCall getSuperinterfacesNameParserRuleCall_3_1_0() { return cSuperinterfacesNameParserRuleCall_3_1_0; }

		//("," superinterfaces+=name)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//superinterfaces+=name
		public Assignment getSuperinterfacesAssignment_3_2_1() { return cSuperinterfacesAssignment_3_2_1; }

		//name
		public RuleCall getSuperinterfacesNameParserRuleCall_3_2_1_0() { return cSuperinterfacesNameParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//corpoInterface=field_declaration*
		public Assignment getCorpoInterfaceAssignment_5() { return cCorpoInterfaceAssignment_5; }

		//field_declaration
		public RuleCall getCorpoInterfaceField_declarationParserRuleCall_5_0() { return cCorpoInterfaceField_declarationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cComentarioAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cComentarioDoc_commentParserRuleCall_0_0_0 = (RuleCall)cComentarioAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cDeclaracaoMetodoAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cDeclaracaoMetodoMethod_declarationParserRuleCall_0_1_0_0 = (RuleCall)cDeclaracaoMetodoAssignment_0_1_0.eContents().get(0);
		private final Assignment cDeclaracaoConstrutorAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cDeclaracaoConstrutorConstructor_declarationParserRuleCall_0_1_1_0 = (RuleCall)cDeclaracaoConstrutorAssignment_0_1_1.eContents().get(0);
		private final Assignment cDeclaracaoVariavelAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cDeclaracaoVariavelVariable_declarationParserRuleCall_0_1_2_0 = (RuleCall)cDeclaracaoVariavelAssignment_0_1_2.eContents().get(0);
		private final Assignment cEstaticoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEstaticoStatic_initializerParserRuleCall_1_0 = (RuleCall)cEstaticoAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//field_declaration:
		//	comentario=doc_comment* (declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration |
		//	declaracaoVariavel=variable_declaration) | estatico=static_initializer | ";";
		@Override public ParserRule getRule() { return rule; }

		//comentario=doc_comment* (declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration |
		//declaracaoVariavel=variable_declaration) | estatico=static_initializer | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//comentario=doc_comment* (declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration |
		//declaracaoVariavel=variable_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//comentario=doc_comment*
		public Assignment getComentarioAssignment_0_0() { return cComentarioAssignment_0_0; }

		//doc_comment
		public RuleCall getComentarioDoc_commentParserRuleCall_0_0_0() { return cComentarioDoc_commentParserRuleCall_0_0_0; }

		//declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration |
		//declaracaoVariavel=variable_declaration
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//declaracaoMetodo=method_declaration
		public Assignment getDeclaracaoMetodoAssignment_0_1_0() { return cDeclaracaoMetodoAssignment_0_1_0; }

		//method_declaration
		public RuleCall getDeclaracaoMetodoMethod_declarationParserRuleCall_0_1_0_0() { return cDeclaracaoMetodoMethod_declarationParserRuleCall_0_1_0_0; }

		//declaracaoConstrutor=constructor_declaration
		public Assignment getDeclaracaoConstrutorAssignment_0_1_1() { return cDeclaracaoConstrutorAssignment_0_1_1; }

		//constructor_declaration
		public RuleCall getDeclaracaoConstrutorConstructor_declarationParserRuleCall_0_1_1_0() { return cDeclaracaoConstrutorConstructor_declarationParserRuleCall_0_1_1_0; }

		//declaracaoVariavel=variable_declaration
		public Assignment getDeclaracaoVariavelAssignment_0_1_2() { return cDeclaracaoVariavelAssignment_0_1_2; }

		//variable_declaration
		public RuleCall getDeclaracaoVariavelVariable_declarationParserRuleCall_0_1_2_0() { return cDeclaracaoVariavelVariable_declarationParserRuleCall_0_1_2_0; }

		//estatico=static_initializer
		public Assignment getEstaticoAssignment_1() { return cEstaticoAssignment_1; }

		//static_initializer
		public RuleCall getEstaticoStatic_initializerParserRuleCall_1_0() { return cEstaticoStatic_initializerParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModificadorMetodoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModificadorMetodoMODIFIERParserRuleCall_0_0 = (RuleCall)cModificadorMetodoAssignment_0.eContents().get(0);
		private final Assignment cTipoRetornoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTipoRetornoTypeParserRuleCall_1_0 = (RuleCall)cTipoRetornoAssignment_1.eContents().get(0);
		private final Assignment cNomeMetodoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomeMetodoIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNomeMetodoAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametrosMetodoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametrosMetodoParameter_listParserRuleCall_4_0 = (RuleCall)cParametrosMetodoAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cBlocoMetodoAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cBlocoMetodoStatement_blockParserRuleCall_7_0_0 = (RuleCall)cBlocoMetodoAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//method_declaration:
		//	modificadorMetodo=MODIFIER* tipoRetorno=type nomeMetodo=IDENTIFIER "(" parametrosMetodo=parameter_list? ")" ("[" "]")*
		//	(blocoMetodo=statement_block | ";");
		@Override public ParserRule getRule() { return rule; }

		//modificadorMetodo=MODIFIER* tipoRetorno=type nomeMetodo=IDENTIFIER "(" parametrosMetodo=parameter_list? ")" ("[" "]")*
		//(blocoMetodo=statement_block | ";")
		public Group getGroup() { return cGroup; }

		//modificadorMetodo=MODIFIER*
		public Assignment getModificadorMetodoAssignment_0() { return cModificadorMetodoAssignment_0; }

		//MODIFIER
		public RuleCall getModificadorMetodoMODIFIERParserRuleCall_0_0() { return cModificadorMetodoMODIFIERParserRuleCall_0_0; }

		//tipoRetorno=type
		public Assignment getTipoRetornoAssignment_1() { return cTipoRetornoAssignment_1; }

		//type
		public RuleCall getTipoRetornoTypeParserRuleCall_1_0() { return cTipoRetornoTypeParserRuleCall_1_0; }

		//nomeMetodo=IDENTIFIER
		public Assignment getNomeMetodoAssignment_2() { return cNomeMetodoAssignment_2; }

		//IDENTIFIER
		public RuleCall getNomeMetodoIDENTIFIERTerminalRuleCall_2_0() { return cNomeMetodoIDENTIFIERTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parametrosMetodo=parameter_list?
		public Assignment getParametrosMetodoAssignment_4() { return cParametrosMetodoAssignment_4; }

		//parameter_list
		public RuleCall getParametrosMetodoParameter_listParserRuleCall_4_0() { return cParametrosMetodoParameter_listParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("[" "]")*
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }

		//blocoMetodo=statement_block | ";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//blocoMetodo=statement_block
		public Assignment getBlocoMetodoAssignment_7_0() { return cBlocoMetodoAssignment_7_0; }

		//statement_block
		public RuleCall getBlocoMetodoStatement_blockParserRuleCall_7_0_0() { return cBlocoMetodoStatement_blockParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoParametroAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoParametroTypeParserRuleCall_0_0 = (RuleCall)cTipoParametroAssignment_0.eContents().get(0);
		private final Assignment cNomeParametroAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomeParametroIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNomeParametroAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//parameter:
		//	tipoParametro=type nomeParametro=IDENTIFIER ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//tipoParametro=type nomeParametro=IDENTIFIER ("[" "]")*
		public Group getGroup() { return cGroup; }

		//tipoParametro=type
		public Assignment getTipoParametroAssignment_0() { return cTipoParametroAssignment_0; }

		//type
		public RuleCall getTipoParametroTypeParserRuleCall_0_0() { return cTipoParametroTypeParserRuleCall_0_0; }

		//nomeParametro=IDENTIFIER
		public Assignment getNomeParametroAssignment_1() { return cNomeParametroAssignment_1; }

		//IDENTIFIER
		public RuleCall getNomeParametroIDENTIFIERTerminalRuleCall_1_0() { return cNomeParametroIDENTIFIERTerminalRuleCall_1_0; }

		//("[" "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametrosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametrosParameterParserRuleCall_0_0 = (RuleCall)cParametrosAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametrosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametrosParameterParserRuleCall_1_1_0 = (RuleCall)cParametrosAssignment_1_1.eContents().get(0);
		
		//parameter_list:
		//	parametros+=parameter ("," parametros+=parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parametros+=parameter ("," parametros+=parameter)*
		public Group getGroup() { return cGroup; }

		//parametros+=parameter
		public Assignment getParametrosAssignment_0() { return cParametrosAssignment_0; }

		//parameter
		public RuleCall getParametrosParameterParserRuleCall_0_0() { return cParametrosParameterParserRuleCall_0_0; }

		//("," parametros+=parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parametros+=parameter
		public Assignment getParametrosAssignment_1_1() { return cParametrosAssignment_1_1; }

		//parameter
		public RuleCall getParametrosParameterParserRuleCall_1_1_0() { return cParametrosParameterParserRuleCall_1_1_0; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCorpoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCorpoStatementParserRuleCall_1_0 = (RuleCall)cCorpoAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//statement_block:
		//	"{" corpo=statement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" corpo=statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//corpo=statement*
		public Assignment getCorpoAssignment_1() { return cCorpoAssignment_1; }

		//statement
		public RuleCall getCorpoStatementParserRuleCall_1_0() { return cCorpoStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclaracaoVariavelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaracaoVariavelVariable_declarationParserRuleCall_0_0 = (RuleCall)cDeclaracaoVariavelAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressaoAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressaoAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBlocoAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBlocoStatement_blockParserRuleCall_2_0 = (RuleCall)cBlocoAssignment_2.eContents().get(0);
		private final Assignment cCorpoIfAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCorpoIfIf_statementParserRuleCall_3_0 = (RuleCall)cCorpoIfAssignment_3.eContents().get(0);
		private final Assignment cCorpoDoWhileAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCorpoDoWhileDo_statementParserRuleCall_4_0 = (RuleCall)cCorpoDoWhileAssignment_4.eContents().get(0);
		private final Assignment cCorpoWhileAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCorpoWhileWhile_statementParserRuleCall_5_0 = (RuleCall)cCorpoWhileAssignment_5.eContents().get(0);
		private final Assignment cCorpoForAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cCorpoForFor_statementParserRuleCall_6_0 = (RuleCall)cCorpoForAssignment_6.eContents().get(0);
		private final Assignment cCorpoTryCatchAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cCorpoTryCatchTry_statementParserRuleCall_7_0 = (RuleCall)cCorpoTryCatchAssignment_7.eContents().get(0);
		private final Assignment cCorpoSwitchCaseAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cCorpoSwitchCaseSwitch_statementParserRuleCall_8_0 = (RuleCall)cCorpoSwitchCaseAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cSynchronizedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressaoSynchronizedAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressaoSynchronizedExpressionParserRuleCall_9_2_0 = (RuleCall)cExpressaoSynchronizedAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cCorpoSynchronizeAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cCorpoSynchronizeStatementParserRuleCall_9_4_0 = (RuleCall)cCorpoSynchronizeAssignment_9_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cReturnKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cReturnAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cReturnExpressionParserRuleCall_10_1_0 = (RuleCall)cReturnAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cThrowKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cExececaoAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cExececaoExpressionParserRuleCall_11_1_0 = (RuleCall)cExececaoAssignment_11_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cIDENTIFIERTerminalRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_12_2 = (RuleCall)cGroup_12.eContents().get(2);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cBreakKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cBreakAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cBreakIDENTIFIERTerminalRuleCall_13_1_0 = (RuleCall)cBreakAssignment_13_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cContinueKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cContinueAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cContinueIDENTIFIERTerminalRuleCall_14_1_0 = (RuleCall)cContinueAssignment_14_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//statement:
		//	-> declaracaoVariavel=variable_declaration | -> expressao=expression ";" | bloco=statement_block |
		//	corpoIf=if_statement | corpoDoWhile=do_statement | corpoWhile=while_statement | corpoFor=for_statement |
		//	corpoTryCatch=try_statement | corpoSwitchCase=switch_statement | "synchronized" "(" expressaoSynchronized=expression
		//	")" corpoSynchronize=statement | "return" return=expression? ";" | "throw" exececao=expression ";" | IDENTIFIER ":" //TODO naum sei o q eh
		//	statement | "break" break=IDENTIFIER? ";" | "continue" continue=IDENTIFIER? ";" | ";";
		@Override public ParserRule getRule() { return rule; }

		//-> declaracaoVariavel=variable_declaration | -> expressao=expression ";" | bloco=statement_block | corpoIf=if_statement
		//| corpoDoWhile=do_statement | corpoWhile=while_statement | corpoFor=for_statement | corpoTryCatch=try_statement |
		//corpoSwitchCase=switch_statement | "synchronized" "(" expressaoSynchronized=expression ")" corpoSynchronize=statement |
		//"return" return=expression? ";" | "throw" exececao=expression ";" | IDENTIFIER ":" //TODO naum sei o q eh
		//statement | "break" break=IDENTIFIER? ";" | "continue" continue=IDENTIFIER? ";" | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> declaracaoVariavel=variable_declaration
		public Assignment getDeclaracaoVariavelAssignment_0() { return cDeclaracaoVariavelAssignment_0; }

		//variable_declaration
		public RuleCall getDeclaracaoVariavelVariable_declarationParserRuleCall_0_0() { return cDeclaracaoVariavelVariable_declarationParserRuleCall_0_0; }

		//-> expressao=expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//-> expressao=expression
		public Assignment getExpressaoAssignment_1_0() { return cExpressaoAssignment_1_0; }

		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_0_0() { return cExpressaoExpressionParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//bloco=statement_block
		public Assignment getBlocoAssignment_2() { return cBlocoAssignment_2; }

		//statement_block
		public RuleCall getBlocoStatement_blockParserRuleCall_2_0() { return cBlocoStatement_blockParserRuleCall_2_0; }

		//corpoIf=if_statement
		public Assignment getCorpoIfAssignment_3() { return cCorpoIfAssignment_3; }

		//if_statement
		public RuleCall getCorpoIfIf_statementParserRuleCall_3_0() { return cCorpoIfIf_statementParserRuleCall_3_0; }

		//corpoDoWhile=do_statement
		public Assignment getCorpoDoWhileAssignment_4() { return cCorpoDoWhileAssignment_4; }

		//do_statement
		public RuleCall getCorpoDoWhileDo_statementParserRuleCall_4_0() { return cCorpoDoWhileDo_statementParserRuleCall_4_0; }

		//corpoWhile=while_statement
		public Assignment getCorpoWhileAssignment_5() { return cCorpoWhileAssignment_5; }

		//while_statement
		public RuleCall getCorpoWhileWhile_statementParserRuleCall_5_0() { return cCorpoWhileWhile_statementParserRuleCall_5_0; }

		//corpoFor=for_statement
		public Assignment getCorpoForAssignment_6() { return cCorpoForAssignment_6; }

		//for_statement
		public RuleCall getCorpoForFor_statementParserRuleCall_6_0() { return cCorpoForFor_statementParserRuleCall_6_0; }

		//corpoTryCatch=try_statement
		public Assignment getCorpoTryCatchAssignment_7() { return cCorpoTryCatchAssignment_7; }

		//try_statement
		public RuleCall getCorpoTryCatchTry_statementParserRuleCall_7_0() { return cCorpoTryCatchTry_statementParserRuleCall_7_0; }

		//corpoSwitchCase=switch_statement
		public Assignment getCorpoSwitchCaseAssignment_8() { return cCorpoSwitchCaseAssignment_8; }

		//switch_statement
		public RuleCall getCorpoSwitchCaseSwitch_statementParserRuleCall_8_0() { return cCorpoSwitchCaseSwitch_statementParserRuleCall_8_0; }

		//"synchronized" "(" expressaoSynchronized=expression ")" corpoSynchronize=statement
		public Group getGroup_9() { return cGroup_9; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_9_0() { return cSynchronizedKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//expressaoSynchronized=expression
		public Assignment getExpressaoSynchronizedAssignment_9_2() { return cExpressaoSynchronizedAssignment_9_2; }

		//expression
		public RuleCall getExpressaoSynchronizedExpressionParserRuleCall_9_2_0() { return cExpressaoSynchronizedExpressionParserRuleCall_9_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }

		//corpoSynchronize=statement
		public Assignment getCorpoSynchronizeAssignment_9_4() { return cCorpoSynchronizeAssignment_9_4; }

		//statement
		public RuleCall getCorpoSynchronizeStatementParserRuleCall_9_4_0() { return cCorpoSynchronizeStatementParserRuleCall_9_4_0; }

		//"return" return=expression? ";"
		public Group getGroup_10() { return cGroup_10; }

		//"return"
		public Keyword getReturnKeyword_10_0() { return cReturnKeyword_10_0; }

		//return=expression?
		public Assignment getReturnAssignment_10_1() { return cReturnAssignment_10_1; }

		//expression
		public RuleCall getReturnExpressionParserRuleCall_10_1_0() { return cReturnExpressionParserRuleCall_10_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//"throw" exececao=expression ";"
		public Group getGroup_11() { return cGroup_11; }

		//"throw"
		public Keyword getThrowKeyword_11_0() { return cThrowKeyword_11_0; }

		//exececao=expression
		public Assignment getExececaoAssignment_11_1() { return cExececaoAssignment_11_1; }

		//expression
		public RuleCall getExececaoExpressionParserRuleCall_11_1_0() { return cExececaoExpressionParserRuleCall_11_1_0; }

		//";"
		public Keyword getSemicolonKeyword_11_2() { return cSemicolonKeyword_11_2; }

		//IDENTIFIER ":" //TODO naum sei o q eh
		//statement
		public Group getGroup_12() { return cGroup_12; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_12_0() { return cIDENTIFIERTerminalRuleCall_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		////TODO naum sei o q eh
		//statement
		public RuleCall getStatementParserRuleCall_12_2() { return cStatementParserRuleCall_12_2; }

		//"break" break=IDENTIFIER? ";"
		public Group getGroup_13() { return cGroup_13; }

		//"break"
		public Keyword getBreakKeyword_13_0() { return cBreakKeyword_13_0; }

		//break=IDENTIFIER?
		public Assignment getBreakAssignment_13_1() { return cBreakAssignment_13_1; }

		//IDENTIFIER
		public RuleCall getBreakIDENTIFIERTerminalRuleCall_13_1_0() { return cBreakIDENTIFIERTerminalRuleCall_13_1_0; }

		//";"
		public Keyword getSemicolonKeyword_13_2() { return cSemicolonKeyword_13_2; }

		//"continue" continue=IDENTIFIER? ";"
		public Group getGroup_14() { return cGroup_14; }

		//"continue"
		public Keyword getContinueKeyword_14_0() { return cContinueKeyword_14_0; }

		//continue=IDENTIFIER?
		public Assignment getContinueAssignment_14_1() { return cContinueAssignment_14_1; }

		//IDENTIFIER
		public RuleCall getContinueIDENTIFIERTerminalRuleCall_14_1_0() { return cContinueIDENTIFIERTerminalRuleCall_14_1_0; }

		//";"
		public Keyword getSemicolonKeyword_14_2() { return cSemicolonKeyword_14_2; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModificadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModificadorMODIFIERParserRuleCall_0_0 = (RuleCall)cModificadorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTipoVariavelAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTipoVariavelTypeParserRuleCall_1_0_0 = (RuleCall)cTipoVariavelAssignment_1_0.eContents().get(0);
		private final Keyword cVoidKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDeclaracaoVariaveisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaracaoVariaveisVariable_declaratorParserRuleCall_2_0 = (RuleCall)cDeclaracaoVariaveisAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclaracaoVariaveisAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclaracaoVariaveisVariable_declaratorParserRuleCall_3_1_0 = (RuleCall)cDeclaracaoVariaveisAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Assignment cBlocoVariavelAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cBlocoVariavelStatement_blockParserRuleCall_4_1_0 = (RuleCall)cBlocoVariavelAssignment_4_1.eContents().get(0);
		
		//variable_declaration:
		//	modificador=MODIFIER* (tipoVariavel=type | "void")? declaracaoVariaveis+=variable_declarator (","
		//	declaracaoVariaveis+=variable_declarator)* (";" | blocoVariavel=statement_block);
		@Override public ParserRule getRule() { return rule; }

		//modificador=MODIFIER* (tipoVariavel=type | "void")? declaracaoVariaveis+=variable_declarator (","
		//declaracaoVariaveis+=variable_declarator)* (";" | blocoVariavel=statement_block)
		public Group getGroup() { return cGroup; }

		//modificador=MODIFIER*
		public Assignment getModificadorAssignment_0() { return cModificadorAssignment_0; }

		//MODIFIER
		public RuleCall getModificadorMODIFIERParserRuleCall_0_0() { return cModificadorMODIFIERParserRuleCall_0_0; }

		//(tipoVariavel=type | "void")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tipoVariavel=type
		public Assignment getTipoVariavelAssignment_1_0() { return cTipoVariavelAssignment_1_0; }

		//type
		public RuleCall getTipoVariavelTypeParserRuleCall_1_0_0() { return cTipoVariavelTypeParserRuleCall_1_0_0; }

		//"void"
		public Keyword getVoidKeyword_1_1() { return cVoidKeyword_1_1; }

		//declaracaoVariaveis+=variable_declarator
		public Assignment getDeclaracaoVariaveisAssignment_2() { return cDeclaracaoVariaveisAssignment_2; }

		//variable_declarator
		public RuleCall getDeclaracaoVariaveisVariable_declaratorParserRuleCall_2_0() { return cDeclaracaoVariaveisVariable_declaratorParserRuleCall_2_0; }

		//("," declaracaoVariaveis+=variable_declarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declaracaoVariaveis+=variable_declarator
		public Assignment getDeclaracaoVariaveisAssignment_3_1() { return cDeclaracaoVariaveisAssignment_3_1; }

		//variable_declarator
		public RuleCall getDeclaracaoVariaveisVariable_declaratorParserRuleCall_3_1_0() { return cDeclaracaoVariaveisVariable_declaratorParserRuleCall_3_1_0; }

		//";" | blocoVariavel=statement_block
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//blocoVariavel=statement_block
		public Assignment getBlocoVariavelAssignment_4_1() { return cBlocoVariavelAssignment_4_1; }

		//statement_block
		public RuleCall getBlocoVariavelStatement_blockParserRuleCall_4_1_0() { return cBlocoVariavelStatement_blockParserRuleCall_4_1_0; }
	}

	public class Variable_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cArglistParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNomeVariavelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNomeVariavelIDENTIFIERTerminalRuleCall_1_0_0 = (RuleCall)cNomeVariavelAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValorVariavelAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValorVariavelVariable_initializerParserRuleCall_1_2_1_0 = (RuleCall)cValorVariavelAssignment_1_2_1.eContents().get(0);
		
		//variable_declarator:
		//	"(" arglist? //TODO naum sei o q eh
		//	")" | nomeVariavel=IDENTIFIER ("[" "]")* ("=" valorVariavel=variable_initializer)?;
		@Override public ParserRule getRule() { return rule; }

		//"(" arglist? //TODO naum sei o q eh
		//")" | nomeVariavel=IDENTIFIER ("[" "]")* ("=" valorVariavel=variable_initializer)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" arglist? //TODO naum sei o q eh
		//")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//arglist?
		public RuleCall getArglistParserRuleCall_0_1() { return cArglistParserRuleCall_0_1; }

		////TODO naum sei o q eh
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//nomeVariavel=IDENTIFIER ("[" "]")* ("=" valorVariavel=variable_initializer)?
		public Group getGroup_1() { return cGroup_1; }

		//nomeVariavel=IDENTIFIER
		public Assignment getNomeVariavelAssignment_1_0() { return cNomeVariavelAssignment_1_0; }

		//IDENTIFIER
		public RuleCall getNomeVariavelIDENTIFIERTerminalRuleCall_1_0_0() { return cNomeVariavelIDENTIFIERTerminalRuleCall_1_0_0; }

		//("[" "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1() { return cRightSquareBracketKeyword_1_1_1; }

		//("=" valorVariavel=variable_initializer)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_0() { return cEqualsSignKeyword_1_2_0; }

		//valorVariavel=variable_initializer
		public Assignment getValorVariavelAssignment_1_2_1() { return cValorVariavelAssignment_1_2_1; }

		//variable_initializer
		public RuleCall getValorVariavelVariable_initializerParserRuleCall_1_2_1_0() { return cValorVariavelVariable_initializerParserRuleCall_1_2_1_0; }
	}

	public class Variable_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressaoVariavelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressaoVariavelExpressionParserRuleCall_0_0 = (RuleCall)cExpressaoVariavelAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cValorVariaveisAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValorVariaveisVariable_initializerParserRuleCall_1_1_0_0 = (RuleCall)cValorVariaveisAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValorVariaveisAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValorVariaveisVariable_initializerParserRuleCall_1_1_1_1_0 = (RuleCall)cValorVariaveisAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//variable_initializer:
		//	expressaoVariavel=expression | "{" (valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)*
		//	","?)? "}";
		@Override public ParserRule getRule() { return rule; }

		//expressaoVariavel=expression | "{" (valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)*
		//","?)? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressaoVariavel=expression
		public Assignment getExpressaoVariavelAssignment_0() { return cExpressaoVariavelAssignment_0; }

		//expression
		public RuleCall getExpressaoVariavelExpressionParserRuleCall_0_0() { return cExpressaoVariavelExpressionParserRuleCall_0_0; }

		//"{" (valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)* ","?)? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)* ","?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//valorVariaveis+=variable_initializer
		public Assignment getValorVariaveisAssignment_1_1_0() { return cValorVariaveisAssignment_1_1_0; }

		//variable_initializer
		public RuleCall getValorVariaveisVariable_initializerParserRuleCall_1_1_0_0() { return cValorVariaveisVariable_initializerParserRuleCall_1_1_0_0; }

		//("," valorVariaveis+=variable_initializer)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//valorVariaveis+=variable_initializer
		public Assignment getValorVariaveisAssignment_1_1_1_1() { return cValorVariaveisAssignment_1_1_1_1; }

		//variable_initializer
		public RuleCall getValorVariaveisVariable_initializerParserRuleCall_1_1_1_1_0() { return cValorVariaveisVariable_initializerParserRuleCall_1_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_1_2() { return cCommaKeyword_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEspressaoIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEspressaoIfExpressionParserRuleCall_2_0 = (RuleCall)cEspressaoIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlcoIfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlcoIfStatementParserRuleCall_4_0 = (RuleCall)cBlcoIfAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Keyword cElseKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cBlocoElseAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cBlocoElseStatementParserRuleCall_5_0_1_0 = (RuleCall)cBlocoElseAssignment_5_0_1.eContents().get(0);
		
		//if_statement:
		//	"if" "(" espressaoIf=expression ")" blcoIf=statement => ("else" blocoElse=statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" espressaoIf=expression ")" blcoIf=statement => ("else" blocoElse=statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//espressaoIf=expression
		public Assignment getEspressaoIfAssignment_2() { return cEspressaoIfAssignment_2; }

		//expression
		public RuleCall getEspressaoIfExpressionParserRuleCall_2_0() { return cEspressaoIfExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//blcoIf=statement
		public Assignment getBlcoIfAssignment_4() { return cBlcoIfAssignment_4; }

		//statement
		public RuleCall getBlcoIfStatementParserRuleCall_4_0() { return cBlcoIfStatementParserRuleCall_4_0; }

		//=> ("else" blocoElse=statement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else" blocoElse=statement
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"else"
		public Keyword getElseKeyword_5_0_0() { return cElseKeyword_5_0_0; }

		//blocoElse=statement
		public Assignment getBlocoElseAssignment_5_0_1() { return cBlocoElseAssignment_5_0_1; }

		//statement
		public RuleCall getBlocoElseStatementParserRuleCall_5_0_1_0() { return cBlocoElseStatementParserRuleCall_5_0_1_0; }
	}

	public class Do_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "do_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlocoDoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocoDoStatementParserRuleCall_1_0 = (RuleCall)cBlocoDoAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressaoWhileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressaoWhileExpressionParserRuleCall_4_0 = (RuleCall)cExpressaoWhileAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//do_statement:
		//	"do" blocoDo=statement "while" "(" expressaoWhile=expression ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" blocoDo=statement "while" "(" expressaoWhile=expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//blocoDo=statement
		public Assignment getBlocoDoAssignment_1() { return cBlocoDoAssignment_1; }

		//statement
		public RuleCall getBlocoDoStatementParserRuleCall_1_0() { return cBlocoDoStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expressaoWhile=expression
		public Assignment getExpressaoWhileAssignment_4() { return cExpressaoWhileAssignment_4; }

		//expression
		public RuleCall getExpressaoWhileExpressionParserRuleCall_4_0() { return cExpressaoWhileExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoWhileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoWhileExpressionParserRuleCall_2_0 = (RuleCall)cExpressaoWhileAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlocoWhileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocoWhileStatementParserRuleCall_4_0 = (RuleCall)cBlocoWhileAssignment_4.eContents().get(0);
		
		//while_statement:
		//	"while" "(" expressaoWhile=expression ")" blocoWhile=statement;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" expressaoWhile=expression ")" blocoWhile=statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressaoWhile=expression
		public Assignment getExpressaoWhileAssignment_2() { return cExpressaoWhileAssignment_2; }

		//expression
		public RuleCall getExpressaoWhileExpressionParserRuleCall_2_0() { return cExpressaoWhileExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//blocoWhile=statement
		public Assignment getBlocoWhileAssignment_4() { return cBlocoWhileAssignment_4; }

		//statement
		public RuleCall getBlocoWhileStatementParserRuleCall_4_0() { return cBlocoWhileStatementParserRuleCall_4_0; }
	}

	public class For_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDeclaracaoVariavelAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDeclaracaoVariavelVariable_declarationParserRuleCall_2_0_0 = (RuleCall)cDeclaracaoVariavelAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cExpressaoDeclaracaoAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cExpressaoDeclaracaoExpressionParserRuleCall_2_1_0_0 = (RuleCall)cExpressaoDeclaracaoAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Assignment cExpressaoForAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressaoForExpressionParserRuleCall_3_0 = (RuleCall)cExpressaoForAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressaoIncrementoAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressaoIncrementoExpressionParserRuleCall_5_0 = (RuleCall)cExpressaoIncrementoAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlocoForAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlocoForStatementParserRuleCall_7_0 = (RuleCall)cBlocoForAssignment_7.eContents().get(0);
		
		//for_statement:
		//	"for" "(" (=> declaracaoVariavel=variable_declaration | expressaoDeclaracao=expression ";" | ";")
		//	expressaoFor=expression? ";" expressaoIncremento=expression? ")" blocoFor=statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" (=> declaracaoVariavel=variable_declaration | expressaoDeclaracao=expression ";" | ";")
		//expressaoFor=expression? ";" expressaoIncremento=expression? ")" blocoFor=statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//=> declaracaoVariavel=variable_declaration | expressaoDeclaracao=expression ";" | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> declaracaoVariavel=variable_declaration
		public Assignment getDeclaracaoVariavelAssignment_2_0() { return cDeclaracaoVariavelAssignment_2_0; }

		//variable_declaration
		public RuleCall getDeclaracaoVariavelVariable_declarationParserRuleCall_2_0_0() { return cDeclaracaoVariavelVariable_declarationParserRuleCall_2_0_0; }

		//expressaoDeclaracao=expression ";"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//expressaoDeclaracao=expression
		public Assignment getExpressaoDeclaracaoAssignment_2_1_0() { return cExpressaoDeclaracaoAssignment_2_1_0; }

		//expression
		public RuleCall getExpressaoDeclaracaoExpressionParserRuleCall_2_1_0_0() { return cExpressaoDeclaracaoExpressionParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//expressaoFor=expression?
		public Assignment getExpressaoForAssignment_3() { return cExpressaoForAssignment_3; }

		//expression
		public RuleCall getExpressaoForExpressionParserRuleCall_3_0() { return cExpressaoForExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expressaoIncremento=expression?
		public Assignment getExpressaoIncrementoAssignment_5() { return cExpressaoIncrementoAssignment_5; }

		//expression
		public RuleCall getExpressaoIncrementoExpressionParserRuleCall_5_0() { return cExpressaoIncrementoExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//blocoFor=statement
		public Assignment getBlocoForAssignment_7() { return cBlocoForAssignment_7; }

		//statement
		public RuleCall getBlocoForStatementParserRuleCall_7_0() { return cBlocoForStatementParserRuleCall_7_0; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlocoTryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocoTryStatement_blockParserRuleCall_1_0 = (RuleCall)cBlocoTryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cCatchKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cParametroCatchAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cParametroCatchParameterParserRuleCall_2_0_2_0 = (RuleCall)cParametroCatchAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cBlocoCatchAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cBlocoCatchStatement_blockParserRuleCall_2_0_4_0 = (RuleCall)cBlocoCatchAssignment_2_0_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cFinallyKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cBlocoFinallyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cBlocoFinallyStatement_blockParserRuleCall_3_0_1_0 = (RuleCall)cBlocoFinallyAssignment_3_0_1.eContents().get(0);
		
		//try_statement:
		//	"try" blocoTry=statement_block => ("catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block)* => ("finally"
		//	blocoFinally=statement_block)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" blocoTry=statement_block => ("catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block)* => ("finally"
		//blocoFinally=statement_block)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//blocoTry=statement_block
		public Assignment getBlocoTryAssignment_1() { return cBlocoTryAssignment_1; }

		//statement_block
		public RuleCall getBlocoTryStatement_blockParserRuleCall_1_0() { return cBlocoTryStatement_blockParserRuleCall_1_0; }

		//=> ("catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block)*
		public Group getGroup_2() { return cGroup_2; }

		//"catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"catch"
		public Keyword getCatchKeyword_2_0_0() { return cCatchKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }

		//parametroCatch=parameter
		public Assignment getParametroCatchAssignment_2_0_2() { return cParametroCatchAssignment_2_0_2; }

		//parameter
		public RuleCall getParametroCatchParameterParserRuleCall_2_0_2_0() { return cParametroCatchParameterParserRuleCall_2_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }

		//blocoCatch=statement_block
		public Assignment getBlocoCatchAssignment_2_0_4() { return cBlocoCatchAssignment_2_0_4; }

		//statement_block
		public RuleCall getBlocoCatchStatement_blockParserRuleCall_2_0_4_0() { return cBlocoCatchStatement_blockParserRuleCall_2_0_4_0; }

		//=> ("finally" blocoFinally=statement_block)?
		public Group getGroup_3() { return cGroup_3; }

		//"finally" blocoFinally=statement_block
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"finally"
		public Keyword getFinallyKeyword_3_0_0() { return cFinallyKeyword_3_0_0; }

		//blocoFinally=statement_block
		public Assignment getBlocoFinallyAssignment_3_0_1() { return cBlocoFinallyAssignment_3_0_1; }

		//statement_block
		public RuleCall getBlocoFinallyStatement_blockParserRuleCall_3_0_1_0() { return cBlocoFinallyStatement_blockParserRuleCall_3_0_1_0; }
	}

	public class Switch_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "switch_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressaoSwitchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressaoSwitchExpressionParserRuleCall_2_0 = (RuleCall)cExpressaoSwitchAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCaseKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cExpressaoCasesAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cExpressaoCasesExpressionParserRuleCall_5_0_1_0 = (RuleCall)cExpressaoCasesAssignment_5_0_1.eContents().get(0);
		private final Keyword cColonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cDefaultKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cBlocoSwitchAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cBlocoSwitchStatementParserRuleCall_5_2_0 = (RuleCall)cBlocoSwitchAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//switch_statement:
		//	"switch" "(" expressaoSwitch=expression ")" "{" ("case" expressaoCases+=expression ":" | "default" ":" |
		//	blocoSwitch=statement)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"switch" "(" expressaoSwitch=expression ")" "{" ("case" expressaoCases+=expression ":" | "default" ":" |
		//blocoSwitch=statement)* "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressaoSwitch=expression
		public Assignment getExpressaoSwitchAssignment_2() { return cExpressaoSwitchAssignment_2; }

		//expression
		public RuleCall getExpressaoSwitchExpressionParserRuleCall_2_0() { return cExpressaoSwitchExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("case" expressaoCases+=expression ":" | "default" ":" | blocoSwitch=statement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"case" expressaoCases+=expression ":"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"case"
		public Keyword getCaseKeyword_5_0_0() { return cCaseKeyword_5_0_0; }

		//expressaoCases+=expression
		public Assignment getExpressaoCasesAssignment_5_0_1() { return cExpressaoCasesAssignment_5_0_1; }

		//expression
		public RuleCall getExpressaoCasesExpressionParserRuleCall_5_0_1_0() { return cExpressaoCasesExpressionParserRuleCall_5_0_1_0; }

		//":"
		public Keyword getColonKeyword_5_0_2() { return cColonKeyword_5_0_2; }

		//"default" ":"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"default"
		public Keyword getDefaultKeyword_5_1_0() { return cDefaultKeyword_5_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }

		//blocoSwitch=statement
		public Assignment getBlocoSwitchAssignment_5_2() { return cBlocoSwitchAssignment_5_2; }

		//statement
		public RuleCall getBlocoSwitchStatementParserRuleCall_5_2_0() { return cBlocoSwitchStatementParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModificadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModificadorMODIFIERParserRuleCall_0_0 = (RuleCall)cModificadorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_1_0_0 = (RuleCall)cTipoAssignment_1_0.eContents().get(0);
		private final Keyword cVoidKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNomeContrutorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomeContrutorIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNomeContrutorAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametrosContrutorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametrosContrutorParameter_listParserRuleCall_4_0 = (RuleCall)cParametrosContrutorAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlocoConstrutorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlocoConstrutorStatement_blockParserRuleCall_6_0 = (RuleCall)cBlocoConstrutorAssignment_6.eContents().get(0);
		
		//constructor_declaration:
		//	modificador=MODIFIER* (tipo=type | "void")? nomeContrutor=IDENTIFIER "(" parametrosContrutor=parameter_list? ")"
		//	blocoConstrutor=statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modificador=MODIFIER* (tipo=type | "void")? nomeContrutor=IDENTIFIER "(" parametrosContrutor=parameter_list? ")"
		//blocoConstrutor=statement_block
		public Group getGroup() { return cGroup; }

		//modificador=MODIFIER*
		public Assignment getModificadorAssignment_0() { return cModificadorAssignment_0; }

		//MODIFIER
		public RuleCall getModificadorMODIFIERParserRuleCall_0_0() { return cModificadorMODIFIERParserRuleCall_0_0; }

		//(tipo=type | "void")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tipo=type
		public Assignment getTipoAssignment_1_0() { return cTipoAssignment_1_0; }

		//type
		public RuleCall getTipoTypeParserRuleCall_1_0_0() { return cTipoTypeParserRuleCall_1_0_0; }

		//"void"
		public Keyword getVoidKeyword_1_1() { return cVoidKeyword_1_1; }

		//nomeContrutor=IDENTIFIER
		public Assignment getNomeContrutorAssignment_2() { return cNomeContrutorAssignment_2; }

		//IDENTIFIER
		public RuleCall getNomeContrutorIDENTIFIERTerminalRuleCall_2_0() { return cNomeContrutorIDENTIFIERTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parametrosContrutor=parameter_list?
		public Assignment getParametrosContrutorAssignment_4() { return cParametrosContrutorAssignment_4; }

		//parameter_list
		public RuleCall getParametrosContrutorParameter_listParserRuleCall_4_0() { return cParametrosContrutorParameter_listParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//blocoConstrutor=statement_block
		public Assignment getBlocoConstrutorAssignment_6() { return cBlocoConstrutorAssignment_6; }

		//statement_block
		public RuleCall getBlocoConstrutorStatement_blockParserRuleCall_6_0() { return cBlocoConstrutorStatement_blockParserRuleCall_6_0; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlocoEstaticoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocoEstaticoStatement_blockParserRuleCall_1_0 = (RuleCall)cBlocoEstaticoAssignment_1.eContents().get(0);
		
		//static_initializer:
		//	"static" blocoEstatico=statement_block;
		@Override public ParserRule getRule() { return rule; }

		//"static" blocoEstatico=statement_block
		public Group getGroup() { return cGroup; }

		//"static"
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//blocoEstatico=statement_block
		public Assignment getBlocoEstaticoAssignment_1() { return cBlocoEstaticoAssignment_1; }

		//statement_block
		public RuleCall getBlocoEstaticoStatement_blockParserRuleCall_1_0() { return cBlocoEstaticoStatement_blockParserRuleCall_1_0; }
	}

	public class Creating_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "creating_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNovoObjetoAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNovoObjetoNameParserRuleCall_1_0_0_0 = (RuleCall)cNovoObjetoAssignment_1_0_0.eContents().get(0);
		private final Assignment cParametrosAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametrosCreating_auxParserRuleCall_1_0_1_0 = (RuleCall)cParametrosAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTipoObjetoAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTipoObjetoType_specifierParserRuleCall_1_1_0_0 = (RuleCall)cTipoObjetoAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cParametrosAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cParametrosAuxParserRuleCall_1_1_1_0_0 = (RuleCall)cParametrosAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressaoNewAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressaoNewExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpressaoNewAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cNovoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNovoNewBlockParserRuleCall_2_0 = (RuleCall)cNovoAssignment_2.eContents().get(0);
		
		//creating_expression:
		//	"new" (novoObjeto=name parametros=creating_aux | tipoObjeto=type_specifier -> (parametros=aux)? ("[" "]")* | "("
		//	expressaoNew=expression ")") novo=newBlock*;
		@Override public ParserRule getRule() { return rule; }

		//"new" (novoObjeto=name parametros=creating_aux | tipoObjeto=type_specifier -> (parametros=aux)? ("[" "]")* | "("
		//expressaoNew=expression ")") novo=newBlock*
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//novoObjeto=name parametros=creating_aux | tipoObjeto=type_specifier -> (parametros=aux)? ("[" "]")* | "("
		//expressaoNew=expression ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//novoObjeto=name parametros=creating_aux
		public Group getGroup_1_0() { return cGroup_1_0; }

		//novoObjeto=name
		public Assignment getNovoObjetoAssignment_1_0_0() { return cNovoObjetoAssignment_1_0_0; }

		//name
		public RuleCall getNovoObjetoNameParserRuleCall_1_0_0_0() { return cNovoObjetoNameParserRuleCall_1_0_0_0; }

		//parametros=creating_aux
		public Assignment getParametrosAssignment_1_0_1() { return cParametrosAssignment_1_0_1; }

		//creating_aux
		public RuleCall getParametrosCreating_auxParserRuleCall_1_0_1_0() { return cParametrosCreating_auxParserRuleCall_1_0_1_0; }

		//tipoObjeto=type_specifier -> (parametros=aux)? ("[" "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//tipoObjeto=type_specifier
		public Assignment getTipoObjetoAssignment_1_1_0() { return cTipoObjetoAssignment_1_1_0; }

		//type_specifier
		public RuleCall getTipoObjetoType_specifierParserRuleCall_1_1_0_0() { return cTipoObjetoType_specifierParserRuleCall_1_1_0_0; }

		//-> (parametros=aux)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//parametros=aux
		public Assignment getParametrosAssignment_1_1_1_0() { return cParametrosAssignment_1_1_1_0; }

		//aux
		public RuleCall getParametrosAuxParserRuleCall_1_1_1_0_0() { return cParametrosAuxParserRuleCall_1_1_1_0_0; }

		//("[" "]")*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_1() { return cRightSquareBracketKeyword_1_1_2_1; }

		//"(" expressaoNew=expression ")"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//expressaoNew=expression
		public Assignment getExpressaoNewAssignment_1_2_1() { return cExpressaoNewAssignment_1_2_1; }

		//expression
		public RuleCall getExpressaoNewExpressionParserRuleCall_1_2_1_0() { return cExpressaoNewExpressionParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }

		//novo=newBlock*
		public Assignment getNovoAssignment_2() { return cNovoAssignment_2; }

		//newBlock
		public RuleCall getNovoNewBlockParserRuleCall_2_0() { return cNovoNewBlockParserRuleCall_2_0; }
	}

	public class Exp_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exp_aux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressaoAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressaoExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressaoAssignment_0_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressaoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressaoAssignment_1_2.eContents().get(0);
		
		//exp_aux:
		//	-> expressao=expression ")" | type ")" expressao=expression;
		@Override public ParserRule getRule() { return rule; }

		//-> expressao=expression ")" | type ")" expressao=expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> expressao=expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//-> expressao=expression
		public Assignment getExpressaoAssignment_0_0() { return cExpressaoAssignment_0_0; }

		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_0_0_0() { return cExpressaoExpressionParserRuleCall_0_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1() { return cRightParenthesisKeyword_0_1; }

		//type ")" expressao=expression
		public Group getGroup_1() { return cGroup_1; }

		//type
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }

		//expressao=expression
		public Assignment getExpressaoAssignment_1_2() { return cExpressaoAssignment_1_2; }

		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_2_0() { return cExpressaoExpressionParserRuleCall_1_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTipoLogical_expressionParserRuleCall_0_0_0 = (RuleCall)cTipoAssignment_0_0.eContents().get(0);
		private final Assignment cTipoAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTipoNumeric_expressionParserRuleCall_0_1_0 = (RuleCall)cTipoAssignment_0_1.eContents().get(0);
		private final Assignment cTipoAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTipoBit_expressionParserRuleCall_0_2_0 = (RuleCall)cTipoAssignment_0_2.eContents().get(0);
		private final Assignment cNovoAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cNovoCreating_expressionParserRuleCall_0_3_0 = (RuleCall)cNovoAssignment_0_3.eContents().get(0);
		private final Assignment cLiteralAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cLiteralLiteral_expressionParserRuleCall_0_4_0 = (RuleCall)cLiteralAssignment_0_4.eContents().get(0);
		private final Keyword cNullKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cSuperKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cThisKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Assignment cIdentificadorAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cIdentificadorIDENTIFIERTerminalRuleCall_0_8_0 = (RuleCall)cIdentificadorAssignment_0_8.eContents().get(0);
		private final Group cGroup_0_9 = (Group)cAlternatives_0.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_0_9_0 = (Keyword)cGroup_0_9.eContents().get(0);
		private final RuleCall cExp_auxParserRuleCall_0_9_1 = (RuleCall)cGroup_0_9.eContents().get(1);
		private final Assignment cExpressoesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressoesExpression_auxParserRuleCall_1_0 = (RuleCall)cExpressoesAssignment_1.eContents().get(0);
		
		//expression:
		//	(tipo=logical_expression | tipo=numeric_expression | tipo=bit_expression | novo=creating_expression |
		//	literal=literal_expression | "null" | "super" | "this" | identificador=IDENTIFIER | "(" exp_aux)
		//	expressoes=expression_aux;
		@Override public ParserRule getRule() { return rule; }

		//(tipo=logical_expression | tipo=numeric_expression | tipo=bit_expression | novo=creating_expression |
		//literal=literal_expression | "null" | "super" | "this" | identificador=IDENTIFIER | "(" exp_aux)
		//expressoes=expression_aux
		public Group getGroup() { return cGroup; }

		//tipo=logical_expression | tipo=numeric_expression | tipo=bit_expression | novo=creating_expression |
		//literal=literal_expression | "null" | "super" | "this" | identificador=IDENTIFIER | "(" exp_aux
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//tipo=logical_expression
		public Assignment getTipoAssignment_0_0() { return cTipoAssignment_0_0; }

		//logical_expression
		public RuleCall getTipoLogical_expressionParserRuleCall_0_0_0() { return cTipoLogical_expressionParserRuleCall_0_0_0; }

		//tipo=numeric_expression
		public Assignment getTipoAssignment_0_1() { return cTipoAssignment_0_1; }

		//numeric_expression
		public RuleCall getTipoNumeric_expressionParserRuleCall_0_1_0() { return cTipoNumeric_expressionParserRuleCall_0_1_0; }

		//tipo=bit_expression
		public Assignment getTipoAssignment_0_2() { return cTipoAssignment_0_2; }

		//bit_expression
		public RuleCall getTipoBit_expressionParserRuleCall_0_2_0() { return cTipoBit_expressionParserRuleCall_0_2_0; }

		//novo=creating_expression
		public Assignment getNovoAssignment_0_3() { return cNovoAssignment_0_3; }

		//creating_expression
		public RuleCall getNovoCreating_expressionParserRuleCall_0_3_0() { return cNovoCreating_expressionParserRuleCall_0_3_0; }

		//literal=literal_expression
		public Assignment getLiteralAssignment_0_4() { return cLiteralAssignment_0_4; }

		//literal_expression
		public RuleCall getLiteralLiteral_expressionParserRuleCall_0_4_0() { return cLiteralLiteral_expressionParserRuleCall_0_4_0; }

		//"null"
		public Keyword getNullKeyword_0_5() { return cNullKeyword_0_5; }

		//"super"
		public Keyword getSuperKeyword_0_6() { return cSuperKeyword_0_6; }

		//"this"
		public Keyword getThisKeyword_0_7() { return cThisKeyword_0_7; }

		//identificador=IDENTIFIER
		public Assignment getIdentificadorAssignment_0_8() { return cIdentificadorAssignment_0_8; }

		//IDENTIFIER
		public RuleCall getIdentificadorIDENTIFIERTerminalRuleCall_0_8_0() { return cIdentificadorIDENTIFIERTerminalRuleCall_0_8_0; }

		//"(" exp_aux
		public Group getGroup_0_9() { return cGroup_0_9; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_9_0() { return cLeftParenthesisKeyword_0_9_0; }

		//exp_aux
		public RuleCall getExp_auxParserRuleCall_0_9_1() { return cExp_auxParserRuleCall_0_9_1; }

		//expressoes=expression_aux
		public Assignment getExpressoesAssignment_1() { return cExpressoesAssignment_1; }

		//expression_aux
		public RuleCall getExpressoesExpression_auxParserRuleCall_1_0() { return cExpressoesExpression_auxParserRuleCall_1_0; }
	}

	public class Expression_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0_0 = (Keyword)cGroup_0_0_0.eContents().get(0);
		private final Assignment cParametrosAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final RuleCall cParametrosArglistParserRuleCall_0_0_0_1_0 = (RuleCall)cParametrosAssignment_0_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_0_2 = (Keyword)cGroup_0_0_0.eContents().get(2);
		private final RuleCall cAuxParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final Assignment cExpAssignment_0_0_2_1 = (Assignment)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_0_2_1_0 = (RuleCall)cExpAssignment_0_0_2_1.eContents().get(0);
		private final Group cGroup_0_0_3 = (Group)cAlternatives_0_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_0_3_0 = (Keyword)cGroup_0_0_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_0_3_1 = (RuleCall)cGroup_0_0_3.eContents().get(1);
		private final Group cGroup_0_0_4 = (Group)cAlternatives_0_0.eContents().get(4);
		private final Keyword cInstanceofKeyword_0_0_4_0 = (Keyword)cGroup_0_0_4.eContents().get(0);
		private final RuleCall cNameParserRuleCall_0_0_4_1 = (RuleCall)cGroup_0_0_4.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cOpAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOpMais_auxParserRuleCall_0_1_0_0 = (RuleCall)cOpAssignment_0_1_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpAssignment_0_1_1.eContents().get(0);
		private final Assignment cOperadorAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Alternatives cOperadorAlternatives_0_2_0 = (Alternatives)cOperadorAssignment_0_2.eContents().get(0);
		private final Keyword cOperadorPlusSignPlusSignKeyword_0_2_0_0 = (Keyword)cOperadorAlternatives_0_2_0.eContents().get(0);
		private final Keyword cOperadorHyphenMinusHyphenMinusKeyword_0_2_0_1 = (Keyword)cOperadorAlternatives_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_0_3_0 = (Alternatives)cGroup_0_3.eContents().get(0);
		private final Assignment cOpAssignment_0_3_0_0 = (Assignment)cAlternatives_0_3_0.eContents().get(0);
		private final RuleCall cOpMais_auxParserRuleCall_0_3_0_0_0 = (RuleCall)cOpAssignment_0_3_0_0.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_1 = (Assignment)cAlternatives_0_3_0.eContents().get(1);
		private final Keyword cOperadorHyphenMinusKeyword_0_3_0_1_0 = (Keyword)cOperadorAssignment_0_3_0_1.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_2 = (Assignment)cAlternatives_0_3_0.eContents().get(2);
		private final Keyword cOperadorHyphenMinusEqualsSignKeyword_0_3_0_2_0 = (Keyword)cOperadorAssignment_0_3_0_2.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_3 = (Assignment)cAlternatives_0_3_0.eContents().get(3);
		private final Keyword cOperadorAsteriskKeyword_0_3_0_3_0 = (Keyword)cOperadorAssignment_0_3_0_3.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_4 = (Assignment)cAlternatives_0_3_0.eContents().get(4);
		private final Keyword cOperadorAsteriskEqualsSignKeyword_0_3_0_4_0 = (Keyword)cOperadorAssignment_0_3_0_4.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_5 = (Assignment)cAlternatives_0_3_0.eContents().get(5);
		private final Keyword cOperadorSolidusKeyword_0_3_0_5_0 = (Keyword)cOperadorAssignment_0_3_0_5.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_6 = (Assignment)cAlternatives_0_3_0.eContents().get(6);
		private final Keyword cOperadorSolidusEqualsSignKeyword_0_3_0_6_0 = (Keyword)cOperadorAssignment_0_3_0_6.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_7 = (Assignment)cAlternatives_0_3_0.eContents().get(7);
		private final Keyword cOperadorPercentSignKeyword_0_3_0_7_0 = (Keyword)cOperadorAssignment_0_3_0_7.eContents().get(0);
		private final Assignment cOperadorAssignment_0_3_0_8 = (Assignment)cAlternatives_0_3_0.eContents().get(8);
		private final Keyword cOperadorPercentSignEqualsSignKeyword_0_3_0_8_0 = (Keyword)cOperadorAssignment_0_3_0_8.eContents().get(0);
		private final Assignment cExpAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_3_1_0 = (RuleCall)cExpAssignment_0_3_1.eContents().get(0);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cAlternatives_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cAlternatives_0_4.eContents().get(0);
		private final Assignment cOperadorAssignment_0_4_0_0 = (Assignment)cGroup_0_4_0.eContents().get(0);
		private final Alternatives cOperadorAlternatives_0_4_0_0_0 = (Alternatives)cOperadorAssignment_0_4_0_0.eContents().get(0);
		private final Keyword cOperadorAmpersandKeyword_0_4_0_0_0_0 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(0);
		private final Keyword cOperadorAmpersandKeyword_0_4_0_0_0_1 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(1);
		private final Keyword cOperadorVerticalLineKeyword_0_4_0_0_0_2 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(2);
		private final Keyword cOperadorVerticalLineEqualsSignKeyword_0_4_0_0_0_3 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(3);
		private final Keyword cOperadorCircumflexAccentKeyword_0_4_0_0_0_4 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(4);
		private final Keyword cOperadorCircumflexAccentEqualsSignKeyword_0_4_0_0_0_5 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(5);
		private final Keyword cOperadorAmpersandAmpersandKeyword_0_4_0_0_0_6 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(6);
		private final Keyword cOperadorVerticalLineVerticalLineEqualsSignKeyword_0_4_0_0_0_7 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(7);
		private final Keyword cOperadorPercentSignKeyword_0_4_0_0_0_8 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(8);
		private final Keyword cOperadorPercentSignEqualsSignKeyword_0_4_0_0_0_9 = (Keyword)cOperadorAlternatives_0_4_0_0_0.eContents().get(9);
		private final Assignment cExpAssignment_0_4_0_1 = (Assignment)cGroup_0_4_0.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_4_0_1_0 = (RuleCall)cExpAssignment_0_4_0_1.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final Assignment cOperadorAssignment_0_4_1_0 = (Assignment)cGroup_0_4_1.eContents().get(0);
		private final Keyword cOperadorQuestionMarkKeyword_0_4_1_0_0 = (Keyword)cOperadorAssignment_0_4_1_0.eContents().get(0);
		private final Assignment cExpAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_4_1_1_0 = (RuleCall)cExpAssignment_0_4_1_1.eContents().get(0);
		private final Assignment cOperadorAssignment_0_4_1_2 = (Assignment)cGroup_0_4_1.eContents().get(2);
		private final Keyword cOperadorColonKeyword_0_4_1_2_0 = (Keyword)cOperadorAssignment_0_4_1_2.eContents().get(0);
		private final Assignment cExpAssignment_0_4_1_3 = (Assignment)cGroup_0_4_1.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_0_4_1_3_0 = (RuleCall)cExpAssignment_0_4_1_3.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cAlternatives_0_4.eContents().get(2);
		private final Assignment cOperadorAssignment_0_4_2_0 = (Assignment)cGroup_0_4_2.eContents().get(0);
		private final Alternatives cOperadorAlternatives_0_4_2_0_0 = (Alternatives)cOperadorAssignment_0_4_2_0.eContents().get(0);
		private final Keyword cOperadorGreaterThanSignKeyword_0_4_2_0_0_0 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(0);
		private final Keyword cOperadorLessThanSignKeyword_0_4_2_0_0_1 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(1);
		private final Keyword cOperadorGreaterThanSignEqualsSignKeyword_0_4_2_0_0_2 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(2);
		private final Keyword cOperadorLessThanSignEqualsSignKeyword_0_4_2_0_0_3 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(3);
		private final Keyword cOperadorEqualsSignEqualsSignKeyword_0_4_2_0_0_4 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(4);
		private final Keyword cOperadorExclamationMarkEqualsSignKeyword_0_4_2_0_0_5 = (Keyword)cOperadorAlternatives_0_4_2_0_0.eContents().get(5);
		private final Assignment cExpAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_4_2_1_0 = (RuleCall)cExpAssignment_0_4_2_1.eContents().get(0);
		private final Group cGroup_0_4_3 = (Group)cAlternatives_0_4.eContents().get(3);
		private final Assignment cOperadorAssignment_0_4_3_0 = (Assignment)cGroup_0_4_3.eContents().get(0);
		private final Alternatives cOperadorAlternatives_0_4_3_0_0 = (Alternatives)cOperadorAssignment_0_4_3_0.eContents().get(0);
		private final Keyword cOperadorGreaterThanSignGreaterThanSignEqualsSignKeyword_0_4_3_0_0_0 = (Keyword)cOperadorAlternatives_0_4_3_0_0.eContents().get(0);
		private final Keyword cOperadorLessThanSignLessThanSignKeyword_0_4_3_0_0_1 = (Keyword)cOperadorAlternatives_0_4_3_0_0.eContents().get(1);
		private final Keyword cOperadorGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_2 = (Keyword)cOperadorAlternatives_0_4_3_0_0.eContents().get(2);
		private final Keyword cOperadorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_3 = (Keyword)cOperadorAlternatives_0_4_3_0_0.eContents().get(3);
		private final Assignment cExpAssignment_0_4_3_1 = (Assignment)cGroup_0_4_3.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_4_3_1_0 = (RuleCall)cExpAssignment_0_4_3_1.eContents().get(0);
		private final Assignment cExpressoesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressoesExpression_auxParserRuleCall_1_0 = (RuleCall)cExpressoesAssignment_1.eContents().get(0);
		
		//expression_aux:
		//	((("(" parametros=arglist? ")" | aux | "." exp=expression | "," expression | "instanceof" -> name) | -> op=mais_aux
		//	exp=expression | operador=("++" | "--") | (-> op=mais_aux | operador="-" | operador="-=" | operador="*" |
		//	operador="*=" | operador="/" | operador="/=" | operador="%" | operador="%=") exp=expression | (operador=("ampersand" |
		//	"ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=") exp=expression | operador="?"
		//	exp=expression operador=":" exp=expression | operador=(">" | "<" | ">=" | "<=" | "==" | "!=") exp=expression |
		//	operador=(">>=" | "<<" | ">>" | ">>>") exp=expression)) expressoes=expression_aux)?;
		@Override public ParserRule getRule() { return rule; }

		//((("(" parametros=arglist? ")" | aux | "." exp=expression | "," expression | "instanceof" -> name) | -> op=mais_aux
		//exp=expression | operador=("++" | "--") | (-> op=mais_aux | operador="-" | operador="-=" | operador="*" | operador="*="
		//| operador="/" | operador="/=" | operador="%" | operador="%=") exp=expression | (operador=("ampersand" | "ampersand=" |
		//"|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=") exp=expression | operador="?" exp=expression
		//operador=":" exp=expression | operador=(">" | "<" | ">=" | "<=" | "==" | "!=") exp=expression | operador=(">>=" | "<<"
		//| ">>" | ">>>") exp=expression)) expressoes=expression_aux)?
		public Group getGroup() { return cGroup; }

		//("(" parametros=arglist? ")" | aux | "." exp=expression | "," expression | "instanceof" -> name) | -> op=mais_aux
		//exp=expression | operador=("++" | "--") | (-> op=mais_aux | operador="-" | operador="-=" | operador="*" | operador="*="
		//| operador="/" | operador="/=" | operador="%" | operador="%=") exp=expression | (operador=("ampersand" | "ampersand=" |
		//"|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=") exp=expression | operador="?" exp=expression
		//operador=":" exp=expression | operador=(">" | "<" | ">=" | "<=" | "==" | "!=") exp=expression | operador=(">>=" | "<<"
		//| ">>" | ">>>") exp=expression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(" parametros=arglist? ")" | aux | "." exp=expression | "," expression | "instanceof" -> name
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"(" parametros=arglist? ")"
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_0_0() { return cLeftParenthesisKeyword_0_0_0_0; }

		//parametros=arglist?
		public Assignment getParametrosAssignment_0_0_0_1() { return cParametrosAssignment_0_0_0_1; }

		//arglist
		public RuleCall getParametrosArglistParserRuleCall_0_0_0_1_0() { return cParametrosArglistParserRuleCall_0_0_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_0_0_2() { return cRightParenthesisKeyword_0_0_0_2; }

		//aux
		public RuleCall getAuxParserRuleCall_0_0_1() { return cAuxParserRuleCall_0_0_1; }

		//"." exp=expression
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//"."
		public Keyword getFullStopKeyword_0_0_2_0() { return cFullStopKeyword_0_0_2_0; }

		//exp=expression
		public Assignment getExpAssignment_0_0_2_1() { return cExpAssignment_0_0_2_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_0_2_1_0() { return cExpExpressionParserRuleCall_0_0_2_1_0; }

		//"," expression
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }

		//","
		public Keyword getCommaKeyword_0_0_3_0() { return cCommaKeyword_0_0_3_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_0_0_3_1() { return cExpressionParserRuleCall_0_0_3_1; }

		//"instanceof" -> name
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }

		//"instanceof"
		public Keyword getInstanceofKeyword_0_0_4_0() { return cInstanceofKeyword_0_0_4_0; }

		//-> name
		public RuleCall getNameParserRuleCall_0_0_4_1() { return cNameParserRuleCall_0_0_4_1; }

		//-> op=mais_aux exp=expression
		public Group getGroup_0_1() { return cGroup_0_1; }

		//-> op=mais_aux
		public Assignment getOpAssignment_0_1_0() { return cOpAssignment_0_1_0; }

		//mais_aux
		public RuleCall getOpMais_auxParserRuleCall_0_1_0_0() { return cOpMais_auxParserRuleCall_0_1_0_0; }

		//exp=expression
		public Assignment getExpAssignment_0_1_1() { return cExpAssignment_0_1_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_1_1_0() { return cExpExpressionParserRuleCall_0_1_1_0; }

		//operador=("++" | "--")
		public Assignment getOperadorAssignment_0_2() { return cOperadorAssignment_0_2; }

		//"++" | "--"
		public Alternatives getOperadorAlternatives_0_2_0() { return cOperadorAlternatives_0_2_0; }

		//"++"
		public Keyword getOperadorPlusSignPlusSignKeyword_0_2_0_0() { return cOperadorPlusSignPlusSignKeyword_0_2_0_0; }

		//"--"
		public Keyword getOperadorHyphenMinusHyphenMinusKeyword_0_2_0_1() { return cOperadorHyphenMinusHyphenMinusKeyword_0_2_0_1; }

		//(-> op=mais_aux | operador="-" | operador="-=" | operador="*" | operador="*=" | operador="/" | operador="/=" |
		//operador="%" | operador="%=") exp=expression
		public Group getGroup_0_3() { return cGroup_0_3; }

		//-> op=mais_aux | operador="-" | operador="-=" | operador="*" | operador="*=" | operador="/" | operador="/=" |
		//operador="%" | operador="%="
		public Alternatives getAlternatives_0_3_0() { return cAlternatives_0_3_0; }

		//-> op=mais_aux
		public Assignment getOpAssignment_0_3_0_0() { return cOpAssignment_0_3_0_0; }

		//mais_aux
		public RuleCall getOpMais_auxParserRuleCall_0_3_0_0_0() { return cOpMais_auxParserRuleCall_0_3_0_0_0; }

		//operador="-"
		public Assignment getOperadorAssignment_0_3_0_1() { return cOperadorAssignment_0_3_0_1; }

		//"-"
		public Keyword getOperadorHyphenMinusKeyword_0_3_0_1_0() { return cOperadorHyphenMinusKeyword_0_3_0_1_0; }

		//operador="-="
		public Assignment getOperadorAssignment_0_3_0_2() { return cOperadorAssignment_0_3_0_2; }

		//"-="
		public Keyword getOperadorHyphenMinusEqualsSignKeyword_0_3_0_2_0() { return cOperadorHyphenMinusEqualsSignKeyword_0_3_0_2_0; }

		//operador="*"
		public Assignment getOperadorAssignment_0_3_0_3() { return cOperadorAssignment_0_3_0_3; }

		//"*"
		public Keyword getOperadorAsteriskKeyword_0_3_0_3_0() { return cOperadorAsteriskKeyword_0_3_0_3_0; }

		//operador="*="
		public Assignment getOperadorAssignment_0_3_0_4() { return cOperadorAssignment_0_3_0_4; }

		//"*="
		public Keyword getOperadorAsteriskEqualsSignKeyword_0_3_0_4_0() { return cOperadorAsteriskEqualsSignKeyword_0_3_0_4_0; }

		//operador="/"
		public Assignment getOperadorAssignment_0_3_0_5() { return cOperadorAssignment_0_3_0_5; }

		//"/"
		public Keyword getOperadorSolidusKeyword_0_3_0_5_0() { return cOperadorSolidusKeyword_0_3_0_5_0; }

		//operador="/="
		public Assignment getOperadorAssignment_0_3_0_6() { return cOperadorAssignment_0_3_0_6; }

		//"/="
		public Keyword getOperadorSolidusEqualsSignKeyword_0_3_0_6_0() { return cOperadorSolidusEqualsSignKeyword_0_3_0_6_0; }

		//operador="%"
		public Assignment getOperadorAssignment_0_3_0_7() { return cOperadorAssignment_0_3_0_7; }

		//"%"
		public Keyword getOperadorPercentSignKeyword_0_3_0_7_0() { return cOperadorPercentSignKeyword_0_3_0_7_0; }

		//operador="%="
		public Assignment getOperadorAssignment_0_3_0_8() { return cOperadorAssignment_0_3_0_8; }

		//"%="
		public Keyword getOperadorPercentSignEqualsSignKeyword_0_3_0_8_0() { return cOperadorPercentSignEqualsSignKeyword_0_3_0_8_0; }

		//exp=expression
		public Assignment getExpAssignment_0_3_1() { return cExpAssignment_0_3_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_3_1_0() { return cExpExpressionParserRuleCall_0_3_1_0; }

		//operador=("ampersand" | "ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=")
		//exp=expression | operador="?" exp=expression operador=":" exp=expression | operador=(">" | "<" | ">=" | "<=" | "==" |
		//"!=") exp=expression | operador=(">>=" | "<<" | ">>" | ">>>") exp=expression
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//operador=("ampersand" | "ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=")
		//exp=expression
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }

		//operador=("ampersand" | "ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=")
		public Assignment getOperadorAssignment_0_4_0_0() { return cOperadorAssignment_0_4_0_0; }

		//"ampersand" | "ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%="
		public Alternatives getOperadorAlternatives_0_4_0_0_0() { return cOperadorAlternatives_0_4_0_0_0; }

		//"ampersand"
		public Keyword getOperadorAmpersandKeyword_0_4_0_0_0_0() { return cOperadorAmpersandKeyword_0_4_0_0_0_0; }

		//"ampersand="
		public Keyword getOperadorAmpersandKeyword_0_4_0_0_0_1() { return cOperadorAmpersandKeyword_0_4_0_0_0_1; }

		//"|"
		public Keyword getOperadorVerticalLineKeyword_0_4_0_0_0_2() { return cOperadorVerticalLineKeyword_0_4_0_0_0_2; }

		//"|="
		public Keyword getOperadorVerticalLineEqualsSignKeyword_0_4_0_0_0_3() { return cOperadorVerticalLineEqualsSignKeyword_0_4_0_0_0_3; }

		//"^"
		public Keyword getOperadorCircumflexAccentKeyword_0_4_0_0_0_4() { return cOperadorCircumflexAccentKeyword_0_4_0_0_0_4; }

		//"^="
		public Keyword getOperadorCircumflexAccentEqualsSignKeyword_0_4_0_0_0_5() { return cOperadorCircumflexAccentEqualsSignKeyword_0_4_0_0_0_5; }

		//"ampersand ampersand"
		public Keyword getOperadorAmpersandAmpersandKeyword_0_4_0_0_0_6() { return cOperadorAmpersandAmpersandKeyword_0_4_0_0_0_6; }

		//"||="
		public Keyword getOperadorVerticalLineVerticalLineEqualsSignKeyword_0_4_0_0_0_7() { return cOperadorVerticalLineVerticalLineEqualsSignKeyword_0_4_0_0_0_7; }

		//"%"
		public Keyword getOperadorPercentSignKeyword_0_4_0_0_0_8() { return cOperadorPercentSignKeyword_0_4_0_0_0_8; }

		//"%="
		public Keyword getOperadorPercentSignEqualsSignKeyword_0_4_0_0_0_9() { return cOperadorPercentSignEqualsSignKeyword_0_4_0_0_0_9; }

		//exp=expression
		public Assignment getExpAssignment_0_4_0_1() { return cExpAssignment_0_4_0_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_4_0_1_0() { return cExpExpressionParserRuleCall_0_4_0_1_0; }

		//operador="?" exp=expression operador=":" exp=expression
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//operador="?"
		public Assignment getOperadorAssignment_0_4_1_0() { return cOperadorAssignment_0_4_1_0; }

		//"?"
		public Keyword getOperadorQuestionMarkKeyword_0_4_1_0_0() { return cOperadorQuestionMarkKeyword_0_4_1_0_0; }

		//exp=expression
		public Assignment getExpAssignment_0_4_1_1() { return cExpAssignment_0_4_1_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_4_1_1_0() { return cExpExpressionParserRuleCall_0_4_1_1_0; }

		//operador=":"
		public Assignment getOperadorAssignment_0_4_1_2() { return cOperadorAssignment_0_4_1_2; }

		//":"
		public Keyword getOperadorColonKeyword_0_4_1_2_0() { return cOperadorColonKeyword_0_4_1_2_0; }

		//exp=expression
		public Assignment getExpAssignment_0_4_1_3() { return cExpAssignment_0_4_1_3; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_4_1_3_0() { return cExpExpressionParserRuleCall_0_4_1_3_0; }

		//operador=(">" | "<" | ">=" | "<=" | "==" | "!=") exp=expression
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }

		//operador=(">" | "<" | ">=" | "<=" | "==" | "!=")
		public Assignment getOperadorAssignment_0_4_2_0() { return cOperadorAssignment_0_4_2_0; }

		//">" | "<" | ">=" | "<=" | "==" | "!="
		public Alternatives getOperadorAlternatives_0_4_2_0_0() { return cOperadorAlternatives_0_4_2_0_0; }

		//">"
		public Keyword getOperadorGreaterThanSignKeyword_0_4_2_0_0_0() { return cOperadorGreaterThanSignKeyword_0_4_2_0_0_0; }

		//"<"
		public Keyword getOperadorLessThanSignKeyword_0_4_2_0_0_1() { return cOperadorLessThanSignKeyword_0_4_2_0_0_1; }

		//">="
		public Keyword getOperadorGreaterThanSignEqualsSignKeyword_0_4_2_0_0_2() { return cOperadorGreaterThanSignEqualsSignKeyword_0_4_2_0_0_2; }

		//"<="
		public Keyword getOperadorLessThanSignEqualsSignKeyword_0_4_2_0_0_3() { return cOperadorLessThanSignEqualsSignKeyword_0_4_2_0_0_3; }

		//"=="
		public Keyword getOperadorEqualsSignEqualsSignKeyword_0_4_2_0_0_4() { return cOperadorEqualsSignEqualsSignKeyword_0_4_2_0_0_4; }

		//"!="
		public Keyword getOperadorExclamationMarkEqualsSignKeyword_0_4_2_0_0_5() { return cOperadorExclamationMarkEqualsSignKeyword_0_4_2_0_0_5; }

		//exp=expression
		public Assignment getExpAssignment_0_4_2_1() { return cExpAssignment_0_4_2_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_4_2_1_0() { return cExpExpressionParserRuleCall_0_4_2_1_0; }

		//operador=(">>=" | "<<" | ">>" | ">>>") exp=expression
		public Group getGroup_0_4_3() { return cGroup_0_4_3; }

		//operador=(">>=" | "<<" | ">>" | ">>>")
		public Assignment getOperadorAssignment_0_4_3_0() { return cOperadorAssignment_0_4_3_0; }

		//">>=" | "<<" | ">>" | ">>>"
		public Alternatives getOperadorAlternatives_0_4_3_0_0() { return cOperadorAlternatives_0_4_3_0_0; }

		//">>="
		public Keyword getOperadorGreaterThanSignGreaterThanSignEqualsSignKeyword_0_4_3_0_0_0() { return cOperadorGreaterThanSignGreaterThanSignEqualsSignKeyword_0_4_3_0_0_0; }

		//"<<"
		public Keyword getOperadorLessThanSignLessThanSignKeyword_0_4_3_0_0_1() { return cOperadorLessThanSignLessThanSignKeyword_0_4_3_0_0_1; }

		//">>"
		public Keyword getOperadorGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_2() { return cOperadorGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_2; }

		//">>>"
		public Keyword getOperadorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_3() { return cOperadorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_4_3_0_0_3; }

		//exp=expression
		public Assignment getExpAssignment_0_4_3_1() { return cExpAssignment_0_4_3_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_4_3_1_0() { return cExpExpressionParserRuleCall_0_4_3_1_0; }

		//expressoes=expression_aux
		public Assignment getExpressoesAssignment_1() { return cExpressoesAssignment_1; }

		//expression_aux
		public RuleCall getExpressoesExpression_auxParserRuleCall_1_0() { return cExpressoesExpression_auxParserRuleCall_1_0; }
	}

	public class Mais_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mais_aux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOperadorPlusSignKeyword_0_0 = (Keyword)cOperadorAssignment_0.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOperadorPlusSignEqualsSignKeyword_1_0 = (Keyword)cOperadorAssignment_1.eContents().get(0);
		
		//mais_aux:
		//	operador="+" | operador="+=";
		@Override public ParserRule getRule() { return rule; }

		//operador="+" | operador="+="
		public Alternatives getAlternatives() { return cAlternatives; }

		//operador="+"
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }

		//"+"
		public Keyword getOperadorPlusSignKeyword_0_0() { return cOperadorPlusSignKeyword_0_0; }

		//operador="+="
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//"+="
		public Keyword getOperadorPlusSignEqualsSignKeyword_1_0() { return cOperadorPlusSignEqualsSignKeyword_1_0; }
	}

	public class NewBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "newBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConstructor_declarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//newBlock:
		//	"{" constructor_declaration "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" constructor_declaration "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//constructor_declaration
		public RuleCall getConstructor_declarationParserRuleCall_1() { return cConstructor_declarationParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class Creating_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "creating_aux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cArgumentosAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArgumentosArglistParserRuleCall_0_1_0 = (RuleCall)cArgumentosAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cAuxParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//creating_aux:
		//	"(" argumentos=arglist? ")" | -> (aux)? ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//-> "(" argumentos=arglist? ")" | -> (aux)? ("[" "]")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> "(" argumentos=arglist? ")"
		public Group getGroup_0() { return cGroup_0; }

		//-> "("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//argumentos=arglist?
		public Assignment getArgumentosAssignment_0_1() { return cArgumentosAssignment_0_1; }

		//arglist
		public RuleCall getArgumentosArglistParserRuleCall_0_1_0() { return cArgumentosArglistParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//-> (aux)? ("[" "]")*
		public Group getGroup_1() { return cGroup_1; }

		//-> (aux)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//aux
		public RuleCall getAuxParserRuleCall_1_0_0() { return cAuxParserRuleCall_1_0_0; }

		//("[" "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1() { return cRightSquareBracketKeyword_1_1_1; }
	}

	public class AuxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEspressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEspressaoExpressionParserRuleCall_1_0 = (RuleCall)cEspressaoAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//aux:
		//	"[" espressao=expression "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" espressao=expression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//espressao=expression
		public Assignment getEspressaoAssignment_1() { return cEspressaoAssignment_1; }

		//expression
		public RuleCall getEspressaoExpressionParserRuleCall_1_0() { return cEspressaoExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class Literal_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDecimalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalDECIMAL_DIGITSTerminalRuleCall_0_0 = (RuleCall)cDecimalAssignment_0.eContents().get(0);
		private final Assignment cInteiroAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInteiroINTEGER_LITERALTerminalRuleCall_1_0 = (RuleCall)cInteiroAssignment_1.eContents().get(0);
		private final Assignment cL_floatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cL_floatFLOAT_LITERALTerminalRuleCall_2_0 = (RuleCall)cL_floatAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//literal_expression:
		//	-> decimal=DECIMAL_DIGITS | inteiro=INTEGER_LITERAL | l_float=FLOAT_LITERAL | string=STRING;
		@Override public ParserRule getRule() { return rule; }

		//-> decimal=DECIMAL_DIGITS | inteiro=INTEGER_LITERAL | l_float=FLOAT_LITERAL | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> decimal=DECIMAL_DIGITS
		public Assignment getDecimalAssignment_0() { return cDecimalAssignment_0; }

		//DECIMAL_DIGITS
		public RuleCall getDecimalDECIMAL_DIGITSTerminalRuleCall_0_0() { return cDecimalDECIMAL_DIGITSTerminalRuleCall_0_0; }

		//inteiro=INTEGER_LITERAL
		public Assignment getInteiroAssignment_1() { return cInteiroAssignment_1; }

		//INTEGER_LITERAL
		public RuleCall getInteiroINTEGER_LITERALTerminalRuleCall_1_0() { return cInteiroINTEGER_LITERALTerminalRuleCall_1_0; }

		//l_float=FLOAT_LITERAL
		public Assignment getL_floatAssignment_2() { return cL_floatAssignment_2; }

		//FLOAT_LITERAL
		public RuleCall getL_floatFLOAT_LITERALTerminalRuleCall_2_0() { return cL_floatFLOAT_LITERALTerminalRuleCall_2_0; }

		//string=STRING
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0() { return cStringSTRINGTerminalRuleCall_3_0; }
	}

	public class Logical_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperadorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOperadorExclamationMarkKeyword_0_0_0 = (Keyword)cOperadorAssignment_0_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_1_0 = (RuleCall)cExpAssignment_0_1.eContents().get(0);
		private final Assignment cOperadorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOperadorTrueKeyword_1_0 = (Keyword)cOperadorAssignment_1.eContents().get(0);
		private final Assignment cOperadorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOperadorFalseKeyword_2_0 = (Keyword)cOperadorAssignment_2.eContents().get(0);
		
		//logical_expression:
		//	operador="!" exp=expression | operador="true" | operador="false";
		@Override public ParserRule getRule() { return rule; }

		//operador="!" exp=expression | operador="true" | operador="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//operador="!" exp=expression
		public Group getGroup_0() { return cGroup_0; }

		//operador="!"
		public Assignment getOperadorAssignment_0_0() { return cOperadorAssignment_0_0; }

		//"!"
		public Keyword getOperadorExclamationMarkKeyword_0_0_0() { return cOperadorExclamationMarkKeyword_0_0_0; }

		//exp=expression
		public Assignment getExpAssignment_0_1() { return cExpAssignment_0_1; }

		//expression
		public RuleCall getExpExpressionParserRuleCall_0_1_0() { return cExpExpressionParserRuleCall_0_1_0; }

		//operador="true"
		public Assignment getOperadorAssignment_1() { return cOperadorAssignment_1; }

		//"true"
		public Keyword getOperadorTrueKeyword_1_0() { return cOperadorTrueKeyword_1_0; }

		//operador="false"
		public Assignment getOperadorAssignment_2() { return cOperadorAssignment_2; }

		//"false"
		public Keyword getOperadorFalseKeyword_2_0() { return cOperadorFalseKeyword_2_0; }
	}

	public class Bit_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bit_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperadorTildeKeyword_0_0 = (Keyword)cOperadorAssignment_0.eContents().get(0);
		private final Assignment cExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_0 = (RuleCall)cExpressaoAssignment_1.eContents().get(0);
		
		//bit_expression:
		//	operador="~" expressao=expression;
		@Override public ParserRule getRule() { return rule; }

		//operador="~" expressao=expression
		public Group getGroup() { return cGroup; }

		//operador="~"
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }

		//"~"
		public Keyword getOperadorTildeKeyword_0_0() { return cOperadorTildeKeyword_0_0; }

		//expressao=expression
		public Assignment getExpressaoAssignment_1() { return cExpressaoAssignment_1; }

		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_0() { return cExpressaoExpressionParserRuleCall_1_0; }
	}

	public class Numeric_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "numeric_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperadorAlternatives_0_0 = (Alternatives)cOperadorAssignment_0.eContents().get(0);
		private final Keyword cOperadorHyphenMinusKeyword_0_0_0 = (Keyword)cOperadorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperadorPlusSignPlusSignKeyword_0_0_1 = (Keyword)cOperadorAlternatives_0_0.eContents().get(1);
		private final Keyword cOperadorHyphenMinusHyphenMinusKeyword_0_0_2 = (Keyword)cOperadorAlternatives_0_0.eContents().get(2);
		private final Assignment cExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressaoExpressionParserRuleCall_1_0 = (RuleCall)cExpressaoAssignment_1.eContents().get(0);
		
		//numeric_expression:
		//	operador=("-" | "++" | "--") expressao=expression;
		@Override public ParserRule getRule() { return rule; }

		//operador=("-" | "++" | "--") expressao=expression
		public Group getGroup() { return cGroup; }

		//operador=("-" | "++" | "--")
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }

		//"-" | "++" | "--"
		public Alternatives getOperadorAlternatives_0_0() { return cOperadorAlternatives_0_0; }

		//"-"
		public Keyword getOperadorHyphenMinusKeyword_0_0_0() { return cOperadorHyphenMinusKeyword_0_0_0; }

		//"++"
		public Keyword getOperadorPlusSignPlusSignKeyword_0_0_1() { return cOperadorPlusSignPlusSignKeyword_0_0_1; }

		//"--"
		public Keyword getOperadorHyphenMinusHyphenMinusKeyword_0_0_2() { return cOperadorHyphenMinusHyphenMinusKeyword_0_0_2; }

		//expressao=expression
		public Assignment getExpressaoAssignment_1() { return cExpressaoAssignment_1; }

		//expression
		public RuleCall getExpressaoExpressionParserRuleCall_1_0() { return cExpressaoExpressionParserRuleCall_1_0; }
	}

	public class ArglistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arglist");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressoesArgumentosAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressoesArgumentosExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressoesArgumentosAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressoesArgumentosAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressoesArgumentosExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressoesArgumentosAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTipoParametroAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTipoParametroTypeParserRuleCall_2_0_0 = (RuleCall)cTipoParametroAssignment_2_0.eContents().get(0);
		private final Assignment cNomeParametroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNomeParametroIDENTIFIERTerminalRuleCall_2_1_0 = (RuleCall)cNomeParametroAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTipoParametroAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTipoParametroTypeParserRuleCall_2_2_1_0 = (RuleCall)cTipoParametroAssignment_2_2_1.eContents().get(0);
		private final Assignment cNomeParametroAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cNomeParametroIDENTIFIERTerminalRuleCall_2_2_2_0 = (RuleCall)cNomeParametroAssignment_2_2_2.eContents().get(0);
		
		//arglist:
		//	expressoesArgumentos+=expression ("," expressoesArgumentos+=expression)* | "\"" STRING "\"" | tipoParametro+=type
		//	nomeParametro+=IDENTIFIER ("," tipoParametro+=type nomeParametro+=IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }

		//expressoesArgumentos+=expression ("," expressoesArgumentos+=expression)* | "\"" STRING "\"" | tipoParametro+=type
		//nomeParametro+=IDENTIFIER ("," tipoParametro+=type nomeParametro+=IDENTIFIER)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressoesArgumentos+=expression ("," expressoesArgumentos+=expression)*
		public Group getGroup_0() { return cGroup_0; }

		//expressoesArgumentos+=expression
		public Assignment getExpressoesArgumentosAssignment_0_0() { return cExpressoesArgumentosAssignment_0_0; }

		//expression
		public RuleCall getExpressoesArgumentosExpressionParserRuleCall_0_0_0() { return cExpressoesArgumentosExpressionParserRuleCall_0_0_0; }

		//("," expressoesArgumentos+=expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//expressoesArgumentos+=expression
		public Assignment getExpressoesArgumentosAssignment_0_1_1() { return cExpressoesArgumentosAssignment_0_1_1; }

		//expression
		public RuleCall getExpressoesArgumentosExpressionParserRuleCall_0_1_1_0() { return cExpressoesArgumentosExpressionParserRuleCall_0_1_1_0; }

		//"\"" STRING "\""
		public Group getGroup_1() { return cGroup_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_0() { return cQuotationMarkKeyword_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }

		//tipoParametro+=type nomeParametro+=IDENTIFIER ("," tipoParametro+=type nomeParametro+=IDENTIFIER)*
		public Group getGroup_2() { return cGroup_2; }

		//tipoParametro+=type
		public Assignment getTipoParametroAssignment_2_0() { return cTipoParametroAssignment_2_0; }

		//type
		public RuleCall getTipoParametroTypeParserRuleCall_2_0_0() { return cTipoParametroTypeParserRuleCall_2_0_0; }

		//nomeParametro+=IDENTIFIER
		public Assignment getNomeParametroAssignment_2_1() { return cNomeParametroAssignment_2_1; }

		//IDENTIFIER
		public RuleCall getNomeParametroIDENTIFIERTerminalRuleCall_2_1_0() { return cNomeParametroIDENTIFIERTerminalRuleCall_2_1_0; }

		//("," tipoParametro+=type nomeParametro+=IDENTIFIER)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//tipoParametro+=type
		public Assignment getTipoParametroAssignment_2_2_1() { return cTipoParametroAssignment_2_2_1; }

		//type
		public RuleCall getTipoParametroTypeParserRuleCall_2_2_1_0() { return cTipoParametroTypeParserRuleCall_2_2_1_0; }

		//nomeParametro+=IDENTIFIER
		public Assignment getNomeParametroAssignment_2_2_2() { return cNomeParametroAssignment_2_2_2; }

		//IDENTIFIER
		public RuleCall getNomeParametroIDENTIFIERTerminalRuleCall_2_2_2_0() { return cNomeParametroIDENTIFIERTerminalRuleCall_2_2_2_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomeIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNomeAssignment_0.eContents().get(0);
		private final Assignment cPacoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPacotePackage_name_auxParserRuleCall_1_0 = (RuleCall)cPacoteAssignment_1.eContents().get(0);
		
		//name:
		//	nome=IDENTIFIER pacote=package_name_aux;
		@Override public ParserRule getRule() { return rule; }

		//nome=IDENTIFIER pacote=package_name_aux
		public Group getGroup() { return cGroup; }

		//nome=IDENTIFIER
		public Assignment getNomeAssignment_0() { return cNomeAssignment_0; }

		//IDENTIFIER
		public RuleCall getNomeIDENTIFIERTerminalRuleCall_0_0() { return cNomeIDENTIFIERTerminalRuleCall_0_0; }

		//pacote=package_name_aux
		public Assignment getPacoteAssignment_1() { return cPacoteAssignment_1; }

		//package_name_aux
		public RuleCall getPacotePackage_name_auxParserRuleCall_1_0() { return cPacotePackage_name_auxParserRuleCall_1_0; }
	}

	public class Package_name_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "package_name_aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomePacoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomePacoteIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNomePacoteAssignment_1.eContents().get(0);
		private final Assignment cPacoteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPacotePackage_name_auxParserRuleCall_2_0 = (RuleCall)cPacoteAssignment_2.eContents().get(0);
		
		//package_name_aux:
		//	("." nomePacote=IDENTIFIER pacote=package_name_aux)*;
		@Override public ParserRule getRule() { return rule; }

		//("." nomePacote=IDENTIFIER pacote=package_name_aux)*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//nomePacote=IDENTIFIER
		public Assignment getNomePacoteAssignment_1() { return cNomePacoteAssignment_1; }

		//IDENTIFIER
		public RuleCall getNomePacoteIDENTIFIERTerminalRuleCall_1_0() { return cNomePacoteIDENTIFIERTerminalRuleCall_1_0; }

		//pacote=package_name_aux
		public Assignment getPacoteAssignment_2() { return cPacoteAssignment_2; }

		//package_name_aux
		public RuleCall getPacotePackage_name_auxParserRuleCall_2_0() { return cPacotePackage_name_auxParserRuleCall_2_0; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNomeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNomeBooleanKeyword_0_0 = (Keyword)cNomeAssignment_0.eContents().get(0);
		private final Assignment cNomeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNomeByteKeyword_1_0 = (Keyword)cNomeAssignment_1.eContents().get(0);
		private final Assignment cNomeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNomeCharKeyword_2_0 = (Keyword)cNomeAssignment_2.eContents().get(0);
		private final Assignment cNomeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNomeShortKeyword_3_0 = (Keyword)cNomeAssignment_3.eContents().get(0);
		private final Assignment cNomeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNomeIntKeyword_4_0 = (Keyword)cNomeAssignment_4.eContents().get(0);
		private final Assignment cNomeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNomeFloatKeyword_5_0 = (Keyword)cNomeAssignment_5.eContents().get(0);
		private final Assignment cNomeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cNomeLongKeyword_6_0 = (Keyword)cNomeAssignment_6.eContents().get(0);
		private final Assignment cNomeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNomeDoubleKeyword_7_0 = (Keyword)cNomeAssignment_7.eContents().get(0);
		
		//type_specifier:
		//	nome="boolean" | nome="byte" | nome="char" | nome="short" | nome="int" | nome="float" | nome="long" | nome="double";
		@Override public ParserRule getRule() { return rule; }

		//nome="boolean" | nome="byte" | nome="char" | nome="short" | nome="int" | nome="float" | nome="long" | nome="double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//nome="boolean"
		public Assignment getNomeAssignment_0() { return cNomeAssignment_0; }

		//"boolean"
		public Keyword getNomeBooleanKeyword_0_0() { return cNomeBooleanKeyword_0_0; }

		//nome="byte"
		public Assignment getNomeAssignment_1() { return cNomeAssignment_1; }

		//"byte"
		public Keyword getNomeByteKeyword_1_0() { return cNomeByteKeyword_1_0; }

		//nome="char"
		public Assignment getNomeAssignment_2() { return cNomeAssignment_2; }

		//"char"
		public Keyword getNomeCharKeyword_2_0() { return cNomeCharKeyword_2_0; }

		//nome="short"
		public Assignment getNomeAssignment_3() { return cNomeAssignment_3; }

		//"short"
		public Keyword getNomeShortKeyword_3_0() { return cNomeShortKeyword_3_0; }

		//nome="int"
		public Assignment getNomeAssignment_4() { return cNomeAssignment_4; }

		//"int"
		public Keyword getNomeIntKeyword_4_0() { return cNomeIntKeyword_4_0; }

		//nome="float"
		public Assignment getNomeAssignment_5() { return cNomeAssignment_5; }

		//"float"
		public Keyword getNomeFloatKeyword_5_0() { return cNomeFloatKeyword_5_0; }

		//nome="long"
		public Assignment getNomeAssignment_6() { return cNomeAssignment_6; }

		//"long"
		public Keyword getNomeLongKeyword_6_0() { return cNomeLongKeyword_6_0; }

		//nome="double"
		public Assignment getNomeAssignment_7() { return cNomeAssignment_7; }

		//"double"
		public Keyword getNomeDoubleKeyword_7_0() { return cNomeDoubleKeyword_7_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTipoAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTipoType_specifierParserRuleCall_0_0_0 = (RuleCall)cTipoAssignment_0_0.eContents().get(0);
		private final Assignment cTipoAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTipoNameParserRuleCall_0_1_0 = (RuleCall)cTipoAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//type:
		//	(tipo=type_specifier | tipo=name) ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//(tipo=type_specifier | tipo=name) ("[" "]")*
		public Group getGroup() { return cGroup; }

		//tipo=type_specifier | tipo=name
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//tipo=type_specifier
		public Assignment getTipoAssignment_0_0() { return cTipoAssignment_0_0; }

		//type_specifier
		public RuleCall getTipoType_specifierParserRuleCall_0_0_0() { return cTipoType_specifierParserRuleCall_0_0_0; }

		//tipo=name
		public Assignment getTipoAssignment_0_1() { return cTipoAssignment_0_1; }

		//name
		public RuleCall getTipoNameParserRuleCall_0_1_0() { return cTipoNameParserRuleCall_0_1_0; }

		//("[" "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}

	public class MODIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MODIFIER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModificadorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cModificadorPublicKeyword_0_0 = (Keyword)cModificadorAssignment_0.eContents().get(0);
		private final Assignment cModificadorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cModificadorPrivateKeyword_1_0 = (Keyword)cModificadorAssignment_1.eContents().get(0);
		private final Assignment cModificadorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cModificadorProtectedKeyword_2_0 = (Keyword)cModificadorAssignment_2.eContents().get(0);
		private final Assignment cModificadorAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cModificadorStaticKeyword_3_0 = (Keyword)cModificadorAssignment_3.eContents().get(0);
		private final Assignment cModificadorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cModificadorFinalKeyword_4_0 = (Keyword)cModificadorAssignment_4.eContents().get(0);
		private final Assignment cModificadorAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cModificadorNativeKeyword_5_0 = (Keyword)cModificadorAssignment_5.eContents().get(0);
		private final Assignment cModificadorAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cModificadorSynchronizedKeyword_6_0 = (Keyword)cModificadorAssignment_6.eContents().get(0);
		private final Assignment cModificadorAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cModificadorAbstractKeyword_7_0 = (Keyword)cModificadorAssignment_7.eContents().get(0);
		private final Assignment cModificadorAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cModificadorThreadsafeKeyword_8_0 = (Keyword)cModificadorAssignment_8.eContents().get(0);
		private final Assignment cModificadorAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cModificadorTransientKeyword_9_0 = (Keyword)cModificadorAssignment_9.eContents().get(0);
		
		//MODIFIER:
		//	modificador="public" | modificador="private" | modificador="protected" | modificador="static" | modificador="final" |
		//	modificador="native" | modificador="synchronized" | modificador="abstract" | modificador="threadsafe" |
		//	modificador="transient";
		@Override public ParserRule getRule() { return rule; }

		//modificador="public" | modificador="private" | modificador="protected" | modificador="static" | modificador="final" |
		//modificador="native" | modificador="synchronized" | modificador="abstract" | modificador="threadsafe" |
		//modificador="transient"
		public Alternatives getAlternatives() { return cAlternatives; }

		//modificador="public"
		public Assignment getModificadorAssignment_0() { return cModificadorAssignment_0; }

		//"public"
		public Keyword getModificadorPublicKeyword_0_0() { return cModificadorPublicKeyword_0_0; }

		//modificador="private"
		public Assignment getModificadorAssignment_1() { return cModificadorAssignment_1; }

		//"private"
		public Keyword getModificadorPrivateKeyword_1_0() { return cModificadorPrivateKeyword_1_0; }

		//modificador="protected"
		public Assignment getModificadorAssignment_2() { return cModificadorAssignment_2; }

		//"protected"
		public Keyword getModificadorProtectedKeyword_2_0() { return cModificadorProtectedKeyword_2_0; }

		//modificador="static"
		public Assignment getModificadorAssignment_3() { return cModificadorAssignment_3; }

		//"static"
		public Keyword getModificadorStaticKeyword_3_0() { return cModificadorStaticKeyword_3_0; }

		//modificador="final"
		public Assignment getModificadorAssignment_4() { return cModificadorAssignment_4; }

		//"final"
		public Keyword getModificadorFinalKeyword_4_0() { return cModificadorFinalKeyword_4_0; }

		//modificador="native"
		public Assignment getModificadorAssignment_5() { return cModificadorAssignment_5; }

		//"native"
		public Keyword getModificadorNativeKeyword_5_0() { return cModificadorNativeKeyword_5_0; }

		//modificador="synchronized"
		public Assignment getModificadorAssignment_6() { return cModificadorAssignment_6; }

		//"synchronized"
		public Keyword getModificadorSynchronizedKeyword_6_0() { return cModificadorSynchronizedKeyword_6_0; }

		//modificador="abstract"
		public Assignment getModificadorAssignment_7() { return cModificadorAssignment_7; }

		//"abstract"
		public Keyword getModificadorAbstractKeyword_7_0() { return cModificadorAbstractKeyword_7_0; }

		//modificador="threadsafe"
		public Assignment getModificadorAssignment_8() { return cModificadorAssignment_8; }

		//"threadsafe"
		public Keyword getModificadorThreadsafeKeyword_8_0() { return cModificadorThreadsafeKeyword_8_0; }

		//modificador="transient"
		public Assignment getModificadorAssignment_9() { return cModificadorAssignment_9; }

		//"transient"
		public Keyword getModificadorTransientKeyword_9_0() { return cModificadorTransientKeyword_9_0; }
	}
	
	
	private final ModelElements pModel;
	private final Compilation_unitElements pCompilation_unit;
	private final Package_statementElements pPackage_statement;
	private final Import_statementElements pImport_statement;
	private final Type_declarationElements pType_declaration;
	private final Doc_commentElements pDoc_comment;
	private final Class_declarationElements pClass_declaration;
	private final Interface_declarationElements pInterface_declaration;
	private final Field_declarationElements pField_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final ParameterElements pParameter;
	private final Parameter_listElements pParameter_list;
	private final Statement_blockElements pStatement_block;
	private final StatementElements pStatement;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_declaratorElements pVariable_declarator;
	private final Variable_initializerElements pVariable_initializer;
	private final If_statementElements pIf_statement;
	private final Do_statementElements pDo_statement;
	private final While_statementElements pWhile_statement;
	private final For_statementElements pFor_statement;
	private final Try_statementElements pTry_statement;
	private final Switch_statementElements pSwitch_statement;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Static_initializerElements pStatic_initializer;
	private final Creating_expressionElements pCreating_expression;
	private final Exp_auxElements pExp_aux;
	private final ExpressionElements pExpression;
	private final Expression_auxElements pExpression_aux;
	private final Mais_auxElements pMais_aux;
	private final NewBlockElements pNewBlock;
	private final Creating_auxElements pCreating_aux;
	private final AuxElements pAux;
	private final Literal_expressionElements pLiteral_expression;
	private final Logical_expressionElements pLogical_expression;
	private final Bit_expressionElements pBit_expression;
	private final Numeric_expressionElements pNumeric_expression;
	private final ArglistElements pArglist;
	private final NameElements pName;
	private final Package_name_auxElements pPackage_name_aux;
	private final Type_specifierElements pType_specifier;
	private final TypeElements pType;
	private final MODIFIERElements pMODIFIER;
	private final TerminalRule tFLOAT_LITERAL;
	private final TerminalRule tEXPONENT_PART;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tDECIMAL_DIGITS;
	private final TerminalRule tINTEGER_LITERAL;
	private final TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleJavaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCompilation_unit = new Compilation_unitElements();
		this.pPackage_statement = new Package_statementElements();
		this.pImport_statement = new Import_statementElements();
		this.pType_declaration = new Type_declarationElements();
		this.pDoc_comment = new Doc_commentElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pParameter = new ParameterElements();
		this.pParameter_list = new Parameter_listElements();
		this.pStatement_block = new Statement_blockElements();
		this.pStatement = new StatementElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_declarator = new Variable_declaratorElements();
		this.pVariable_initializer = new Variable_initializerElements();
		this.pIf_statement = new If_statementElements();
		this.pDo_statement = new Do_statementElements();
		this.pWhile_statement = new While_statementElements();
		this.pFor_statement = new For_statementElements();
		this.pTry_statement = new Try_statementElements();
		this.pSwitch_statement = new Switch_statementElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pStatic_initializer = new Static_initializerElements();
		this.pCreating_expression = new Creating_expressionElements();
		this.pExp_aux = new Exp_auxElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_aux = new Expression_auxElements();
		this.pMais_aux = new Mais_auxElements();
		this.pNewBlock = new NewBlockElements();
		this.pCreating_aux = new Creating_auxElements();
		this.pAux = new AuxElements();
		this.pLiteral_expression = new Literal_expressionElements();
		this.pLogical_expression = new Logical_expressionElements();
		this.pBit_expression = new Bit_expressionElements();
		this.pNumeric_expression = new Numeric_expressionElements();
		this.pArglist = new ArglistElements();
		this.pName = new NameElements();
		this.pPackage_name_aux = new Package_name_auxElements();
		this.pType_specifier = new Type_specifierElements();
		this.pType = new TypeElements();
		this.pMODIFIER = new MODIFIERElements();
		this.tFLOAT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_LITERAL");
		this.tEXPONENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT_PART");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFFIX");
		this.tDECIMAL_DIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_DIGITS");
		this.tINTEGER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_LITERAL");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.SimpleJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	comp=compilation_unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//compilation_unit:
	//	pacote=package_statement? importes+=import_statement* declaracao+=type_declaration*;
	public Compilation_unitElements getCompilation_unitAccess() {
		return pCompilation_unit;
	}
	
	public ParserRule getCompilation_unitRule() {
		return getCompilation_unitAccess().getRule();
	}

	//package_statement:
	//	"package" noomePacote=name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//import_statement:
	//	"import" nomeImporte=name (".*;" | ";");
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	//type_declaration:
	//	doc_comment? (declaracaoClasse=class_declaration | declaracaoInterface=interface_declaration);
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//doc_comment:
	//	"/ **" comentario=STRING "* /";
	public Doc_commentElements getDoc_commentAccess() {
		return pDoc_comment;
	}
	
	public ParserRule getDoc_commentRule() {
		return getDoc_commentAccess().getRule();
	}

	//class_declaration:
	//	modificadores+=MODIFIER* "class" nomeClasse=IDENTIFIER ("extends" superclasse=name)? ("implements"
	//	implementosClasse+=name ("," implementosClasse+=name)*)? "{" (corpoClasse=field_declaration |
	//	declaracaoClasse=class_declaration)* "}";
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//interface_declaration:
	//	modificadores+=MODIFIER* "interface" nomeInterface=IDENTIFIER ("extends" superinterfaces+=name (","
	//	superinterfaces+=name)*)? "{" corpoInterface=field_declaration* "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//field_declaration:
	//	comentario=doc_comment* (declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration |
	//	declaracaoVariavel=variable_declaration) | estatico=static_initializer | ";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//method_declaration:
	//	modificadorMetodo=MODIFIER* tipoRetorno=type nomeMetodo=IDENTIFIER "(" parametrosMetodo=parameter_list? ")" ("[" "]")*
	//	(blocoMetodo=statement_block | ";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//parameter:
	//	tipoParametro=type nomeParametro=IDENTIFIER ("[" "]")*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//parameter_list:
	//	parametros+=parameter ("," parametros+=parameter)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//statement_block:
	//	"{" corpo=statement* "}";
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	//statement:
	//	-> declaracaoVariavel=variable_declaration | -> expressao=expression ";" | bloco=statement_block |
	//	corpoIf=if_statement | corpoDoWhile=do_statement | corpoWhile=while_statement | corpoFor=for_statement |
	//	corpoTryCatch=try_statement | corpoSwitchCase=switch_statement | "synchronized" "(" expressaoSynchronized=expression
	//	")" corpoSynchronize=statement | "return" return=expression? ";" | "throw" exececao=expression ";" | IDENTIFIER ":" //TODO naum sei o q eh
	//	statement | "break" break=IDENTIFIER? ";" | "continue" continue=IDENTIFIER? ";" | ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//variable_declaration:
	//	modificador=MODIFIER* (tipoVariavel=type | "void")? declaracaoVariaveis+=variable_declarator (","
	//	declaracaoVariaveis+=variable_declarator)* (";" | blocoVariavel=statement_block);
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//variable_declarator:
	//	"(" arglist? //TODO naum sei o q eh
	//	")" | nomeVariavel=IDENTIFIER ("[" "]")* ("=" valorVariavel=variable_initializer)?;
	public Variable_declaratorElements getVariable_declaratorAccess() {
		return pVariable_declarator;
	}
	
	public ParserRule getVariable_declaratorRule() {
		return getVariable_declaratorAccess().getRule();
	}

	//variable_initializer:
	//	expressaoVariavel=expression | "{" (valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)*
	//	","?)? "}";
	public Variable_initializerElements getVariable_initializerAccess() {
		return pVariable_initializer;
	}
	
	public ParserRule getVariable_initializerRule() {
		return getVariable_initializerAccess().getRule();
	}

	//if_statement:
	//	"if" "(" espressaoIf=expression ")" blcoIf=statement => ("else" blocoElse=statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//do_statement:
	//	"do" blocoDo=statement "while" "(" expressaoWhile=expression ")" ";";
	public Do_statementElements getDo_statementAccess() {
		return pDo_statement;
	}
	
	public ParserRule getDo_statementRule() {
		return getDo_statementAccess().getRule();
	}

	//while_statement:
	//	"while" "(" expressaoWhile=expression ")" blocoWhile=statement;
	public While_statementElements getWhile_statementAccess() {
		return pWhile_statement;
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}

	//for_statement:
	//	"for" "(" (=> declaracaoVariavel=variable_declaration | expressaoDeclaracao=expression ";" | ";")
	//	expressaoFor=expression? ";" expressaoIncremento=expression? ")" blocoFor=statement;
	public For_statementElements getFor_statementAccess() {
		return pFor_statement;
	}
	
	public ParserRule getFor_statementRule() {
		return getFor_statementAccess().getRule();
	}

	//try_statement:
	//	"try" blocoTry=statement_block => ("catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block)* => ("finally"
	//	blocoFinally=statement_block)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	//switch_statement:
	//	"switch" "(" expressaoSwitch=expression ")" "{" ("case" expressaoCases+=expression ":" | "default" ":" |
	//	blocoSwitch=statement)* "}";
	public Switch_statementElements getSwitch_statementAccess() {
		return pSwitch_statement;
	}
	
	public ParserRule getSwitch_statementRule() {
		return getSwitch_statementAccess().getRule();
	}

	//constructor_declaration:
	//	modificador=MODIFIER* (tipo=type | "void")? nomeContrutor=IDENTIFIER "(" parametrosContrutor=parameter_list? ")"
	//	blocoConstrutor=statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//static_initializer:
	//	"static" blocoEstatico=statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//creating_expression:
	//	"new" (novoObjeto=name parametros=creating_aux | tipoObjeto=type_specifier -> (parametros=aux)? ("[" "]")* | "("
	//	expressaoNew=expression ")") novo=newBlock*;
	public Creating_expressionElements getCreating_expressionAccess() {
		return pCreating_expression;
	}
	
	public ParserRule getCreating_expressionRule() {
		return getCreating_expressionAccess().getRule();
	}

	//exp_aux:
	//	-> expressao=expression ")" | type ")" expressao=expression;
	public Exp_auxElements getExp_auxAccess() {
		return pExp_aux;
	}
	
	public ParserRule getExp_auxRule() {
		return getExp_auxAccess().getRule();
	}

	//expression:
	//	(tipo=logical_expression | tipo=numeric_expression | tipo=bit_expression | novo=creating_expression |
	//	literal=literal_expression | "null" | "super" | "this" | identificador=IDENTIFIER | "(" exp_aux)
	//	expressoes=expression_aux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//expression_aux:
	//	((("(" parametros=arglist? ")" | aux | "." exp=expression | "," expression | "instanceof" -> name) | -> op=mais_aux
	//	exp=expression | operador=("++" | "--") | (-> op=mais_aux | operador="-" | operador="-=" | operador="*" |
	//	operador="*=" | operador="/" | operador="/=" | operador="%" | operador="%=") exp=expression | (operador=("ampersand" |
	//	"ampersand=" | "|" | "|=" | "^" | "^=" | "ampersand ampersand" | "||=" | "%" | "%=") exp=expression | operador="?"
	//	exp=expression operador=":" exp=expression | operador=(">" | "<" | ">=" | "<=" | "==" | "!=") exp=expression |
	//	operador=(">>=" | "<<" | ">>" | ">>>") exp=expression)) expressoes=expression_aux)?;
	public Expression_auxElements getExpression_auxAccess() {
		return pExpression_aux;
	}
	
	public ParserRule getExpression_auxRule() {
		return getExpression_auxAccess().getRule();
	}

	//mais_aux:
	//	operador="+" | operador="+=";
	public Mais_auxElements getMais_auxAccess() {
		return pMais_aux;
	}
	
	public ParserRule getMais_auxRule() {
		return getMais_auxAccess().getRule();
	}

	//newBlock:
	//	"{" constructor_declaration "}";
	public NewBlockElements getNewBlockAccess() {
		return pNewBlock;
	}
	
	public ParserRule getNewBlockRule() {
		return getNewBlockAccess().getRule();
	}

	//creating_aux:
	//	"(" argumentos=arglist? ")" | -> (aux)? ("[" "]")*;
	public Creating_auxElements getCreating_auxAccess() {
		return pCreating_aux;
	}
	
	public ParserRule getCreating_auxRule() {
		return getCreating_auxAccess().getRule();
	}

	//aux:
	//	"[" espressao=expression "]";
	public AuxElements getAuxAccess() {
		return pAux;
	}
	
	public ParserRule getAuxRule() {
		return getAuxAccess().getRule();
	}

	//literal_expression:
	//	-> decimal=DECIMAL_DIGITS | inteiro=INTEGER_LITERAL | l_float=FLOAT_LITERAL | string=STRING;
	public Literal_expressionElements getLiteral_expressionAccess() {
		return pLiteral_expression;
	}
	
	public ParserRule getLiteral_expressionRule() {
		return getLiteral_expressionAccess().getRule();
	}

	//logical_expression:
	//	operador="!" exp=expression | operador="true" | operador="false";
	public Logical_expressionElements getLogical_expressionAccess() {
		return pLogical_expression;
	}
	
	public ParserRule getLogical_expressionRule() {
		return getLogical_expressionAccess().getRule();
	}

	//bit_expression:
	//	operador="~" expressao=expression;
	public Bit_expressionElements getBit_expressionAccess() {
		return pBit_expression;
	}
	
	public ParserRule getBit_expressionRule() {
		return getBit_expressionAccess().getRule();
	}

	//numeric_expression:
	//	operador=("-" | "++" | "--") expressao=expression;
	public Numeric_expressionElements getNumeric_expressionAccess() {
		return pNumeric_expression;
	}
	
	public ParserRule getNumeric_expressionRule() {
		return getNumeric_expressionAccess().getRule();
	}

	//arglist:
	//	expressoesArgumentos+=expression ("," expressoesArgumentos+=expression)* | "\"" STRING "\"" | tipoParametro+=type
	//	nomeParametro+=IDENTIFIER ("," tipoParametro+=type nomeParametro+=IDENTIFIER)*;
	public ArglistElements getArglistAccess() {
		return pArglist;
	}
	
	public ParserRule getArglistRule() {
		return getArglistAccess().getRule();
	}

	//name:
	//	nome=IDENTIFIER pacote=package_name_aux;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//package_name_aux:
	//	("." nomePacote=IDENTIFIER pacote=package_name_aux)*;
	public Package_name_auxElements getPackage_name_auxAccess() {
		return pPackage_name_aux;
	}
	
	public ParserRule getPackage_name_auxRule() {
		return getPackage_name_auxAccess().getRule();
	}

	//type_specifier:
	//	nome="boolean" | nome="byte" | nome="char" | nome="short" | nome="int" | nome="float" | nome="long" | nome="double";
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//type:
	//	(tipo=type_specifier | tipo=name) ("[" "]")*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//MODIFIER:
	//	modificador="public" | modificador="private" | modificador="protected" | modificador="static" | modificador="final" |
	//	modificador="native" | modificador="synchronized" | modificador="abstract" | modificador="threadsafe" |
	//	modificador="transient";
	public MODIFIERElements getMODIFIERAccess() {
		return pMODIFIER;
	}
	
	public ParserRule getMODIFIERRule() {
		return getMODIFIERAccess().getRule();
	}

	//terminal FLOAT_LITERAL:
	//	("0".."9"+ "." "0".."9"+) (("e" | "E") ("+" | "-")? "0".."9"+)?;
	public TerminalRule getFLOAT_LITERALRule() {
		return tFLOAT_LITERAL;
	} 

	//terminal EXPONENT_PART:
	//	"e" ("+" | "-")? DECIMAL_DIGITS;
	public TerminalRule getEXPONENT_PARTRule() {
		return tEXPONENT_PART;
	} 

	//terminal FLOAT_TYPE_SUFFIX:
	//	"f" | "d";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	} 

	//terminal DECIMAL_DIGITS:
	//	INT;
	public TerminalRule getDECIMAL_DIGITSRule() {
		return tDECIMAL_DIGITS;
	} 

	//terminal INTEGER_LITERAL:
	//	DECIMAL_DIGITS "l"? | ("0x" ("0".."9" | "a".."f")+) "l"?;
	public TerminalRule getINTEGER_LITERALRule() {
		return tINTEGER_LITERAL;
	} 

	//terminal IDENTIFIER:
	//	ID;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
