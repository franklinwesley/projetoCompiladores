/*
 * generated by Xtext
 */
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.SimpleJavaGrammarAccess;

public class SimpleJavaParser extends AbstractContentAssistParser {
	
	@Inject
	private SimpleJavaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalSimpleJavaParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalSimpleJavaParser result = new org.xtext.ui.contentassist.antlr.internal.InternalSimpleJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getImport_statementAccess().getAlternatives_2(), "rule__Import_statement__Alternatives_2");
					put(grammarAccess.getType_declarationAccess().getAlternatives_1(), "rule__Type_declaration__Alternatives_1");
					put(grammarAccess.getClass_declarationAccess().getAlternatives_6(), "rule__Class_declaration__Alternatives_6");
					put(grammarAccess.getField_declarationAccess().getAlternatives(), "rule__Field_declaration__Alternatives");
					put(grammarAccess.getField_declarationAccess().getAlternatives_0_1(), "rule__Field_declaration__Alternatives_0_1");
					put(grammarAccess.getMethod_declarationAccess().getAlternatives_4(), "rule__Method_declaration__Alternatives_4");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getVariable_declarationAccess().getAlternatives_1(), "rule__Variable_declaration__Alternatives_1");
					put(grammarAccess.getVariable_declarationAccess().getAlternatives_4(), "rule__Variable_declaration__Alternatives_4");
					put(grammarAccess.getVariable_declaratorAccess().getAlternatives(), "rule__Variable_declarator__Alternatives");
					put(grammarAccess.getVariable_initializerAccess().getAlternatives(), "rule__Variable_initializer__Alternatives");
					put(grammarAccess.getFor_statementAccess().getAlternatives_2(), "rule__For_statement__Alternatives_2");
					put(grammarAccess.getSwitch_statementAccess().getAlternatives_5(), "rule__Switch_statement__Alternatives_5");
					put(grammarAccess.getConstructor_declarationAccess().getAlternatives_1(), "rule__Constructor_declaration__Alternatives_1");
					put(grammarAccess.getExp_auxAccess().getAlternatives(), "rule__Exp_aux__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives_0(), "rule__Expression__Alternatives_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0(), "rule__Expression_aux__Alternatives_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_0(), "rule__Expression_aux__Alternatives_0_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_2(), "rule__Expression_aux__Alternatives_0_2");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_3_0(), "rule__Expression_aux__Alternatives_0_3_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_4(), "rule__Expression_aux__Alternatives_0_4");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_4_0_0(), "rule__Expression_aux__Alternatives_0_4_0_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_4_2_0(), "rule__Expression_aux__Alternatives_0_4_2_0");
					put(grammarAccess.getExpression_auxAccess().getAlternatives_0_4_3_0(), "rule__Expression_aux__Alternatives_0_4_3_0");
					put(grammarAccess.getMais_auxAccess().getAlternatives(), "rule__Mais_aux__Alternatives");
					put(grammarAccess.getCreating_expressionAccess().getAlternatives_1(), "rule__Creating_expression__Alternatives_1");
					put(grammarAccess.getCreating_auxAccess().getAlternatives(), "rule__Creating_aux__Alternatives");
					put(grammarAccess.getArglistAccess().getAlternatives(), "rule__Arglist__Alternatives");
					put(grammarAccess.getLogical_expressionAccess().getAlternatives(), "rule__Logical_expression__Alternatives");
					put(grammarAccess.getNumeric_expressionAccess().getAlternatives_0(), "rule__Numeric_expression__Alternatives_0");
					put(grammarAccess.getType_specifierAccess().getAlternatives(), "rule__Type_specifier__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives_0(), "rule__Type__Alternatives_0");
					put(grammarAccess.getLiteral_expressionAccess().getAlternatives(), "rule__Literal_expression__Alternatives");
					put(grammarAccess.getMODIFIERAccess().getAlternatives(), "rule__MODIFIER__Alternatives");
					put(grammarAccess.getCompilation_unitAccess().getGroup(), "rule__Compilation_unit__Group__0");
					put(grammarAccess.getPackage_statementAccess().getGroup(), "rule__Package_statement__Group__0");
					put(grammarAccess.getImport_statementAccess().getGroup(), "rule__Import_statement__Group__0");
					put(grammarAccess.getType_declarationAccess().getGroup(), "rule__Type_declaration__Group__0");
					put(grammarAccess.getDoc_commentAccess().getGroup(), "rule__Doc_comment__Group__0");
					put(grammarAccess.getClass_declarationAccess().getGroup(), "rule__Class_declaration__Group__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_3(), "rule__Class_declaration__Group_3__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_4(), "rule__Class_declaration__Group_4__0");
					put(grammarAccess.getClass_declarationAccess().getGroup_4_2(), "rule__Class_declaration__Group_4_2__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup(), "rule__Interface_declaration__Group__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup_3(), "rule__Interface_declaration__Group_3__0");
					put(grammarAccess.getInterface_declarationAccess().getGroup_3_2(), "rule__Interface_declaration__Group_3_2__0");
					put(grammarAccess.getField_declarationAccess().getGroup_0(), "rule__Field_declaration__Group_0__0");
					put(grammarAccess.getMethod_declarationAccess().getGroup(), "rule__Method_declaration__Group__0");
					put(grammarAccess.getMethod_declarationAccess().getGroup_3(), "rule__Method_declaration__Group_3__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
					put(grammarAccess.getParameter_listAccess().getGroup(), "rule__Parameter_list__Group__0");
					put(grammarAccess.getParameter_listAccess().getGroup_1(), "rule__Parameter_list__Group_1__0");
					put(grammarAccess.getStatement_blockAccess().getGroup(), "rule__Statement_block__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_9(), "rule__Statement__Group_9__0");
					put(grammarAccess.getStatementAccess().getGroup_10(), "rule__Statement__Group_10__0");
					put(grammarAccess.getStatementAccess().getGroup_11(), "rule__Statement__Group_11__0");
					put(grammarAccess.getStatementAccess().getGroup_12(), "rule__Statement__Group_12__0");
					put(grammarAccess.getStatementAccess().getGroup_13(), "rule__Statement__Group_13__0");
					put(grammarAccess.getStatementAccess().getGroup_14(), "rule__Statement__Group_14__0");
					put(grammarAccess.getVariable_declarationAccess().getGroup(), "rule__Variable_declaration__Group__0");
					put(grammarAccess.getVariable_declarationAccess().getGroup_3(), "rule__Variable_declaration__Group_3__0");
					put(grammarAccess.getVariable_declaratorAccess().getGroup_0(), "rule__Variable_declarator__Group_0__0");
					put(grammarAccess.getVariable_declaratorAccess().getGroup_1(), "rule__Variable_declarator__Group_1__0");
					put(grammarAccess.getVariable_declaratorAccess().getGroup_1_1(), "rule__Variable_declarator__Group_1_1__0");
					put(grammarAccess.getVariable_declaratorAccess().getGroup_1_2(), "rule__Variable_declarator__Group_1_2__0");
					put(grammarAccess.getVariable_initializerAccess().getGroup_1(), "rule__Variable_initializer__Group_1__0");
					put(grammarAccess.getVariable_initializerAccess().getGroup_1_1(), "rule__Variable_initializer__Group_1_1__0");
					put(grammarAccess.getVariable_initializerAccess().getGroup_1_1_1(), "rule__Variable_initializer__Group_1_1_1__0");
					put(grammarAccess.getIf_statementAccess().getGroup(), "rule__If_statement__Group__0");
					put(grammarAccess.getIf_statementAccess().getGroup_5(), "rule__If_statement__Group_5__0");
					put(grammarAccess.getIf_statementAccess().getGroup_5_0(), "rule__If_statement__Group_5_0__0");
					put(grammarAccess.getDo_statementAccess().getGroup(), "rule__Do_statement__Group__0");
					put(grammarAccess.getWhile_statementAccess().getGroup(), "rule__While_statement__Group__0");
					put(grammarAccess.getFor_statementAccess().getGroup(), "rule__For_statement__Group__0");
					put(grammarAccess.getFor_statementAccess().getGroup_2_1(), "rule__For_statement__Group_2_1__0");
					put(grammarAccess.getTry_statementAccess().getGroup(), "rule__Try_statement__Group__0");
					put(grammarAccess.getTry_statementAccess().getGroup_2(), "rule__Try_statement__Group_2__0");
					put(grammarAccess.getTry_statementAccess().getGroup_2_0(), "rule__Try_statement__Group_2_0__0");
					put(grammarAccess.getTry_statementAccess().getGroup_3(), "rule__Try_statement__Group_3__0");
					put(grammarAccess.getTry_statementAccess().getGroup_3_0(), "rule__Try_statement__Group_3_0__0");
					put(grammarAccess.getSwitch_statementAccess().getGroup(), "rule__Switch_statement__Group__0");
					put(grammarAccess.getSwitch_statementAccess().getGroup_5_0(), "rule__Switch_statement__Group_5_0__0");
					put(grammarAccess.getSwitch_statementAccess().getGroup_5_1(), "rule__Switch_statement__Group_5_1__0");
					put(grammarAccess.getConstructor_declarationAccess().getGroup(), "rule__Constructor_declaration__Group__0");
					put(grammarAccess.getStatic_initializerAccess().getGroup(), "rule__Static_initializer__Group__0");
					put(grammarAccess.getExp_auxAccess().getGroup_0(), "rule__Exp_aux__Group_0__0");
					put(grammarAccess.getExp_auxAccess().getGroup_1(), "rule__Exp_aux__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_9(), "rule__Expression__Group_0_9__0");
					put(grammarAccess.getExpression_auxAccess().getGroup(), "rule__Expression_aux__Group__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_0_0(), "rule__Expression_aux__Group_0_0_0__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_0_2(), "rule__Expression_aux__Group_0_0_2__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_0_3(), "rule__Expression_aux__Group_0_0_3__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_0_4(), "rule__Expression_aux__Group_0_0_4__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_1(), "rule__Expression_aux__Group_0_1__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_3(), "rule__Expression_aux__Group_0_3__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_4_0(), "rule__Expression_aux__Group_0_4_0__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_4_0_0_6(), "rule__Expression_aux__Group_0_4_0_0_6__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_4_1(), "rule__Expression_aux__Group_0_4_1__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_4_2(), "rule__Expression_aux__Group_0_4_2__0");
					put(grammarAccess.getExpression_auxAccess().getGroup_0_4_3(), "rule__Expression_aux__Group_0_4_3__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup(), "rule__Creating_expression__Group__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup_1_0(), "rule__Creating_expression__Group_1_0__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup_1_1(), "rule__Creating_expression__Group_1_1__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup_1_1_1(), "rule__Creating_expression__Group_1_1_1__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup_1_1_2(), "rule__Creating_expression__Group_1_1_2__0");
					put(grammarAccess.getCreating_expressionAccess().getGroup_1_2(), "rule__Creating_expression__Group_1_2__0");
					put(grammarAccess.getNewAccess().getGroup(), "rule__New__Group__0");
					put(grammarAccess.getCreating_auxAccess().getGroup_0(), "rule__Creating_aux__Group_0__0");
					put(grammarAccess.getCreating_auxAccess().getGroup_1(), "rule__Creating_aux__Group_1__0");
					put(grammarAccess.getCreating_auxAccess().getGroup_1_0(), "rule__Creating_aux__Group_1_0__0");
					put(grammarAccess.getCreating_auxAccess().getGroup_1_1(), "rule__Creating_aux__Group_1_1__0");
					put(grammarAccess.getAuxAccess().getGroup(), "rule__Aux__Group__0");
					put(grammarAccess.getArglistAccess().getGroup_0(), "rule__Arglist__Group_0__0");
					put(grammarAccess.getArglistAccess().getGroup_0_1(), "rule__Arglist__Group_0_1__0");
					put(grammarAccess.getArglistAccess().getGroup_1(), "rule__Arglist__Group_1__0");
					put(grammarAccess.getArglistAccess().getGroup_2(), "rule__Arglist__Group_2__0");
					put(grammarAccess.getArglistAccess().getGroup_2_2(), "rule__Arglist__Group_2_2__0");
					put(grammarAccess.getLogical_expressionAccess().getGroup_0(), "rule__Logical_expression__Group_0__0");
					put(grammarAccess.getBit_expressionAccess().getGroup(), "rule__Bit_expression__Group__0");
					put(grammarAccess.getNumeric_expressionAccess().getGroup(), "rule__Numeric_expression__Group__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getPackage_name_auxAccess().getGroup(), "rule__Package_name_aux__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getModelAccess().getCompAssignment(), "rule__Model__CompAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalSimpleJavaParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalSimpleJavaParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SimpleJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SimpleJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
