/*
 * generated by Xtext
 */
package org.xtext.example.validation

import java.io.BufferedWriter
import java.io.File
import java.io.FileWriter
import java.util.ArrayList
import java.util.HashMap
import java.util.List
import java.util.Map
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.validation.Check
import org.xtext.example.simpleJava.arglist
import org.xtext.example.simpleJava.compilation_unit
import org.xtext.example.simpleJava.expression
import org.xtext.example.simpleJava.method_declaration
import org.xtext.example.simpleJava.parameter
import org.xtext.example.simpleJava.parameter_list
import org.xtext.example.simpleJava.statement
import org.xtext.example.simpleJava.type_declaration
import org.xtext.example.simpleJava.variable_declaration
import org.xtext.example.simpleJava.variable_declarator
import org.xtext.example.simpleJava.while_statement
import org.xtext.example.simpleJava.SimpleJavaPackage
import org.xtext.example.simpleJava.interface_declaration
import org.xtext.example.simpleJava.field_declaration
import org.xtext.example.simpleJava.class_declaration
import org.xtext.example.simpleJava.constructor_declaration
import org.xtext.example.simpleJava.variable_initializer
import org.xtext.example.simpleJava.statement_block
import org.xtext.example.simpleJava.expression_aux

//import org.eclipse.xtext.validation.Check
/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SimpleJavaValidator extends AbstractSimpleJavaValidator {

	private final List<Tipo> tipos = new ArrayList<Tipo>();
	private final Map<String, Variavel> variaveis = new HashMap<String, Variavel>();
	private final Map<String, Metodo> metodos = new HashMap<String, Metodo>();

	private final List<Integer> registradores = new ArrayList<Integer>();
	private final List<Integer> labels = new ArrayList<Integer>();

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def runChecks(compilation_unit comp) {
		genStart
		checkType_Declaration(comp.declaracao)
	}
	
	@Check
	def checkType_Declaration(EList<type_declaration> list) {
		for (type_declaration td : list) {
			checkInterfaceDeclaration(td.declaracaoInterface)
			checkClassDeclaration(td.declaracaoClasse)
		}
	}
	
	@Check
	def checkInterfaceDeclaration(interface_declaration id) {
		tipos.add(new Tipo(id.nomeInterface))
		for (field_declaration fd : id.corpoInterface) {
			checkVariableDeclaration(fd.declaracaoVariavel)
		}
	}

	@Check
	def checkVariableDeclaration(variable_declaration vd) {
		var tipoPrimitivo = new Tipo(vd.tipoVariavel.primitivo.nome);
		var tipoObjeto = new Tipo(vd.tipoVariavel.objeto.nome);
		if (!tipos.contains(tipoPrimitivo) && !tipos.contains(tipoObjeto)) {
			// error tipo naum existe
			error("Inexistent type", SimpleJavaPackage.Literals.VARIABLE_DECLARATION__TIPO_VARIAVEL)
		} else {
			// add variavel
			var vars = vd.declaracaoVariaveis;
			for (variable_declarator variable : vars) {
				if (!variaveis.containsKey(variable.nomeVariavel)) {
					if (tipoPrimitivo != null) {
						var variavel = new Variavel(variable.nomeVariavel, tipoPrimitivo);
						variaveis.put(variable.nomeVariavel, variavel);
					} else {
						var variavel = new Variavel(variable.nomeVariavel, tipoObjeto);
						variaveis.put(variable.nomeVariavel, variavel);
					}
					if (variable.op != null) {
						checkVariableInitializer(variable.valorVariavel)
						genDeclarationVariableCode(variable)
					}
				} else {
					// erro variavel ja existe
					error("Variable alredy exist", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL)
				}
			}
		}
	}

	@Check
	def checkVariableInitializer(variable_initializer vi) {
		var vars = vi.valorVariaveis
		if (vars != null) {
			for (variable_initializer newvi : vars) {
				checkVariableInitializer(newvi)
			}
		} else {
			checkExp(vi.expressaoVariavel)
		}
	}

	@Check
	def checkExp(expression exp) {
		if (isBooleanExp(exp)) {
			checkBoolean(exp)
			genExpCode(exp)
		} else if (isLiteral(exp)) {
			checkLiterals(exp)
		} else if (isArimeticExp(exp)) {
			checkAritmetic(exp)
			genExpCode(exp)
		} else if (isVariable(exp)) {
			checkVariableUsed(exp)
			genUseVariableCode(exp)
		} else if (isMethod(exp)) {
			checkMethodUsed(exp)
			genUseMethodCode(exp.identificador, "#16")
		} else if (isAtribuicao(exp)) {
			checkAttribution(exp)
			genExpCode(exp)
		}
	}
	
	@Check
	def checkClassDeclaration(class_declaration cd) {
		var tipo = new Tipo(cd.nomeClasse)
		tipos.add(tipo)
		for (class_declaration newcd : cd.declaracaoClasse) {
			checkClassDeclaration(newcd)
		}
		for (field_declaration fd : cd.corpoClasse) {
			checkVariableDeclaration(fd.declaracaoVariavel)
			checkMethodDeclaration(fd.declaracaoMetodo)
			checkConstructorDeclaration(cd.nomeClasse, fd.declaracaoConstrutor)
		}
	}
	
	@Check
	def checkConstructorDeclaration(String nameClass, constructor_declaration cd) {
		var tipo = new Tipo(nameClass)
		if (nameClass.equals(cd.nomeContrutor)) {
			metodos.put(cd.nomeContrutor, new Metodo(cd.nomeContrutor, tipo, getparametros(cd.parametrosContrutor)));
		} else {
			error("Invalid constructor name", SimpleJavaPackage.Literals.CONSTRUCTOR_DECLARATION__NOME_CONTRUTOR)
		}
	}

	@Check
	def checkMethodDeclaration(method_declaration md) {
		var tipoPrimitivo = new Tipo(md.tipoRetorno.primitivo.nome);
		var tipoObjeto = new Tipo(md.tipoRetorno.objeto.nome);
		if (!tipos.contains(tipoPrimitivo) && !tipos.contains(tipoObjeto)) {
			// error tipo naum existe
			error("Inexistent type", SimpleJavaPackage.Literals.METHOD_DECLARATION__TIPO_RETORNO)
		} else {
			if (!metodos.containsKey(md.nomeMetodo)) {
				if (tipoPrimitivo != null) {
					var metodo = new Metodo(md.nomeMetodo, tipoPrimitivo, getparametros(md.parametrosMetodo))
					metodos.put(md.nomeMetodo, metodo)
				} else {
					var metodo = new Metodo(md.nomeMetodo, tipoPrimitivo, getparametros(md.parametrosMetodo))
					metodos.put(md.nomeMetodo, metodo)
				}
				if (md.blocoMetodo != null) {
					checkStatementBlock(md.blocoMetodo)
				}
			} else {
				error("Method already exists", SimpleJavaPackage.Literals.METHOD_DECLARATION__NOME_METODO)
			}
		}
	}

	@Check
	def checkStatementBlock(statement_block sb) {
		for (statement s : sb.corpo) {
			checkStatement(s)
		}
	}

	@Check
	def checkStatement(statement s) {
		if (s.corpoWhile != null) {
			checkWhile(s.corpoWhile)
		} else if (s.declaracaoVariavel != null) {
			checkDeclaracaoVariavel(s.declaracaoVariavel)
		} else if (s.expressao != null) {
			checkExp(s.expressao)
		}
	}
	
	@Check
	def checkWhile(while_statement statement) {
		if (!isBooleanExp(statement.expressaoWhile)) {
			// erro expressao invalida
			error("Invalid expression", SimpleJavaPackage.Literals.WHILE_STATEMENT__EXPRESSAO_WHILE)
		} else {
			checkStatement(statement.blocoWhile)
			genWhileCode(statement)
		}
	}
	
	@Check
	def checkBoolean(expression expression) {
		// checar espressao booleana
		var metodo = metodos.get(expression.identificador);
		var variavel = variaveis.get(expression.identificador);
		if (expression.logical.operador != null || (metodo != null && metodo.tipoRetorno.nome.equals("boolean")) ||
			(variavel != null && variavel.tipo.nome.equals("boolean"))) {
			if ((expression.logical.operador != "!" || !isBooleanExp(expression.logical.exp)) &&
				(expression.logical.operador != "true" && expression.logical.operador != "false")) {
				error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL)
			}
			if ((metodo == null || !metodo.tipoRetorno.nome.equals("boolean")) ||
				(variavel == null && !variavel.tipo.nome.equals("boolean"))) {
				error("Invalid type", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
			}
			checkBooleanExpAux(expression.expressoes)
		}
		return false
	}

	@Check
	def checkBooleanExpAux(expression_aux exp) {
		if (exp.operador != "&" && exp.operador != "^=" && exp.operador != "&=" && exp.operador != "||" &&
			exp.operador != "&&" && exp.operador != "|" && exp.operador != "||=" && exp.operador != "|=" &&
			exp.operador != "%" && exp.operador != "^" && exp.operador != "%=") {
			error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR)
		} else {
			checkBooleanAux(exp.exp)
		}
	}

	@Check
	def checkBooleanAux (expression exp) {
		var metodo = metodos.get(exp.identificador);
		var variavel = variaveis.get(exp.identificador);
		if ((metodo == null || !metodo.tipoRetorno.nome.equals("boolean")) ||
			(variavel == null || !variavel.tipo.nome.equals("boolean"))) {
			if (exp.logical.operador == null) {
				error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL)
			} else {
				error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
			}
		}
	}

	@Check
	def checkLiterals(expression expression) {
		// check literais
		if (expression.literal.inteiro == null && expression.literal.string == null) {
			if (expression.logical == null) {
				error("Invalid literal", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL)
			} else {
				error("Invalid literal", SimpleJavaPackage.Literals.EXPRESSION__LITERAL)
			}
		}
	}

	@Check
	def checkVariableUsed(expression exp) {
		if (!variaveis.containsKey(exp.identificador)) {
			// erro variavel nao exite
			error("Inexistent variable", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
		}
	}

	@Check
	def checkMethodUsed(expression exp) {
		if (metodos.containsKey(exp.identificador)) {
			var m = metodos.get(exp.identificador);
			if (exp.expressoes.parametros == null || !verificaParametros(m, exp.expressoes.parametros)) {
				// erro parametros errados
				error("Invalid parameters", SimpleJavaPackage.Literals.EXPRESSION_AUX__PARAMETROS)
			}
		} else {
			// erro metodo inexistente
			error("inexistent method", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
		}
	}

	@Check
	def checkAttribution(expression exp) {
		if (!variaveis.containsKey(exp.identificador)) {
			error("inexistent variable", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
		} else if (exp.exp.novo == null) {
			error("inexistent command", SimpleJavaPackage.Literals.EXPRESSION__NOVO)
		} else {
			checkAttributionExpAux(exp.expressoes)
		}
	}

	@Check
	def checkAttributionExpAux(expression_aux exp) {
		if (exp.operador != "^=" && exp.operador != "*=" && exp.operador != "-=" && exp.operador != "||=" &&
			exp.operador != "|=" && exp.operador != "/=" && exp.operador != "%=" && exp.operador != "&=") {
			error("inexistent operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR)
		}
	}

	@Check
	def checkAritmetic(expression expression) {
		// checar espressao aritimetrica
		var metodo = metodos.get(expression.identificador);
		var variavel = variaveis.get(expression.identificador);
		if (expression.literal.decimal == null && expression.literal.inteiro == null &&
			expression.literal.l_float == null) {
			error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LITERAL)
		} else if ((metodo == null || !metodo.tipoRetorno.nome.equals("int")) &&
			(variavel == null || !variavel.tipo.nome.equals("int")) &&
			(metodo == null || !metodo.tipoRetorno.nome.equals("float")) &&
			(variavel == null || !variavel.tipo.nome.equals("float")) &&
			(metodo == null || !metodo.tipoRetorno.nome.equals("long")) &&
			(variavel == null || !variavel.tipo.nome.equals("long")) &&
			(metodo == null || !metodo.tipoRetorno.nome.equals("double")) &&
			(variavel == null || !variavel.tipo.nome.equals("double"))) {
			error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
		} else {
			checkAritmeticExpAux(expression.expressoes)
		}
	}

	@Check
	def checkAritmeticExpAux(expression_aux exp) {
		if (exp.op == null && exp.operador != "++" && exp.operador != "--" && exp.operador != "-" &&
			exp.operador != "-=" && exp.operador != "*" && exp.operador != "*=" && exp.operador != "/" &&
			exp.operador != "/=" && exp.operador != "%" && exp.operador != "%=") {
			error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR)
		} else {
			checkAritmeticAux(exp.exp)
		}
	}

	@Check
	def checkAritmeticAux(expression exp) {
		var m = metodos.get(exp.identificador);
		var v = variaveis.get(exp.identificador);
		if ((m != null && m.tipoRetorno.nome.equals("int")) ||
			(v != null && v.tipo.nome.equals("int")) || (m != null && m.tipoRetorno.nome.equals("float")) ||
			(v != null && v.tipo.nome.equals("float")) || (m != null && m.tipoRetorno.nome.equals("long")) ||
			(v != null && v.tipo.nome.equals("long")) || (m != null && m.tipoRetorno.nome.equals("double")) ||
			(v != null && v.tipo.nome.equals("double"))) {
			if (exp.literal.decimal == null && exp.literal.inteiro == null &&
				exp.literal.l_float == null) {
				error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LITERAL)
			} else {
				error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR)
			}
		}
	}

	def boolean isMethod(expression exp) {
		if (metodos.containsKey(exp.identificador)) {
			return true;
		}
		return false
	}

	def Map<String, Tipo> getparametros(arglist list) {
		var p = new HashMap<String, Tipo>();
		var i = 0
		while (i < list.tipoParametro.length) {
			p.put(list.nomeParametro.get(i), new Tipo(String.valueOf(list.tipoParametro.get(i))));
			i++;
		}
		return p;
	}

	def boolean verificaParametros(Metodo metodo, arglist arglist) {
		if (metodo.parametros.equals(getparametros(arglist))) {
			return true;
		} else {
			return false;
		}
	}

	def getTipo(expression expression) {
		if (expression.logical != null) {
			return new Tipo("boolean");
		} else if (expression.literal.decimal != null) {
			return new Tipo("double");
		} else if (expression.literal.inteiro != null) {
			return new Tipo("int");
		} else if (expression.literal.l_float != null) {
			return new Tipo("float");
		} else if (expression.literal.string != null) {
			return new Tipo("String");
		} else if (expression.identificador != null) {
			if (variaveis.containsKey(expression.identificador)) {
				return variaveis.get(expression.identificador).tipo
			} else {
				return metodos.get(expression.identificador).tipoRetorno
			}
		}
	}

	def Map<String, Tipo> getparametros(parameter_list list) {
		var p = new HashMap<String, Tipo>();
		for (parameter parametro : list.parametros) {
			p.put(parametro.nomeParametro, new Tipo(String.valueOf(parametro.tipoParametro.tipo)));
			variaveis.put(parametro.nomeParametro,
				new Variavel(parametro.nomeParametro, new Tipo(String.valueOf(parametro.tipoParametro.tipo))))
		}
		return p;
	}
	
	@Check
	def checkDeclaracaoVariavel(variable_declaration declaration) {
		var tipoPrimitivo = new Tipo(declaration.tipoVariavel.primitivo.nome);
		var tipoObjeto = new Tipo(declaration.tipoVariavel.objeto.nome);
		if (!tipos.contains(tipoPrimitivo) || !tipos.contains(tipoObjeto)) {
			// error tipo naum existe
			error("Inexistent type", SimpleJavaPackage.Literals.VARIABLE_DECLARATION__TIPO_VARIAVEL)
		} else {
			// add variavel
			var vars = declaration.declaracaoVariaveis;
			for (variable_declarator variable : vars) {
				if (tipoPrimitivo != null) {
					checkVariableDeclarator(variable, tipoPrimitivo)
				} else if (tipoObjeto != null) {
					checkVariableDeclarator(variable, tipoObjeto)
					
				}
			}
		}
	}
	
	@Check
	def checkVariableDeclarator (variable_declarator vd, Tipo tipo) {
		var variavel = new Variavel(vd.nomeVariavel, tipo);
		if (!variaveis.containsKey(vd.nomeVariavel)) {
			variaveis.put(vd.nomeVariavel, variavel);
			genDeclarationVariableCode(vd)
		} else {
			// erro variavel ja existe
			error("Variable alredy exist", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL)
		}
	}

	// Auxiliares
	def boolean isArimeticExp(expression expression) {
		var metodo = metodos.get(expression.identificador);
		var variavel = variaveis.get(expression.identificador);
		if (expression.literal.decimal != null || expression.literal.inteiro != null ||
			expression.literal.l_float != null || (metodo != null && metodo.tipoRetorno.nome.equals("int")) ||
			(variavel != null && variavel.tipo.nome.equals("int")) ||
			(metodo != null && metodo.tipoRetorno.nome.equals("float")) ||
			(variavel != null && variavel.tipo.nome.equals("float")) ||
			(metodo != null && metodo.tipoRetorno.nome.equals("long")) ||
			(variavel != null && variavel.tipo.nome.equals("long")) ||
			(metodo != null && metodo.tipoRetorno.nome.equals("double")) ||
			(variavel != null && variavel.tipo.nome.equals("double"))) {
			if (expression.expressoes.op != null || expression.expressoes.operador == "++" ||
				expression.expressoes.operador == "--" || expression.expressoes.operador == "-" ||
				expression.expressoes.operador == "-=" || expression.expressoes.operador == "*" ||
				expression.expressoes.operador == "*=" || expression.expressoes.operador == "/" ||
				expression.expressoes.operador == "/=" || expression.expressoes.operador == "%" ||
				expression.expressoes.operador == "%=" || expression.numeric != null) {
				var m = metodos.get(expression.exp.identificador);
				var v = variaveis.get(expression.exp.identificador);
				if (expression.exp.literal.decimal != null || expression.exp.literal.inteiro != null ||
					expression.exp.literal.l_float != null || (m != null && m.tipoRetorno.nome.equals("int")) ||
					(v != null && v.tipo.nome.equals("int")) || (m != null && m.tipoRetorno.nome.equals("float")) ||
					(v != null && v.tipo.nome.equals("float")) || (m != null && m.tipoRetorno.nome.equals("long")) ||
					(v != null && v.tipo.nome.equals("long")) || (m != null && m.tipoRetorno.nome.equals("double")) ||
					(v != null && v.tipo.nome.equals("double"))) {
					return true
				}
			}
		}
		return false
	}

	def boolean isBooleanExp(expression expression) {
		var metodo = metodos.get(expression.identificador);
		var variavel = variaveis.get(expression.identificador);
		if (expression.logical.operador != null || (metodo != null && metodo.tipoRetorno.nome.equals("boolean")) ||
			(variavel != null && variavel.tipo.nome.equals("boolean"))) {
			if ((expression.logical.operador == "!" && isBooleanExp(expression.logical.exp)) ||
				(expression.logical.operador == "true" || expression.logical.operador == "false")) {
				return true
			}
			if ((metodo != null && metodo.tipoRetorno.nome.equals("boolean")) ||
				(variavel != null && variavel.tipo.nome.equals("boolean"))) {
				return true
			}
			if (expression.expressoes.operador == "&" || expression.expressoes.operador == "^=" ||
				expression.expressoes.operador == "&=" || expression.expressoes.operador == "||" ||
				expression.expressoes.operador == "&&" || expression.expressoes.operador == "|" ||
				expression.expressoes.operador == "||=" || expression.expressoes.operador == "|=" ||
				expression.expressoes.operador == "%" || expression.expressoes.operador == "^" ||
				expression.expressoes.operador == "%=") {
				var m = metodos.get(expression.exp.identificador);
				var v = variaveis.get(expression.exp.identificador);
				if (expression.exp.logical.operador != null || (m != null && m.tipoRetorno.nome.equals("boolean")) ||
					(v != null && v.tipo.nome.equals("boolean"))) {
					return true
				}
			}
			if (expression.expressoes.operador == "?" && expression.expressoes.exp.expressoes.operador == ":") {
				return true
			}
		}
		return false
	}

	def boolean isVariable(expression expression) {
		if (variaveis.containsKey(expression.identificador)) {
			return true;
		}
		return false
	}

	def boolean isLiteral(expression expression) {
		if (expression.literal != null || expression.logical.operador != "!") {
			return true
		}
		return false
	}

	def boolean isAtribuicao(expression expression) {
		if (variaveis.containsKey(expression.identificador)) {
			if (expression.expressoes.operador == "^=" || expression.expressoes.operador == "*=" ||
				expression.expressoes.operador == "-=" || expression.expressoes.operador == "||=" ||
				expression.expressoes.operador == "|=" || expression.expressoes.operador == "/=" ||
				expression.expressoes.operador == "%=" || expression.expressoes.operador == "&=") {
				return true
			}
		} else if (expression.exp.novo != null) {
			return true
		}
		return false
	}

	//Geração de codigo
	def load(String end1, String end2) {
		salvarArquivo("LD " + end1 + ", " + end2)
	}

	def load(String end1, String end2, String deslocamento) {
		salvarArquivo("LD " + end1 + ", " + end2 + "(" + deslocamento + ")")
	}

	def storeRight(String end1, String end2, String deslocamento) {
		salvarArquivo("ST " + end1 + ", " + end2 + "(" + deslocamento + ")")
	}

	def storeLeft(String end1, String end2, String deslocamento) {
		salvarArquivo("ST " + end1 + "(" + deslocamento + ")" + ", " + end2)
	}

	def store(String end1, String end2) {
		salvarArquivo("ST " + end1 + ", " + end2)
	}

	def DesvioIncod(String label) {
		salvarArquivo("BR " + label)
	}

	def DesvioCond(String op, String end, String label) {
		if (op.equals("maior")) {
			salvarArquivo("BGTZ " + end + ", " + label)
		} else if (op.equals("menor")) {
			salvarArquivo("BLTZ " + end + ", " + label)
		} else if (op.equals("igual")) {
			salvarArquivo("BETZ " + end + ", " + label)
		}
	}

	def op(String op, String dest, String end1, String end2) {
		if (op.equals("soma")) {
			salvarArquivo("ADD " + dest + ", " + end1 + ", " + end2)
		} else if (op.equals("subtracao")) {
			salvarArquivo("SUB " + dest + ", " + end1 + ", " + end2)
		} else if (op.equals("multplicacao")) {
			salvarArquivo("MULT " + dest + ", " + end1 + ", " + end2)
		} else if (op.equals("divisao")) {
			salvarArquivo("DIV " + dest + ", " + end1 + ", " + end2)
		}
	}

	def salvarArquivo(String s) {
		var arquivo = new File("/home/franklin/teste.txt");
		var fw = new FileWriter(arquivo, true);
		var bw = new BufferedWriter(fw);
		bw.write(s);
		bw.newLine();
		bw.close();
		fw.close();
	}

	def genCodeOP(expression exp, String op) {
		if (exp.literal.decimal != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, "r1", exp.literal.decimal, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, "r1", exp.literal.decimal, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, "r1", exp.literal.decimal, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp)
				op(op, "r1", exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.literal.inteiro != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, "r1", exp.literal.inteiro, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, "r1", exp.literal.inteiro, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, "r1", exp.literal.inteiro, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp)
				op(op, "r1", exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.literal.l_float != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, "r1", exp.literal.l_float, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, "r1", exp.literal.l_float, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, "r1", exp.literal.l_float, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp)
				op(op, "r1", exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.exp.identificador != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, "r1", exp.identificador, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, "r1", exp.identificador, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, "r1", exp.identificador, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp)
				op(op, "r1", exp.identificador, "r" + registradores.get(registradores.size - 1))
			}
		}
	}

	def genCodeOP(expression exp, String op, String r) {
		if (exp.literal.decimal != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, r, exp.literal.decimal, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, r, exp.literal.decimal, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, r, exp.literal.decimal, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp, r)
				op(op, r, exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.literal.inteiro != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, r, exp.literal.inteiro, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, r, exp.literal.inteiro, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, r, exp.literal.inteiro, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp, r)
				op(op, r, exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.literal.l_float != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, r, exp.literal.l_float, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, r, exp.literal.l_float, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, r, exp.literal.l_float, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp, r)
				op(op, r, exp.literal.decimal, "r" + registradores.get(registradores.size - 1))
			}
		} else if (exp.exp.identificador != null) {
			if (exp.exp.literal.decimal != null) {
				op(op, r, exp.identificador, exp.exp.literal.decimal)
			} else if (exp.exp.literal.inteiro != null) {
				op(op, r, exp.identificador, exp.exp.literal.inteiro)
			} else if (exp.exp.literal.l_float != null) {
				op(op, r, exp.identificador, exp.exp.literal.l_float)
			} else if (exp.exp.identificador != null) {
				genUseVariableCode(exp.exp, r)
				op(op, r, exp.identificador, "r" + registradores.get(registradores.size - 1))
			}
		}
	}

	def genAritmeticExpCode(expression exp) {
		if (isArimeticExp(exp)) {
			if (exp.operador != null) {
				if (exp.operador.equals("+")) {
					genCodeOP(exp, "soma")
				} else {
					genCodeOP(exp.exp, "soma")
					store(exp.identificador, "r1")
				}
			} else {
				if (exp.operador.equals("-")) {
					genCodeOP(exp, "subtracao")
				} else if (exp.operador.equals("*")) {
					genCodeOP(exp, "multplicacao")
				} else if (exp.operador.equals("/")) {
					genCodeOP(exp, "divisao")
				} else if (exp.operador.equals("-")) {
					genCodeOP(exp, "subtracao")
				} else if (exp.operador.equals("++")) {
					if (exp.literal.decimal != null) {
						op("mais", "r1", exp.literal.decimal, "1")
					} else if (exp.literal.inteiro != null) {
						op("mais", "r1", exp.literal.inteiro, "1")
					} else if (exp.literal.l_float != null) {
						op("mais", "r1", exp.literal.l_float, "1")
					}
				} else if (exp.operador.equals("--")) {
					if (exp.literal.decimal != null) {
						op("menos", "r1", exp.literal.decimal, "1")
					} else if (exp.literal.inteiro != null) {
						op("menos", "r1", exp.literal.inteiro, "1")
					} else if (exp.literal.l_float != null) {
						op("menos", "r1", exp.literal.l_float, "1")
					}
				} else if (exp.operador.equals("-=")) {
					genCodeOP(exp.exp, "menos")
					store(exp.identificador, "r1")
				} else if (exp.operador.equals("*=")) {
					genCodeOP(exp.exp, "multiplicacao")
					store(exp.identificador, "r1")
				} else if (exp.operador.equals("/=")) {
					genCodeOP(exp.exp, "divisao")
					store(exp.identificador, "r1")
				}
			// TODO falta % e %=
			}
		}
	}
	
	def genAritmeticExpCode(expression exp, String r) {
		if (isArimeticExp(exp)) {
			if (exp.operador != null) {
				if (exp.operador.equals("+")) {
					genCodeOP(exp, "soma", r)
				} else {
					genCodeOP(exp.exp, "soma", r)
					store(exp.identificador, r)
				}
			} else {
				if (exp.operador.equals("-")) {
					genCodeOP(exp, "subtracao", r)
				} else if (exp.operador.equals("*")) {
					genCodeOP(exp, "multplicacao", r)
				} else if (exp.operador.equals("/")) {
					genCodeOP(exp, "divisao", r)
				} else if (exp.operador.equals("-")) {
					genCodeOP(exp, "subtracao", r)
				} else if (exp.operador.equals("++")) {
					if (exp.literal.decimal != null) {
						op("mais", r, exp.literal.decimal, "1")
					} else if (exp.literal.inteiro != null) {
						op("mais", r, exp.literal.inteiro, "1")
					} else if (exp.literal.l_float != null) {
						op("mais", r, exp.literal.l_float, "1")
					}
				} else if (exp.operador.equals("--")) {
					if (exp.literal.decimal != null) {
						op("menos", r, exp.literal.decimal, "1")
					} else if (exp.literal.inteiro != null) {
						op("menos", r, exp.literal.inteiro, "1")
					} else if (exp.literal.l_float != null) {
						op("menos", r, exp.literal.l_float, "1")
					}
				} else if (exp.operador.equals("-=")) {
					genCodeOP(exp.exp, "menos", r)
					store(exp.identificador, r)
				} else if (exp.operador.equals("*=")) {
					genCodeOP(exp.exp, "multiplicacao", r)
					store(exp.identificador, r)
				} else if (exp.operador.equals("/=")) {
					genCodeOP(exp.exp, "divisao", r)
					store(exp.identificador, r)
				}
			// TODO falta % e %=
			}
		}
	}
	
	def genBooleanExpCode(expression exp) {
		if (isBooleanExp(exp)) {
			if (exp.logical.operador.equals("!")) {
				
			} else if (exp.logical.operador.equals("true")) {
				
			} else if (exp.logical.operador.equals("false")) {
				
			} else if (exp.operador.equals("&") || exp.operador.equals("&&")) {
				var r1 = register
				var r2 = register
				genExpCode(exp, r1)
				genExpCode(exp.exp, r2)
				salvarArquivo("AND " + r1 + r2)
			} else if (exp.operador.equals("&=")) {
				
			} else if (exp.operador.equals("|") || exp.operador.equals("||")) {
				
			} else if (exp.operador.equals("|=") || exp.operador.equals("||=")) {
				
			} else if (exp.operador.equals("^")) {
				
			} else if (exp.operador.equals("^=")) {
				
			} 
			// TODO falta % e %=
		}
	}

	def genBooleanExpCode(expression exp, String r) {
		if (isBooleanExp(exp)) {
			if (exp.logical.operador.equals("!")) {
				
			} else if (exp.logical.operador.equals("true")) {
				
			} else if (exp.logical.operador.equals("false")) {
				
			} else if (exp.operador.equals("&") || exp.operador.equals("&&")) {
				var r1 = register
				var r2 = register
				genExpCode(exp, r1)
				genExpCode(exp.exp, r2)
				salvarArquivo("AND " + r1 + r2)
			} else if (exp.operador.equals("&=")) {
				
			} else if (exp.operador.equals("|") || exp.operador.equals("||")) {
				
			} else if (exp.operador.equals("|=") || exp.operador.equals("||=")) {
				
			} else if (exp.operador.equals("^")) {
				
			} else if (exp.operador.equals("^=")) {
				
			} 
			// TODO falta % e %=
		}
	}

	def genExpCode(expression exp, String r) {
		if (isBooleanExp(exp)) {
			genBooleanExpCode(exp, r)
		} else if (isArimeticExp(exp)) {
			genAritmeticExpCode(exp, r)
		} else if (isAtribuicao(exp)) {
			genAttCode(exp.identificador, exp.exp, r)
		}
	}

	def genExpCode(expression exp) {
		if (isBooleanExp(exp)) {
			genBooleanExpCode(exp)
		} else if (isArimeticExp(exp)) {
			genAritmeticExpCode(exp)
		} else if (isAtribuicao(exp)) {
			genAttCode(exp.identificador, exp.exp)
		}
	}

	def genWhileCode(while_statement loop) {
		var nextLabel = labels.get(labels.size - 1) + 1
		var label = "label" + nextLabel
		genExpCode(loop.expressaoWhile)
		label(label)
		var proxLabel = nextLabel + 1
		var label2 = "label" + proxLabel
		DesvioCond("BETZ", "r2", label2)
		genStatementCode(loop.blocoWhile)
		DesvioIncod(label)
		label(label)
	}

	def genSPIncCode(String tamanho) {
		salvarArquivo("ADD SP, SP, " + tamanho)
	}

	def genSPDecCode(String tamanho) {
		salvarArquivo("SUB SP, SP, " + tamanho)
	}

	def genUseMethodCode(String metodo, String tamanho) {
		genSPIncCode(tamanho)
		var nextLabel = labels.get(labels.size - 1) + 1
		var label = "label" + nextLabel
		store("*SP", label)
		DesvioIncod(metodo)
		label(label)
		genSPDecCode(tamanho)
	}

	def genStatementCode(statement st) {
		if (st.expressao != null) {
			genExpCode(st.expressao)
		} else if (st.declaracaoVariavel != null) {
			for (variable_declarator vd : st.declaracaoVariavel.declaracaoVariaveis) {
				genDeclarationVariableCode(vd)
			}
		}
//		} else if (st.corpoWhile != null) {
//			genWhileCode(st.corpoWhile)
//		}
	}

	def label(String name) {
		salvarArquivo(name + ":")
	}

	def genStart() {
		load("SP", "#600")
	}

	def genAttCode(String name, expression exp) {
		if (isAtribuicao(exp)) {
			genExpCode(exp)
			store(name, "r1")
		}
	}

	def genAttCode(String name, expression exp, String r) {
		if (isAtribuicao(exp)) {
			genExpCode(exp, r)
			store(name, "r1")
		}
	}

	def genUseVariableCode(expression exp) {
		if (isVariable(exp)) {
			if (registradores.isEmpty) {
				load("r10", exp.identificador)
				registradores.add(10)
			} else {
				load(getRegister(), exp.identificador)
			}
		}
	}
	
	def genUseVariableCode(expression exp, String r) {
		if (isVariable(exp)) {
			load(r, exp.identificador)
		}
	}

	def genDeclarationVariableCode(variable_declarator vd) {
		genExpCode(vd.valorVariavel.expressaoVariavel)
		store(vd.nomeVariavel, "r1")
	}

	def String getRegister() {
		var ultimo = registradores.get(registradores.size - 1)
		var registrador = ultimo + 1
		return "r" + registrador
	}
}