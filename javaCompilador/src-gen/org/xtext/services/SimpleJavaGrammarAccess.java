/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleJavaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	"Hello" name=ID "!";
		@Override public ParserRule getRule() { return rule; }

		//"Hello" name=ID "!"
		public Group getGroup() { return cGroup; }

		//"Hello"
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}

	public class Package_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "package_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackage_name_auxParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//package_name:
		//	IDENTIFIER package_name_aux;
		@Override public ParserRule getRule() { return rule; }

		//IDENTIFIER package_name_aux
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//package_name_aux
		public RuleCall getPackage_name_auxParserRuleCall_1() { return cPackage_name_auxParserRuleCall_1; }
	}

	public class Package_name_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "package_name_aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPackage_name_auxParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//package_name_aux:
		//	("." IDENTIFIER package_name_aux)?;
		@Override public ParserRule getRule() { return rule; }

		//("." IDENTIFIER package_name_aux)?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }

		//package_name_aux
		public RuleCall getPackage_name_auxParserRuleCall_2() { return cPackage_name_auxParserRuleCall_2; }
	}

	public class Class_interface_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "class_interface_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPackage_nameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//class_interface_name:
		//	IDENTIFIER | package_name "." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }

		//IDENTIFIER | package_name "." IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//package_name "." IDENTIFIER
		public Group getGroup_1() { return cGroup_1; }

		//package_name
		public RuleCall getPackage_nameParserRuleCall_1_0() { return cPackage_nameParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_2() { return cIDENTIFIERTerminalRuleCall_1_2; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPackage_nameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//package_statement:
		//	"package" package_name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" package_name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//package_name
		public RuleCall getPackage_nameParserRuleCall_1() { return cPackage_nameParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cPackage_nameParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final RuleCall cClass_interface_nameParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//import_statement:
		//	"import" (package_name "." "*" ";" | class_interface_name) ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" (package_name "." "*" ";" | class_interface_name) ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package_name "." "*" ";" | class_interface_name
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//package_name "." "*" ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//package_name
		public RuleCall getPackage_nameParserRuleCall_1_0_0() { return cPackage_nameParserRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_2() { return cAsteriskKeyword_1_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_1_1() { return cClass_interface_nameParserRuleCall_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final RuleCall cClass_interface_nameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//type_specifier:
		//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | class_interface_name;
		@Override public ParserRule getRule() { return rule; }

		//"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | class_interface_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"float"
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"double"
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_8() { return cClass_interface_nameParserRuleCall_8; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cType_specifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//type:
		//	type_specifier ("[" "]")?;
		@Override public ParserRule getRule() { return rule; }

		//type_specifier ("[" "]")?
		public Group getGroup() { return cGroup; }

		//type_specifier
		public RuleCall getType_specifierParserRuleCall_0() { return cType_specifierParserRuleCall_0; }

		//("[" "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//parameter:
		//	type IDENTIFIER ("[" "]")?;
		@Override public ParserRule getRule() { return rule; }

		//type IDENTIFIER ("[" "]")?
		public Group getGroup() { return cGroup; }

		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }

		//("[" "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//parameter_list:
		//	parameter ("," parameter)?;
		@Override public ParserRule getRule() { return rule; }

		//parameter ("," parameter)?
		public Group getGroup() { return cGroup; }

		//parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }

		//("," parameter)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameter
		public RuleCall getParameterParserRuleCall_1_1() { return cParameterParserRuleCall_1_1; }
	}

	public class Doc_commentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "doc_comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusAsteriskAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//doc_comment:
		//	"/ **" "... text ..." "* /";
		@Override public ParserRule getRule() { return rule; }

		//"/ **" "... text ..." "* /"
		public Group getGroup() { return cGroup; }

		//"/ **"
		public Keyword getSolidusAsteriskAsteriskKeyword_0() { return cSolidusAsteriskAsteriskKeyword_0; }

		//"... text ..."
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//"* /"
		public Keyword getAsteriskSolidusKeyword_2() { return cAsteriskSolidusKeyword_2; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMODIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cField_declarationParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//class_declaration:
		//	MODIFIER? "class" IDENTIFIER ("extends" class_interface_name)? ("implements" class_interface_name (","
		//	class_interface_name)?)? "{" field_declaration? "}";
		@Override public ParserRule getRule() { return rule; }

		//MODIFIER? "class" IDENTIFIER ("extends" class_interface_name)? ("implements" class_interface_name (","
		//class_interface_name)?)? "{" field_declaration? "}"
		public Group getGroup() { return cGroup; }

		//MODIFIER?
		public RuleCall getMODIFIERTerminalRuleCall_0() { return cMODIFIERTerminalRuleCall_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }

		//("extends" class_interface_name)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_3_1() { return cClass_interface_nameParserRuleCall_3_1; }

		//("implements" class_interface_name ("," class_interface_name)?)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_4_1() { return cClass_interface_nameParserRuleCall_4_1; }

		//("," class_interface_name)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_4_2_1() { return cClass_interface_nameParserRuleCall_4_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//field_declaration?
		public RuleCall getField_declarationParserRuleCall_6() { return cField_declarationParserRuleCall_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDoc_commentParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cMethod_declarationParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cConstructor_declarationParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cVariable_declarationParserRuleCall_0_1_2 = (RuleCall)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cStatic_initializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//field_declaration:
		//	doc_comment? (method_declaration | constructor_declaration | variable_declaration) | static_initializer | ";";
		@Override public ParserRule getRule() { return rule; }

		//doc_comment? (method_declaration | constructor_declaration | variable_declaration) | static_initializer | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//doc_comment? (method_declaration | constructor_declaration | variable_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//doc_comment?
		public RuleCall getDoc_commentParserRuleCall_0_0() { return cDoc_commentParserRuleCall_0_0; }

		//method_declaration | constructor_declaration | variable_declaration
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//method_declaration
		public RuleCall getMethod_declarationParserRuleCall_0_1_0() { return cMethod_declarationParserRuleCall_0_1_0; }

		//constructor_declaration
		public RuleCall getConstructor_declarationParserRuleCall_0_1_1() { return cConstructor_declarationParserRuleCall_0_1_1; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_0_1_2() { return cVariable_declarationParserRuleCall_0_1_2; }

		//static_initializer
		public RuleCall getStatic_initializerParserRuleCall_1() { return cStatic_initializerParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatement_blockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//static_initializer:
		//	"static" statement_block;
		@Override public ParserRule getRule() { return rule; }

		//"static" statement_block
		public Group getGroup() { return cGroup; }

		//"static"
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//statement_block
		public RuleCall getStatement_blockParserRuleCall_1() { return cStatement_blockParserRuleCall_1; }
	}

	public class Modifier_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modifier_aux");
		private final RuleCall cMODIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//modifier_aux:
		//	MODIFIER?;
		@Override public ParserRule getRule() { return rule; }

		//MODIFIER?
		public RuleCall getMODIFIERTerminalRuleCall() { return cMODIFIERTerminalRuleCall; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifier_auxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cParameter_listParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cStatement_blockParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//constructor_declaration:
		//	modifier_aux IDENTIFIER "(" parameter_list? ")" statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modifier_aux IDENTIFIER "(" parameter_list? ")" statement_block
		public Group getGroup() { return cGroup; }

		//modifier_aux
		public RuleCall getModifier_auxParserRuleCall_0() { return cModifier_auxParserRuleCall_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameter_list?
		public RuleCall getParameter_listParserRuleCall_3() { return cParameter_listParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statement_block
		public RuleCall getStatement_blockParserRuleCall_5() { return cStatement_blockParserRuleCall_5; }
	}

	public class Method_variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "method_variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMODIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cMethod_declarationParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cVariable_declarationParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//method_variable_declaration:
		//	MODIFIER? type IDENTIFIER (method_declaration | variable_declaration);
		@Override public ParserRule getRule() { return rule; }

		//MODIFIER? type IDENTIFIER (method_declaration | variable_declaration)
		public Group getGroup() { return cGroup; }

		//MODIFIER?
		public RuleCall getMODIFIERTerminalRuleCall_0() { return cMODIFIERTerminalRuleCall_0; }

		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }

		//method_declaration | variable_declaration
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//method_declaration
		public RuleCall getMethod_declarationParserRuleCall_3_0() { return cMethod_declarationParserRuleCall_3_0; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_3_1() { return cVariable_declarationParserRuleCall_3_1; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cParameter_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cStatement_blockParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//method_declaration:
		//	"(" parameter_list? ")" ("[" "]")? (statement_block | ";");
		@Override public ParserRule getRule() { return rule; }

		//"(" parameter_list? ")" ("[" "]")? (statement_block | ";")
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//parameter_list?
		public RuleCall getParameter_listParserRuleCall_1() { return cParameter_listParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//("[" "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1() { return cRightSquareBracketKeyword_3_1; }

		//statement_block | ";"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//statement_block
		public RuleCall getStatement_blockParserRuleCall_4_0() { return cStatement_blockParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//statement_block:
		//	"{" statement? "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" statement? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statement?
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//if_statement:
		//	"if" "(" expression ")" statement ("else" statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" expression ")" statement ("else" statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement
		public RuleCall getStatementParserRuleCall_4() { return cStatementParserRuleCall_4; }

		//("else" statement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//statement
		public RuleCall getStatementParserRuleCall_5_1() { return cStatementParserRuleCall_5_1; }
	}

	public class Do_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "do_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//do_statement:
		//	"do" statement "while" "(" expression ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" statement "while" "(" expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression
		public RuleCall getExpressionParserRuleCall_4() { return cExpressionParserRuleCall_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//while_statement:
		//	"while" "(" expression ")" statement;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" expression ")" statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement
		public RuleCall getStatementParserRuleCall_4() { return cStatementParserRuleCall_4; }
	}

	public class For_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cVariable_declarationParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cExpressionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cStatementParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//for_statement:
		//	"for" "(" (variable_declaration | expression ";" | ";") expression? ";" expression? ";" ")" statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" (variable_declaration | expression ";" | ";") expression? ";" expression? ";" ")" statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable_declaration | expression ";" | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_2_0() { return cVariable_declarationParserRuleCall_2_0; }

		//expression ";"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2_1_0() { return cExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//expression?
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expression?
		public RuleCall getExpressionParserRuleCall_5() { return cExpressionParserRuleCall_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//statement
		public RuleCall getStatementParserRuleCall_8() { return cStatementParserRuleCall_8; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//try_statement:
		//	"try" statement ("catch" "(" parameter ")" statement)? ("finally" statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" statement ("catch" "(" parameter ")" statement)? ("finally" statement)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }

		//("catch" "(" parameter ")" statement)?
		public Group getGroup_2() { return cGroup_2; }

		//"catch"
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//parameter
		public RuleCall getParameterParserRuleCall_2_2() { return cParameterParserRuleCall_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//statement
		public RuleCall getStatementParserRuleCall_2_4() { return cStatementParserRuleCall_2_4; }

		//("finally" statement)?
		public Group getGroup_3() { return cGroup_3; }

		//"finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//statement
		public RuleCall getStatementParserRuleCall_3_1() { return cStatementParserRuleCall_3_1; }
	}

	public class Switch_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "switch_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCaseKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_5_0_1 = (RuleCall)cGroup_5_0.eContents().get(1);
		private final Keyword cColonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cDefaultKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//switch_statement:
		//	"switch" "(" expression ")" "{" ("case" expression ":" | "default" ":" | statement) "}";
		@Override public ParserRule getRule() { return rule; }

		//"switch" "(" expression ")" "{" ("case" expression ":" | "default" ":" | statement) "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"case" expression ":" | "default" ":" | statement
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"case" expression ":"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"case"
		public Keyword getCaseKeyword_5_0_0() { return cCaseKeyword_5_0_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_5_0_1() { return cExpressionParserRuleCall_5_0_1; }

		//":"
		public Keyword getColonKeyword_5_0_2() { return cColonKeyword_5_0_2; }

		//"default" ":"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"default"
		public Keyword getDefaultKeyword_5_1_0() { return cDefaultKeyword_5_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }

		//statement
		public RuleCall getStatementParserRuleCall_5_2() { return cStatementParserRuleCall_5_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariable_declarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cStatement_blockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIf_statementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDo_statementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWhile_statementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFor_statementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTry_statementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSwitch_statementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cSynchronizedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_9_4 = (RuleCall)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cReturnKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cThrowKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Keyword cSemicolonKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final RuleCall cIDENTIFIERTerminalRuleCall_12_0 = (RuleCall)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_12_2 = (RuleCall)cGroup_12.eContents().get(2);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cBreakKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Keyword cSemicolonKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Keyword cContinueKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_14_1 = (RuleCall)cGroup_14.eContents().get(1);
		private final Keyword cSemicolonKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//statement:
		//	variable_declaration | expression ";" | statement_block | if_statement | do_statement | while_statement |
		//	for_statement | try_statement | switch_statement | "synchronized" "(" expression ")" statement | "return" expression?
		//	";" | "throw" expression ";" | IDENTIFIER ":" statement | "break" IDENTIFIER? ";" | "continue" IDENTIFIER? ";" | ";";
		@Override public ParserRule getRule() { return rule; }

		//variable_declaration | expression ";" | statement_block | if_statement | do_statement | while_statement | for_statement
		//| try_statement | switch_statement | "synchronized" "(" expression ")" statement | "return" expression? ";" | "throw"
		//expression ";" | IDENTIFIER ":" statement | "break" IDENTIFIER? ";" | "continue" IDENTIFIER? ";" | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_0() { return cVariable_declarationParserRuleCall_0; }

		//expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//statement_block
		public RuleCall getStatement_blockParserRuleCall_2() { return cStatement_blockParserRuleCall_2; }

		//if_statement
		public RuleCall getIf_statementParserRuleCall_3() { return cIf_statementParserRuleCall_3; }

		//do_statement
		public RuleCall getDo_statementParserRuleCall_4() { return cDo_statementParserRuleCall_4; }

		//while_statement
		public RuleCall getWhile_statementParserRuleCall_5() { return cWhile_statementParserRuleCall_5; }

		//for_statement
		public RuleCall getFor_statementParserRuleCall_6() { return cFor_statementParserRuleCall_6; }

		//try_statement
		public RuleCall getTry_statementParserRuleCall_7() { return cTry_statementParserRuleCall_7; }

		//switch_statement
		public RuleCall getSwitch_statementParserRuleCall_8() { return cSwitch_statementParserRuleCall_8; }

		//"synchronized" "(" expression ")" statement
		public Group getGroup_9() { return cGroup_9; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_9_0() { return cSynchronizedKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_9_2() { return cExpressionParserRuleCall_9_2; }

		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }

		//statement
		public RuleCall getStatementParserRuleCall_9_4() { return cStatementParserRuleCall_9_4; }

		//"return" expression? ";"
		public Group getGroup_10() { return cGroup_10; }

		//"return"
		public Keyword getReturnKeyword_10_0() { return cReturnKeyword_10_0; }

		//expression?
		public RuleCall getExpressionParserRuleCall_10_1() { return cExpressionParserRuleCall_10_1; }

		//";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//"throw" expression ";"
		public Group getGroup_11() { return cGroup_11; }

		//"throw"
		public Keyword getThrowKeyword_11_0() { return cThrowKeyword_11_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_11_1() { return cExpressionParserRuleCall_11_1; }

		//";"
		public Keyword getSemicolonKeyword_11_2() { return cSemicolonKeyword_11_2; }

		//IDENTIFIER ":" statement
		public Group getGroup_12() { return cGroup_12; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_12_0() { return cIDENTIFIERTerminalRuleCall_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//statement
		public RuleCall getStatementParserRuleCall_12_2() { return cStatementParserRuleCall_12_2; }

		//"break" IDENTIFIER? ";"
		public Group getGroup_13() { return cGroup_13; }

		//"break"
		public Keyword getBreakKeyword_13_0() { return cBreakKeyword_13_0; }

		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_13_1() { return cIDENTIFIERTerminalRuleCall_13_1; }

		//";"
		public Keyword getSemicolonKeyword_13_2() { return cSemicolonKeyword_13_2; }

		//"continue" IDENTIFIER? ";"
		public Group getGroup_14() { return cGroup_14; }

		//"continue"
		public Keyword getContinueKeyword_14_0() { return cContinueKeyword_14_0; }

		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_14_1() { return cIDENTIFIERTerminalRuleCall_14_1; }

		//";"
		public Keyword getSemicolonKeyword_14_2() { return cSemicolonKeyword_14_2; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cVariable_initializerParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cVariable_initializerParserRuleCall_1_1_2_1 = (RuleCall)cGroup_1_1_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//variable_declaration:
		//	(("[" "]")? ("=" variable_initializer)) ("," (IDENTIFIER ("[" "]")? ("=" variable_initializer)?))? ";";
		@Override public ParserRule getRule() { return rule; }

		//(("[" "]")? ("=" variable_initializer)) ("," (IDENTIFIER ("[" "]")? ("=" variable_initializer)?))? ";"
		public Group getGroup() { return cGroup; }

		//("[" "]")? ("=" variable_initializer)
		public Group getGroup_0() { return cGroup_0; }

		//("[" "]")?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_0() { return cLeftSquareBracketKeyword_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_0_1() { return cRightSquareBracketKeyword_0_0_1; }

		//"=" variable_initializer
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }

		//variable_initializer
		public RuleCall getVariable_initializerParserRuleCall_0_1_1() { return cVariable_initializerParserRuleCall_0_1_1; }

		//("," (IDENTIFIER ("[" "]")? ("=" variable_initializer)?))?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//IDENTIFIER ("[" "]")? ("=" variable_initializer)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1_0() { return cIDENTIFIERTerminalRuleCall_1_1_0; }

		//("[" "]")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_0() { return cLeftSquareBracketKeyword_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_1() { return cRightSquareBracketKeyword_1_1_1_1; }

		//("=" variable_initializer)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_2_0() { return cEqualsSignKeyword_1_1_2_0; }

		//variable_initializer
		public RuleCall getVariable_initializerParserRuleCall_1_1_2_1() { return cVariable_initializerParserRuleCall_1_1_2_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Variable_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cVariable_initializerParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cVariable_initializerParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//variable_initializer:
		//	expression | "{" (variable_initializer ("," variable_initializer)? ","?)? "}";
		@Override public ParserRule getRule() { return rule; }

		//expression | "{" (variable_initializer ("," variable_initializer)? ","?)? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//"{" (variable_initializer ("," variable_initializer)? ","?)? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(variable_initializer ("," variable_initializer)? ","?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//variable_initializer
		public RuleCall getVariable_initializerParserRuleCall_1_1_0() { return cVariable_initializerParserRuleCall_1_1_0; }

		//("," variable_initializer)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//variable_initializer
		public RuleCall getVariable_initializerParserRuleCall_1_1_1_1() { return cVariable_initializerParserRuleCall_1_1_1_1; }

		//","?
		public Keyword getCommaKeyword_1_1_2() { return cCommaKeyword_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLiteral_expressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpression_auxParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNullKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpression_auxParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSuperKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpression_auxParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cThisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpression_auxParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cIDENTIFIERTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cExpression_auxParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cExpression_auxParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final RuleCall cExpression_auxParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cFullStopKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cExpression_auxParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final RuleCall cExpression_auxParserRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cInstanceofKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final RuleCall cExpression_auxParserRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		
		//expression: //      numeric_expression expression_aux
		////      | testing_expression expression_aux
		////      | logical_expression expression_aux
		////      | string_expression expression_aux
		////      | bit_expression expression_aux
		////      | casting_expression expression_aux
		////      | creating_expression expression_aux
		//	literal_expression expression_aux | "null" expression_aux | "super" expression_aux | "this" expression_aux | IDENTIFIER
		//	expression_aux | "(" expression ")" expression_aux | "[" expression "]" expression_aux | "." expression expression_aux
		//	| "," expression expression_aux | "instanceof" class_interface_name expression_aux;
		@Override public ParserRule getRule() { return rule; }

		////      numeric_expression expression_aux
		////      | testing_expression expression_aux
		////      | logical_expression expression_aux
		////      | string_expression expression_aux
		////      | bit_expression expression_aux
		////      | casting_expression expression_aux
		////      | creating_expression expression_aux
		//literal_expression expression_aux | "null" expression_aux | "super" expression_aux | "this" expression_aux | IDENTIFIER
		//expression_aux | "(" expression ")" expression_aux | "[" expression "]" expression_aux | "." expression expression_aux
		//| "," expression expression_aux | "instanceof" class_interface_name expression_aux
		public Alternatives getAlternatives() { return cAlternatives; }

		////      numeric_expression expression_aux
		////      | testing_expression expression_aux
		////      | logical_expression expression_aux
		////      | string_expression expression_aux
		////      | bit_expression expression_aux
		////      | casting_expression expression_aux
		////      | creating_expression expression_aux
		//literal_expression expression_aux
		public Group getGroup_0() { return cGroup_0; }

		////      numeric_expression expression_aux
		////      | testing_expression expression_aux
		////      | logical_expression expression_aux
		////      | string_expression expression_aux
		////      | bit_expression expression_aux
		////      | casting_expression expression_aux
		////      | creating_expression expression_aux
		//literal_expression
		public RuleCall getLiteral_expressionParserRuleCall_0_0() { return cLiteral_expressionParserRuleCall_0_0; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_0_1() { return cExpression_auxParserRuleCall_0_1; }

		//"null" expression_aux
		public Group getGroup_1() { return cGroup_1; }

		//"null"
		public Keyword getNullKeyword_1_0() { return cNullKeyword_1_0; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_1_1() { return cExpression_auxParserRuleCall_1_1; }

		//"super" expression_aux
		public Group getGroup_2() { return cGroup_2; }

		//"super"
		public Keyword getSuperKeyword_2_0() { return cSuperKeyword_2_0; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_2_1() { return cExpression_auxParserRuleCall_2_1; }

		//"this" expression_aux
		public Group getGroup_3() { return cGroup_3; }

		//"this"
		public Keyword getThisKeyword_3_0() { return cThisKeyword_3_0; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_3_1() { return cExpression_auxParserRuleCall_3_1; }

		//IDENTIFIER expression_aux
		public Group getGroup_4() { return cGroup_4; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_4_0() { return cIDENTIFIERTerminalRuleCall_4_0; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_4_1() { return cExpression_auxParserRuleCall_4_1; }

		//"(" expression ")" expression_aux
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_5_1() { return cExpressionParserRuleCall_5_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_5_3() { return cExpression_auxParserRuleCall_5_3; }

		//"[" expression "]" expression_aux
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_6_3() { return cExpression_auxParserRuleCall_6_3; }

		//"." expression expression_aux
		public Group getGroup_7() { return cGroup_7; }

		//"."
		public Keyword getFullStopKeyword_7_0() { return cFullStopKeyword_7_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_7_1() { return cExpressionParserRuleCall_7_1; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_7_2() { return cExpression_auxParserRuleCall_7_2; }

		//"," expression expression_aux
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_8_1() { return cExpressionParserRuleCall_8_1; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_8_2() { return cExpression_auxParserRuleCall_8_2; }

		//"instanceof" class_interface_name expression_aux
		public Group getGroup_9() { return cGroup_9; }

		//"instanceof"
		public Keyword getInstanceofKeyword_9_0() { return cInstanceofKeyword_9_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_9_1() { return cClass_interface_nameParserRuleCall_9_1; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_9_2() { return cExpression_auxParserRuleCall_9_2; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifier_auxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cClass_interface_nameParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cField_declarationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//interface_declaration:
		//	modifier_aux "interface" IDENTIFIER ("extends" class_interface_name ("," class_interface_name)?)? "{"
		//	field_declaration? "}";
		@Override public ParserRule getRule() { return rule; }

		//modifier_aux "interface" IDENTIFIER ("extends" class_interface_name ("," class_interface_name)?)? "{" field_declaration?
		//"}"
		public Group getGroup() { return cGroup; }

		//modifier_aux
		public RuleCall getModifier_auxParserRuleCall_0() { return cModifier_auxParserRuleCall_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }

		//("extends" class_interface_name ("," class_interface_name)?)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_3_1() { return cClass_interface_nameParserRuleCall_3_1; }

		//("," class_interface_name)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//class_interface_name
		public RuleCall getClass_interface_nameParserRuleCall_3_2_1() { return cClass_interface_nameParserRuleCall_3_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//field_declaration?
		public RuleCall getField_declarationParserRuleCall_5() { return cField_declarationParserRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ArglistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arglist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//arglist:
		//	expression ("," expression)?;
		@Override public ParserRule getRule() { return rule; }

		//expression ("," expression)?
		public Group getGroup() { return cGroup; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//("," expression)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}

	public class Expression_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cArglistParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpression_auxParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//expression_aux:
		//	("(" arglist? ")" expression_aux)?;
		@Override public ParserRule getRule() { return rule; }

		//("(" arglist? ")" expression_aux)?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//arglist?
		public RuleCall getArglistParserRuleCall_1() { return cArglistParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression_aux
		public RuleCall getExpression_auxParserRuleCall_3() { return cExpression_auxParserRuleCall_3; }
	}

	public class Literal_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGER_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOAT_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCHARACTERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//literal_expression:
		//	INTEGER_LITERAL | FLOAT_LITERAL | STRING | CHARACTER;
		@Override public ParserRule getRule() { return rule; }

		//INTEGER_LITERAL | FLOAT_LITERAL | STRING | CHARACTER
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER_LITERAL
		public RuleCall getINTEGER_LITERALTerminalRuleCall_0() { return cINTEGER_LITERALTerminalRuleCall_0; }

		//FLOAT_LITERAL
		public RuleCall getFLOAT_LITERALTerminalRuleCall_1() { return cFLOAT_LITERALTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//CHARACTER
		public RuleCall getCHARACTERTerminalRuleCall_3() { return cCHARACTERTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final Package_nameElements pPackage_name;
	private final Package_name_auxElements pPackage_name_aux;
	private final Class_interface_nameElements pClass_interface_name;
	private final Package_statementElements pPackage_statement;
	private final Import_statementElements pImport_statement;
	private final Type_specifierElements pType_specifier;
	private final TypeElements pType;
	private final ParameterElements pParameter;
	private final Parameter_listElements pParameter_list;
	private final Doc_commentElements pDoc_comment;
	private final Class_declarationElements pClass_declaration;
	private final Field_declarationElements pField_declaration;
	private final Static_initializerElements pStatic_initializer;
	private final Modifier_auxElements pModifier_aux;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Method_variable_declarationElements pMethod_variable_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final Statement_blockElements pStatement_block;
	private final If_statementElements pIf_statement;
	private final Do_statementElements pDo_statement;
	private final While_statementElements pWhile_statement;
	private final For_statementElements pFor_statement;
	private final Try_statementElements pTry_statement;
	private final Switch_statementElements pSwitch_statement;
	private final StatementElements pStatement;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_initializerElements pVariable_initializer;
	private final ExpressionElements pExpression;
	private final Interface_declarationElements pInterface_declaration;
	private final ArglistElements pArglist;
	private final Expression_auxElements pExpression_aux;
	private final Literal_expressionElements pLiteral_expression;
	private final TerminalRule tSTRING;
	private final TerminalRule tCHARACTER;
	private final TerminalRule tFLOAT_LITERAL;
	private final TerminalRule tDECIMAL_DIGITS;
	private final TerminalRule tEXPONENT_PART;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tINTEGER_LITERAL;
	private final TerminalRule tMODIFIER;
	private final TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleJavaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pPackage_name = new Package_nameElements();
		this.pPackage_name_aux = new Package_name_auxElements();
		this.pClass_interface_name = new Class_interface_nameElements();
		this.pPackage_statement = new Package_statementElements();
		this.pImport_statement = new Import_statementElements();
		this.pType_specifier = new Type_specifierElements();
		this.pType = new TypeElements();
		this.pParameter = new ParameterElements();
		this.pParameter_list = new Parameter_listElements();
		this.pDoc_comment = new Doc_commentElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pStatic_initializer = new Static_initializerElements();
		this.pModifier_aux = new Modifier_auxElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pMethod_variable_declaration = new Method_variable_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pStatement_block = new Statement_blockElements();
		this.pIf_statement = new If_statementElements();
		this.pDo_statement = new Do_statementElements();
		this.pWhile_statement = new While_statementElements();
		this.pFor_statement = new For_statementElements();
		this.pTry_statement = new Try_statementElements();
		this.pSwitch_statement = new Switch_statementElements();
		this.pStatement = new StatementElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_initializer = new Variable_initializerElements();
		this.pExpression = new ExpressionElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pArglist = new ArglistElements();
		this.pExpression_aux = new Expression_auxElements();
		this.pLiteral_expression = new Literal_expressionElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER");
		this.tFLOAT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_LITERAL");
		this.tDECIMAL_DIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_DIGITS");
		this.tEXPONENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT_PART");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFFIX");
		this.tINTEGER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_LITERAL");
		this.tMODIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MODIFIER");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.SimpleJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Hello" name=ID "!";
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//package_name:
	//	IDENTIFIER package_name_aux;
	public Package_nameElements getPackage_nameAccess() {
		return pPackage_name;
	}
	
	public ParserRule getPackage_nameRule() {
		return getPackage_nameAccess().getRule();
	}

	//package_name_aux:
	//	("." IDENTIFIER package_name_aux)?;
	public Package_name_auxElements getPackage_name_auxAccess() {
		return pPackage_name_aux;
	}
	
	public ParserRule getPackage_name_auxRule() {
		return getPackage_name_auxAccess().getRule();
	}

	//class_interface_name:
	//	IDENTIFIER | package_name "." IDENTIFIER;
	public Class_interface_nameElements getClass_interface_nameAccess() {
		return pClass_interface_name;
	}
	
	public ParserRule getClass_interface_nameRule() {
		return getClass_interface_nameAccess().getRule();
	}

	//package_statement:
	//	"package" package_name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//import_statement:
	//	"import" (package_name "." "*" ";" | class_interface_name) ";";
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	//type_specifier:
	//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | class_interface_name;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//type:
	//	type_specifier ("[" "]")?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//parameter:
	//	type IDENTIFIER ("[" "]")?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//parameter_list:
	//	parameter ("," parameter)?;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//doc_comment:
	//	"/ **" "... text ..." "* /";
	public Doc_commentElements getDoc_commentAccess() {
		return pDoc_comment;
	}
	
	public ParserRule getDoc_commentRule() {
		return getDoc_commentAccess().getRule();
	}

	//class_declaration:
	//	MODIFIER? "class" IDENTIFIER ("extends" class_interface_name)? ("implements" class_interface_name (","
	//	class_interface_name)?)? "{" field_declaration? "}";
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//field_declaration:
	//	doc_comment? (method_declaration | constructor_declaration | variable_declaration) | static_initializer | ";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//static_initializer:
	//	"static" statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//modifier_aux:
	//	MODIFIER?;
	public Modifier_auxElements getModifier_auxAccess() {
		return pModifier_aux;
	}
	
	public ParserRule getModifier_auxRule() {
		return getModifier_auxAccess().getRule();
	}

	//constructor_declaration:
	//	modifier_aux IDENTIFIER "(" parameter_list? ")" statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//method_variable_declaration:
	//	MODIFIER? type IDENTIFIER (method_declaration | variable_declaration);
	public Method_variable_declarationElements getMethod_variable_declarationAccess() {
		return pMethod_variable_declaration;
	}
	
	public ParserRule getMethod_variable_declarationRule() {
		return getMethod_variable_declarationAccess().getRule();
	}

	//method_declaration:
	//	"(" parameter_list? ")" ("[" "]")? (statement_block | ";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//statement_block:
	//	"{" statement? "}";
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	//if_statement:
	//	"if" "(" expression ")" statement ("else" statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//do_statement:
	//	"do" statement "while" "(" expression ")" ";";
	public Do_statementElements getDo_statementAccess() {
		return pDo_statement;
	}
	
	public ParserRule getDo_statementRule() {
		return getDo_statementAccess().getRule();
	}

	//while_statement:
	//	"while" "(" expression ")" statement;
	public While_statementElements getWhile_statementAccess() {
		return pWhile_statement;
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}

	//for_statement:
	//	"for" "(" (variable_declaration | expression ";" | ";") expression? ";" expression? ";" ")" statement;
	public For_statementElements getFor_statementAccess() {
		return pFor_statement;
	}
	
	public ParserRule getFor_statementRule() {
		return getFor_statementAccess().getRule();
	}

	//try_statement:
	//	"try" statement ("catch" "(" parameter ")" statement)? ("finally" statement)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	//switch_statement:
	//	"switch" "(" expression ")" "{" ("case" expression ":" | "default" ":" | statement) "}";
	public Switch_statementElements getSwitch_statementAccess() {
		return pSwitch_statement;
	}
	
	public ParserRule getSwitch_statementRule() {
		return getSwitch_statementAccess().getRule();
	}

	//statement:
	//	variable_declaration | expression ";" | statement_block | if_statement | do_statement | while_statement |
	//	for_statement | try_statement | switch_statement | "synchronized" "(" expression ")" statement | "return" expression?
	//	";" | "throw" expression ";" | IDENTIFIER ":" statement | "break" IDENTIFIER? ";" | "continue" IDENTIFIER? ";" | ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//variable_declaration:
	//	(("[" "]")? ("=" variable_initializer)) ("," (IDENTIFIER ("[" "]")? ("=" variable_initializer)?))? ";";
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//variable_initializer:
	//	expression | "{" (variable_initializer ("," variable_initializer)? ","?)? "}";
	public Variable_initializerElements getVariable_initializerAccess() {
		return pVariable_initializer;
	}
	
	public ParserRule getVariable_initializerRule() {
		return getVariable_initializerAccess().getRule();
	}

	//expression: //      numeric_expression expression_aux
	////      | testing_expression expression_aux
	////      | logical_expression expression_aux
	////      | string_expression expression_aux
	////      | bit_expression expression_aux
	////      | casting_expression expression_aux
	////      | creating_expression expression_aux
	//	literal_expression expression_aux | "null" expression_aux | "super" expression_aux | "this" expression_aux | IDENTIFIER
	//	expression_aux | "(" expression ")" expression_aux | "[" expression "]" expression_aux | "." expression expression_aux
	//	| "," expression expression_aux | "instanceof" class_interface_name expression_aux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//interface_declaration:
	//	modifier_aux "interface" IDENTIFIER ("extends" class_interface_name ("," class_interface_name)?)? "{"
	//	field_declaration? "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//arglist:
	//	expression ("," expression)?;
	public ArglistElements getArglistAccess() {
		return pArglist;
	}
	
	public ParserRule getArglistRule() {
		return getArglistAccess().getRule();
	}

	//expression_aux:
	//	("(" arglist? ")" expression_aux)?;
	public Expression_auxElements getExpression_auxAccess() {
		return pExpression_aux;
	}
	
	public ParserRule getExpression_auxRule() {
		return getExpression_auxAccess().getRule();
	}

	//literal_expression:
	//	INTEGER_LITERAL | FLOAT_LITERAL | STRING | CHARACTER;
	public Literal_expressionElements getLiteral_expressionAccess() {
		return pLiteral_expression;
	}
	
	public ParserRule getLiteral_expressionRule() {
		return getLiteral_expressionAccess().getRule();
	}

	//terminal STRING:
	//	"\'\'" CHARACTER? "\'\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	////TODO ajeitar 
	//terminal CHARACTER:
	//	"based on the unicode character set";
	public TerminalRule getCHARACTERRule() {
		return tCHARACTER;
	} 

	//terminal FLOAT_LITERAL:
	//	DECIMAL_DIGITS "." DECIMAL_DIGITS? EXPONENT_PART? FLOAT_TYPE_SUFFIX? | "." DECIMAL_DIGITS EXPONENT_PART?
	//	FLOAT_TYPE_SUFFIX? | DECIMAL_DIGITS EXPONENT_PART? DECIMAL_DIGITS?;
	public TerminalRule getFLOAT_LITERALRule() {
		return tFLOAT_LITERAL;
	} 

	//terminal DECIMAL_DIGITS:
	//	"0".."9" "0".."9"?;
	public TerminalRule getDECIMAL_DIGITSRule() {
		return tDECIMAL_DIGITS;
	} 

	//terminal EXPONENT_PART:
	//	"e" ("+" | "-")? DECIMAL_DIGITS;
	public TerminalRule getEXPONENT_PARTRule() {
		return tEXPONENT_PART;
	} 

	//terminal FLOAT_TYPE_SUFFIX:
	//	"f" | "d";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	} 

	//terminal INTEGER_LITERAL:
	//	"1".."9" "0".."9"? "l"? | "0".."7"? "l"? | ("0" "x" ("0".."9" "a".."f")+) "l"?;
	public TerminalRule getINTEGER_LITERALRule() {
		return tINTEGER_LITERAL;
	} 

	//terminal MODIFIER:
	//	"public" | "private" | "protected" | "static" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" |
	//	"transient";
	public TerminalRule getMODIFIERRule() {
		return tMODIFIER;
	} 

	////TODO ajeitar
	//terminal IDENTIFIER:
	//	("a".."z" | "_" | "$") ("a".."z" | "_" | "$" | "0".."9" | "unicode character over 00C0")+;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
