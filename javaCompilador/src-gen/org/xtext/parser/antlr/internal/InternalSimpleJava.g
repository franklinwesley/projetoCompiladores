/*
 * generated by Xtext
 */
grammar InternalSimpleJava;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.SimpleJavaGrammarAccess;

}

@parser::members {

 	private SimpleJavaGrammarAccess grammarAccess;
 	
    public InternalSimpleJavaParser(TokenStream input, SimpleJavaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SimpleJavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Hello' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getHelloKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
    }
)
;





// Entry rule entryRulepackage_name
entryRulepackage_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_nameRule()); } 
	 iv_rulepackage_name=rulepackage_name 
	 { $current=$iv_rulepackage_name.current.getText(); }  
	 EOF 
;

// Rule package_name
rulepackage_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getPackage_nameAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackage_nameAccess().getPackage_name_auxParserRuleCall_1()); 
    }
    this_package_name_aux_1=rulepackage_name_aux    {
		$current.merge(this_package_name_aux_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulepackage_name_aux
entryRulepackage_name_aux returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_name_auxRule()); } 
	 iv_rulepackage_name_aux=rulepackage_name_aux 
	 { $current=$iv_rulepackage_name_aux.current.getText(); }  
	 EOF 
;

// Rule package_name_aux
rulepackage_name_aux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackage_name_auxAccess().getFullStopKeyword_0()); 
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getPackage_name_auxAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackage_name_auxAccess().getPackage_name_auxParserRuleCall_2()); 
    }
    this_package_name_aux_2=rulepackage_name_aux    {
		$current.merge(this_package_name_aux_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleclass_interface_name
entryRuleclass_interface_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_interface_nameRule()); } 
	 iv_ruleclass_interface_name=ruleclass_interface_name 
	 { $current=$iv_ruleclass_interface_name.current.getText(); }  
	 EOF 
;

// Rule class_interface_name
ruleclass_interface_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getClass_interface_nameAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getClass_interface_nameAccess().getPackage_nameParserRuleCall_1_0()); 
    }
    this_package_name_1=rulepackage_name    {
		$current.merge(this_package_name_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClass_interface_nameAccess().getFullStopKeyword_1_1()); 
    }
    this_IDENTIFIER_3=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_3);
    }

    { 
    newLeafNode(this_IDENTIFIER_3, grammarAccess.getClass_interface_nameAccess().getIDENTIFIERTerminalRuleCall_1_2()); 
    }
))
    ;









// Entry rule entryRuletype_specifier
entryRuletype_specifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); } 
	 iv_ruletype_specifier=ruletype_specifier 
	 { $current=$iv_ruletype_specifier.current.getText(); }  
	 EOF 
;

// Rule type_specifier
ruletype_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getBooleanKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getByteKeyword_1()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getCharKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getIntKeyword_4()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getFloatKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getLongKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getDoubleKeyword_7()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getClass_interface_nameParserRuleCall_8()); 
    }
    this_class_interface_name_8=ruleclass_interface_name    {
		$current.merge(this_class_interface_name_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletype
entryRuletype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current.getText(); }  
	 EOF 
;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getType_specifierParserRuleCall_0()); 
    }
    this_type_specifier_0=ruletype_specifier    {
		$current.merge(this_type_specifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleparameter
entryRuleparameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); } 
	 iv_ruleparameter=ruleparameter 
	 { $current=$iv_ruleparameter.current.getText(); }  
	 EOF 
;

// Rule parameter
ruleparameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getTypeParserRuleCall_0()); 
    }
    this_type_0=ruletype    {
		$current.merge(this_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getParameterAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleparameter_list
entryRuleparameter_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); } 
	 iv_ruleparameter_list=ruleparameter_list 
	 { $current=$iv_ruleparameter_list.current.getText(); }  
	 EOF 
;

// Rule parameter_list
ruleparameter_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameter_listAccess().getParameterParserRuleCall_0()); 
    }
    this_parameter_0=ruleparameter    {
		$current.merge(this_parameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getParameter_listAccess().getParameterParserRuleCall_1_1()); 
    }
    this_parameter_2=ruleparameter    {
		$current.merge(this_parameter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuledoc_comment
entryRuledoc_comment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoc_commentRule()); } 
	 iv_ruledoc_comment=ruledoc_comment 
	 { $current=$iv_ruledoc_comment.current.getText(); }  
	 EOF 
;

// Rule doc_comment
ruledoc_comment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='/**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoc_commentAccess().getSolidusAsteriskAsteriskKeyword_0()); 
    }

	kw='... text ...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoc_commentAccess().getTextKeyword_1()); 
    }

	kw='*/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoc_commentAccess().getAsteriskSolidusKeyword_2()); 
    }
)
    ;







// Entry rule entryRulefield_declaration
entryRulefield_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_declarationRule()); } 
	 iv_rulefield_declaration=rulefield_declaration 
	 { $current=$iv_rulefield_declaration.current.getText(); }  
	 EOF 
;

// Rule field_declaration
rulefield_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getField_declarationAccess().getDoc_commentParserRuleCall_0_0()); 
    }
    this_doc_comment_0=ruledoc_comment    {
		$current.merge(this_doc_comment_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getField_declarationAccess().getMethod_declarationParserRuleCall_0_1_0()); 
    }
    this_method_declaration_1=rulemethod_declaration    {
		$current.merge(this_method_declaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getField_declarationAccess().getConstructor_declarationParserRuleCall_0_1_1()); 
    }
    this_constructor_declaration_2=ruleconstructor_declaration    {
		$current.merge(this_constructor_declaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getField_declarationAccess().getVariable_declarationParserRuleCall_0_1_2()); 
    }
    this_variable_declaration_3=rulevariable_declaration    {
		$current.merge(this_variable_declaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getField_declarationAccess().getStatic_initializerParserRuleCall_1()); 
    }
    this_static_initializer_4=rulestatic_initializer    {
		$current.merge(this_static_initializer_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_declarationAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestatic_initializer
entryRulestatic_initializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatic_initializerRule()); } 
	 iv_rulestatic_initializer=rulestatic_initializer 
	 { $current=$iv_rulestatic_initializer.current.getText(); }  
	 EOF 
;

// Rule static_initializer
rulestatic_initializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatic_initializerAccess().getStaticKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatic_initializerAccess().getStatement_blockParserRuleCall_1()); 
    }
    this_statement_block_1=rulestatement_block    {
		$current.merge(this_statement_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulemodifier_aux
entryRulemodifier_aux returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifier_auxRule()); } 
	 iv_rulemodifier_aux=rulemodifier_aux 
	 { $current=$iv_rulemodifier_aux.current.getText(); }  
	 EOF 
;

// Rule modifier_aux
rulemodifier_aux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_MODIFIER_0=RULE_MODIFIER    {
		$current.merge(this_MODIFIER_0);
    }

    { 
    newLeafNode(this_MODIFIER_0, grammarAccess.getModifier_auxAccess().getMODIFIERTerminalRuleCall()); 
    }
)?
    ;





// Entry rule entryRuleconstructor_declaration
entryRuleconstructor_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructor_declarationRule()); } 
	 iv_ruleconstructor_declaration=ruleconstructor_declaration 
	 { $current=$iv_ruleconstructor_declaration.current.getText(); }  
	 EOF 
;

// Rule constructor_declaration
ruleconstructor_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getModifier_auxParserRuleCall_0()); 
    }
    this_modifier_aux_0=rulemodifier_aux    {
		$current.merge(this_modifier_aux_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getConstructor_declarationAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructor_declarationAccess().getLeftParenthesisKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getParameter_listParserRuleCall_3()); 
    }
    this_parameter_list_3=ruleparameter_list    {
		$current.merge(this_parameter_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstructor_declarationAccess().getRightParenthesisKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getStatement_blockParserRuleCall_5()); 
    }
    this_statement_block_5=rulestatement_block    {
		$current.merge(this_statement_block_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;







// Entry rule entryRulemethod_declaration
entryRulemethod_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethod_declarationRule()); } 
	 iv_rulemethod_declaration=rulemethod_declaration 
	 { $current=$iv_rulemethod_declaration.current.getText(); }  
	 EOF 
;

// Rule method_declaration
rulemethod_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethod_declarationAccess().getLeftParenthesisKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getMethod_declarationAccess().getParameter_listParserRuleCall_1()); 
    }
    this_parameter_list_1=ruleparameter_list    {
		$current.merge(this_parameter_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethod_declarationAccess().getRightParenthesisKeyword_2()); 
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketKeyword_3_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethod_declarationAccess().getRightSquareBracketKeyword_3_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getMethod_declarationAccess().getStatement_blockParserRuleCall_4_0()); 
    }
    this_statement_block_5=rulestatement_block    {
		$current.merge(this_statement_block_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethod_declarationAccess().getSemicolonKeyword_4_1()); 
    }
))
    ;





// Entry rule entryRulestatement_block
entryRulestatement_block returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_blockRule()); } 
	 iv_rulestatement_block=rulestatement_block 
	 { $current=$iv_rulestatement_block.current.getText(); }  
	 EOF 
;

// Rule statement_block
rulestatement_block returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_blockAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStatement_blockAccess().getStatementParserRuleCall_1()); 
    }
    this_statement_1=rulestatement    {
		$current.merge(this_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_blockAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleif_statement
entryRuleif_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); } 
	 iv_ruleif_statement=ruleif_statement 
	 { $current=$iv_ruleif_statement.current.getText(); }  
	 EOF 
;

// Rule if_statement
ruleif_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getIfKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_4()); 
    }
    this_statement_4=rulestatement    {
		$current.merge(this_statement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getElseKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_5_1()); 
    }
    this_statement_6=rulestatement    {
		$current.merge(this_statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuledo_statement
entryRuledo_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDo_statementRule()); } 
	 iv_ruledo_statement=ruledo_statement 
	 { $current=$iv_ruledo_statement.current.getText(); }  
	 EOF 
;

// Rule do_statement
ruledo_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDo_statementAccess().getDoKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDo_statementAccess().getStatementParserRuleCall_1()); 
    }
    this_statement_1=rulestatement    {
		$current.merge(this_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDo_statementAccess().getWhileKeyword_2()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDo_statementAccess().getLeftParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getDo_statementAccess().getExpressionParserRuleCall_4()); 
    }
    this_expression_4=ruleexpression    {
		$current.merge(this_expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDo_statementAccess().getRightParenthesisKeyword_5()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDo_statementAccess().getSemicolonKeyword_6()); 
    }
)
    ;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); } 
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current.getText(); }  
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhile_statementAccess().getWhileKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhile_statementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhile_statementAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getStatementParserRuleCall_4()); 
    }
    this_statement_4=rulestatement    {
		$current.merge(this_statement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefor_statement
entryRulefor_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_statementRule()); } 
	 iv_rulefor_statement=rulefor_statement 
	 { $current=$iv_rulefor_statement.current.getText(); }  
	 EOF 
;

// Rule for_statement
rulefor_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getForKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getVariable_declarationParserRuleCall_2_0()); 
    }
    this_variable_declaration_2=rulevariable_declaration    {
		$current.merge(this_variable_declaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getExpressionParserRuleCall_2_1_0()); 
    }
    this_expression_3=ruleexpression    {
		$current.merge(this_expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getSemicolonKeyword_2_1_1()); 
    }
)
    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getSemicolonKeyword_2_2()); 
    }
)(
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getExpressionParserRuleCall_3()); 
    }
    this_expression_6=ruleexpression    {
		$current.merge(this_expression_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getSemicolonKeyword_4()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getExpressionParserRuleCall_5()); 
    }
    this_expression_8=ruleexpression    {
		$current.merge(this_expression_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getSemicolonKeyword_6()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getRightParenthesisKeyword_7()); 
    }

    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getStatementParserRuleCall_8()); 
    }
    this_statement_11=rulestatement    {
		$current.merge(this_statement_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletry_statement
entryRuletry_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTry_statementRule()); } 
	 iv_ruletry_statement=ruletry_statement 
	 { $current=$iv_ruletry_statement.current.getText(); }  
	 EOF 
;

// Rule try_statement
ruletry_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTry_statementAccess().getTryKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTry_statementAccess().getStatementParserRuleCall_1()); 
    }
    this_statement_1=rulestatement    {
		$current.merge(this_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTry_statementAccess().getCatchKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTry_statementAccess().getLeftParenthesisKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTry_statementAccess().getParameterParserRuleCall_2_2()); 
    }
    this_parameter_4=ruleparameter    {
		$current.merge(this_parameter_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTry_statementAccess().getRightParenthesisKeyword_2_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getTry_statementAccess().getStatementParserRuleCall_2_4()); 
    }
    this_statement_6=rulestatement    {
		$current.merge(this_statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
	kw='finally' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTry_statementAccess().getFinallyKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTry_statementAccess().getStatementParserRuleCall_3_1()); 
    }
    this_statement_8=rulestatement    {
		$current.merge(this_statement_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleswitch_statement
entryRuleswitch_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitch_statementRule()); } 
	 iv_ruleswitch_statement=ruleswitch_statement 
	 { $current=$iv_ruleswitch_statement.current.getText(); }  
	 EOF 
;

// Rule switch_statement
ruleswitch_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getSwitchKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSwitch_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getRightParenthesisKeyword_3()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getLeftCurlyBracketKeyword_4()); 
    }
((
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getCaseKeyword_5_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSwitch_statementAccess().getExpressionParserRuleCall_5_0_1()); 
    }
    this_expression_6=ruleexpression    {
		$current.merge(this_expression_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getColonKeyword_5_0_2()); 
    }
)
    |(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getDefaultKeyword_5_1_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getColonKeyword_5_1_1()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getSwitch_statementAccess().getStatementParserRuleCall_5_2()); 
    }
    this_statement_10=rulestatement    {
		$current.merge(this_statement_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSwitch_statementAccess().getRightCurlyBracketKeyword_6()); 
    }
)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariable_declarationParserRuleCall_0()); 
    }
    this_variable_declaration_0=rulevariable_declaration    {
		$current.merge(this_variable_declaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1_0()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_blockParserRuleCall_2()); 
    }
    this_statement_block_3=rulestatement_block    {
		$current.merge(this_statement_block_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIf_statementParserRuleCall_3()); 
    }
    this_if_statement_4=ruleif_statement    {
		$current.merge(this_if_statement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDo_statementParserRuleCall_4()); 
    }
    this_do_statement_5=ruledo_statement    {
		$current.merge(this_do_statement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhile_statementParserRuleCall_5()); 
    }
    this_while_statement_6=rulewhile_statement    {
		$current.merge(this_while_statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFor_statementParserRuleCall_6()); 
    }
    this_for_statement_7=rulefor_statement    {
		$current.merge(this_for_statement_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTry_statementParserRuleCall_7()); 
    }
    this_try_statement_8=ruletry_statement    {
		$current.merge(this_try_statement_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitch_statementParserRuleCall_8()); 
    }
    this_switch_statement_9=ruleswitch_statement    {
		$current.merge(this_switch_statement_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='synchronized' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSynchronizedKeyword_9_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_9_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_9_2()); 
    }
    this_expression_12=ruleexpression    {
		$current.merge(this_expression_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getRightParenthesisKeyword_9_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementParserRuleCall_9_4()); 
    }
    this_statement_14=rulestatement    {
		$current.merge(this_statement_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getReturnKeyword_10_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_10_1()); 
    }
    this_expression_16=ruleexpression    {
		$current.merge(this_expression_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_10_2()); 
    }
)
    |(
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getThrowKeyword_11_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_11_1()); 
    }
    this_expression_19=ruleexpression    {
		$current.merge(this_expression_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_11_2()); 
    }
)
    |(    this_IDENTIFIER_21=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_21);
    }

    { 
    newLeafNode(this_IDENTIFIER_21, grammarAccess.getStatementAccess().getIDENTIFIERTerminalRuleCall_12_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getColonKeyword_12_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementParserRuleCall_12_2()); 
    }
    this_statement_23=rulestatement    {
		$current.merge(this_statement_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getBreakKeyword_13_0()); 
    }
(    this_IDENTIFIER_25=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_25);
    }

    { 
    newLeafNode(this_IDENTIFIER_25, grammarAccess.getStatementAccess().getIDENTIFIERTerminalRuleCall_13_1()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_13_2()); 
    }
)
    |(
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getContinueKeyword_14_0()); 
    }
(    this_IDENTIFIER_28=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_28);
    }

    { 
    newLeafNode(this_IDENTIFIER_28, grammarAccess.getStatementAccess().getIDENTIFIERTerminalRuleCall_14_1()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_14_2()); 
    }
)
    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_15()); 
    }
)
    ;





// Entry rule entryRulevariable_declaration
entryRulevariable_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); } 
	 iv_rulevariable_declaration=rulevariable_declaration 
	 { $current=$iv_rulevariable_declaration.current.getText(); }  
	 EOF 
;

// Rule variable_declaration
rulevariable_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getLeftSquareBracketKeyword_0_0_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getRightSquareBracketKeyword_0_0_1()); 
    }
)?(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getEqualsSignKeyword_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getVariable_initializerParserRuleCall_0_1_1()); 
    }
    this_variable_initializer_3=rulevariable_initializer    {
		$current.merge(this_variable_initializer_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getCommaKeyword_1_0()); 
    }
(    this_IDENTIFIER_5=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_5);
    }

    { 
    newLeafNode(this_IDENTIFIER_5, grammarAccess.getVariable_declarationAccess().getIDENTIFIERTerminalRuleCall_1_1_0()); 
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getLeftSquareBracketKeyword_1_1_1_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getRightSquareBracketKeyword_1_1_1_1()); 
    }
)?(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getEqualsSignKeyword_1_1_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getVariable_initializerParserRuleCall_1_1_2_1()); 
    }
    this_variable_initializer_9=rulevariable_initializer    {
		$current.merge(this_variable_initializer_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRulevariable_initializer
entryRulevariable_initializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_initializerRule()); } 
	 iv_rulevariable_initializer=rulevariable_initializer 
	 { $current=$iv_rulevariable_initializer.current.getText(); }  
	 EOF 
;

// Rule variable_initializer
rulevariable_initializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariable_initializerAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_initializerAccess().getLeftCurlyBracketKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVariable_initializerAccess().getVariable_initializerParserRuleCall_1_1_0()); 
    }
    this_variable_initializer_2=rulevariable_initializer    {
		$current.merge(this_variable_initializer_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_initializerAccess().getCommaKeyword_1_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_initializerAccess().getVariable_initializerParserRuleCall_1_1_1_1()); 
    }
    this_variable_initializer_4=rulevariable_initializer    {
		$current.merge(this_variable_initializer_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_initializerAccess().getCommaKeyword_1_1_2()); 
    }
)?)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_initializerAccess().getRightCurlyBracketKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current.getText(); }  
	 EOF 
;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLiteral_expressionParserRuleCall_0_0()); 
    }
    this_literal_expression_0=ruleliteral_expression    {
		$current.merge(this_literal_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_0_1()); 
    }
    this_expression_aux_1=ruleexpression_aux    {
		$current.merge(this_expression_aux_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getNullKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_1_1()); 
    }
    this_expression_aux_3=ruleexpression_aux    {
		$current.merge(this_expression_aux_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getSuperKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_2_1()); 
    }
    this_expression_aux_5=ruleexpression_aux    {
		$current.merge(this_expression_aux_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getThisKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_3_1()); 
    }
    this_expression_aux_7=ruleexpression_aux    {
		$current.merge(this_expression_aux_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_IDENTIFIER_8=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_8);
    }

    { 
    newLeafNode(this_IDENTIFIER_8, grammarAccess.getExpressionAccess().getIDENTIFIERTerminalRuleCall_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_4_1()); 
    }
    this_expression_aux_9=ruleexpression_aux    {
		$current.merge(this_expression_aux_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_5_1()); 
    }
    this_expression_11=ruleexpression    {
		$current.merge(this_expression_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_5_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_5_3()); 
    }
    this_expression_aux_13=ruleexpression_aux    {
		$current.merge(this_expression_aux_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_6_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_6_1()); 
    }
    this_expression_15=ruleexpression    {
		$current.merge(this_expression_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_6_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_6_3()); 
    }
    this_expression_aux_17=ruleexpression_aux    {
		$current.merge(this_expression_aux_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getFullStopKeyword_7_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_7_1()); 
    }
    this_expression_19=ruleexpression    {
		$current.merge(this_expression_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_7_2()); 
    }
    this_expression_aux_20=ruleexpression_aux    {
		$current.merge(this_expression_aux_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getCommaKeyword_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_8_1()); 
    }
    this_expression_22=ruleexpression    {
		$current.merge(this_expression_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_8_2()); 
    }
    this_expression_aux_23=ruleexpression_aux    {
		$current.merge(this_expression_aux_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='instanceof' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getInstanceofKeyword_9_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getClass_interface_nameParserRuleCall_9_1()); 
    }
    this_class_interface_name_25=ruleclass_interface_name    {
		$current.merge(this_class_interface_name_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_auxParserRuleCall_9_2()); 
    }
    this_expression_aux_26=ruleexpression_aux    {
		$current.merge(this_expression_aux_26);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;







// Entry rule entryRulearglist
entryRulearglist returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArglistRule()); } 
	 iv_rulearglist=rulearglist 
	 { $current=$iv_rulearglist.current.getText(); }  
	 EOF 
;

// Rule arglist
rulearglist returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArglistAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArglistAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getArglistAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleexpression_aux
entryRuleexpression_aux returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_auxRule()); } 
	 iv_ruleexpression_aux=ruleexpression_aux 
	 { $current=$iv_ruleexpression_aux.current.getText(); }  
	 EOF 
;

// Rule expression_aux
ruleexpression_aux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression_auxAccess().getLeftParenthesisKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getExpression_auxAccess().getArglistParserRuleCall_1()); 
    }
    this_arglist_1=rulearglist    {
		$current.merge(this_arglist_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression_auxAccess().getRightParenthesisKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression_auxAccess().getExpression_auxParserRuleCall_3()); 
    }
    this_expression_aux_3=ruleexpression_aux    {
		$current.merge(this_expression_aux_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleliteral_expression
entryRuleliteral_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteral_expressionRule()); } 
	 iv_ruleliteral_expression=ruleliteral_expression 
	 { $current=$iv_ruleliteral_expression.current.getText(); }  
	 EOF 
;

// Rule literal_expression
ruleliteral_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTEGER_LITERAL_0=RULE_INTEGER_LITERAL    {
		$current.merge(this_INTEGER_LITERAL_0);
    }

    { 
    newLeafNode(this_INTEGER_LITERAL_0, grammarAccess.getLiteral_expressionAccess().getINTEGER_LITERALTerminalRuleCall_0()); 
    }

    |    this_FLOAT_LITERAL_1=RULE_FLOAT_LITERAL    {
		$current.merge(this_FLOAT_LITERAL_1);
    }

    { 
    newLeafNode(this_FLOAT_LITERAL_1, grammarAccess.getLiteral_expressionAccess().getFLOAT_LITERALTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getLiteral_expressionAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |    this_CHARACTER_3=RULE_CHARACTER    {
		$current.merge(this_CHARACTER_3);
    }

    { 
    newLeafNode(this_CHARACTER_3, grammarAccess.getLiteral_expressionAccess().getCHARACTERTerminalRuleCall_3()); 
    }
)
    ;





RULE_STRING : '\'\'' RULE_CHARACTER? '\'\'';

RULE_CHARACTER : 'based on the unicode character set';

RULE_FLOAT_LITERAL : (RULE_DECIMAL_DIGITS '.' RULE_DECIMAL_DIGITS? RULE_EXPONENT_PART? RULE_FLOAT_TYPE_SUFFIX?|'.' RULE_DECIMAL_DIGITS RULE_EXPONENT_PART? RULE_FLOAT_TYPE_SUFFIX?|RULE_DECIMAL_DIGITS RULE_EXPONENT_PART? RULE_DECIMAL_DIGITS?);

RULE_DECIMAL_DIGITS : '0'..'9' ('0'..'9')?;

RULE_EXPONENT_PART : 'e' ('+'|'-')? RULE_DECIMAL_DIGITS;

RULE_FLOAT_TYPE_SUFFIX : ('f'|'d');

RULE_INTEGER_LITERAL : ('1'..'9' ('0'..'9')? 'l'?|('0'..'7')? 'l'?|'0' 'x' ('0'..'9' 'a'..'f')+ 'l'?);

RULE_MODIFIER : ('public'|'private'|'protected'|'static'|'final'|'native'|'synchronized'|'abstract'|'threadsafe'|'transient');

RULE_IDENTIFIER : ('a'..'z'|'_'|'$') ('a'..'z'|'_'|'$'|'0'..'9'|'unicode character over 00C0')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


