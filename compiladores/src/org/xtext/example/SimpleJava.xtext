grammar org.xtext.example.SimpleJava with org.eclipse.xtext.common.Terminals

generate simpleJava "http://www.xtext.org/example/SimpleJava"

Model:
	compilation_unit;

compilation_unit: (pacote=package_statement)? (importes+=import_statement)* (declaracao+=type_declaration)*;
package_statement: "package" noomePacote=name ";";
import_statement: "import" nomeImporte=name (".*;" | ";");
type_declaration: (doc_comment)?  ( declaracaoClasse=class_declaration  | declaracaoInterface=interface_declaration );
doc_comment: "/**" comentario=STRING "*/";
class_declaration: (modificadores+=MODIFIER)* "class" nomeClasse=IDENTIFIER ("extends" superclasse=name)? ("implements" implementosClasse+=name ("," implementosClasse+=name)*)? "{" (corpoClasse=field_declaration | declaracaoClasse=class_declaration)* "}";
interface_declaration: (modificadores+=MODIFIER)* "interface" nomeInterface=IDENTIFIER ("extends" superinterfaces+=name ("," superinterfaces+=name)*)? "{" (corpoInterface=field_declaration)* "}";
field_declaration: 
      ( comentario=(doc_comment)* ( declaracaoMetodo=method_declaration | declaracaoConstrutor=constructor_declaration | declaracaoVariavel=variable_declaration ) ) 
      | estatico=static_initializer 
      | ";" ;
method_declaration: (modificadorMetodo=MODIFIER)* tipoRetorno=type nomeMetodo=IDENTIFIER "(" (parametrosMetodo=parameter_list)? ")" ("[" "]")* (blocoMetodo=statement_block | ";" );
parameter: 
      tipoParametro=type nomeParametro=IDENTIFIER ("[" "]")*; 
parameter_list:
      parametros+=parameter ("," parametros+=parameter)*;    
statement_block: "{" (corpo=statement)* "}";
statement: 
      ->declaracaoVariavel=variable_declaration 
      | ->expressao=expression ";" 
      | bloco=statement_block 
      | corpoIf=if_statement 
      | corpoDoWhile=do_statement
      | corpoWhile=while_statement 
      | corpoFor=for_statement 
      | corpoTryCatch=try_statement
      | corpoSwitchCase=switch_statement 
      | "synchronized" "(" expressaoSynchronized=expression ")" corpoSynchronize=statement 
      | "return" (return=expression)? ";" 
      | "throw" exececao=expression ";" 
      | IDENTIFIER ":" statement //TODO naum sei o q eh
      | "break" (break=IDENTIFIER)? ";"
      | "continue" (continue=IDENTIFIER)? ";" 
      | ";";
variable_declaration: (modificador=MODIFIER)* (tipoVariavel=type | "void")? declaracaoVariaveis+=variable_declarator ("," declaracaoVariaveis+=variable_declarator)* (";"| blocoVariavel=statement_block); 
variable_declarator: "(" (arglist)? ")" //TODO naum sei o q eh
	  | nomeVariavel=IDENTIFIER  ("["  "]")*  ( op="=" valorVariavel=variable_initializer)?;
variable_initializer:
	  expressaoVariavel=expression 
      | ( "{" (valorVariaveis+=variable_initializer ("," valorVariaveis+=variable_initializer)* (",")?)? "}" );
if_statement: "if" "(" espressaoIf=expression ")" blcoIf=statement =>("else" blocoElse=statement)?;
do_statement: "do" blocoDo=statement "while" "(" expressaoWhile=expression ")" ";";  
while_statement: "while" "(" expressaoWhile=expression ")" blocoWhile=statement;
for_statement: "for" "(" ( =>declaracaoVariavel=variable_declaration | ( expressaoDeclaracao=expression ";" ) | ";" ) (expressaoFor=expression)? ";" (expressaoIncremento=expression)? ")" blocoFor=statement;
try_statement: "try" blocoTry=statement_block => ("catch" "(" parametroCatch=parameter ")" blocoCatch=statement_block)* =>("finally" blocoFinally=statement_block)?;
switch_statement:"switch" "(" expressaoSwitch=expression ")" "{" (( "case" expressaoCases+=expression ":" ) | ( "default" ":" ) | blocoSwitch=statement)* "}";
constructor_declaration: (modificador=MODIFIER)* (tipo=type | "void")? nomeContrutor=IDENTIFIER "(" (parametrosContrutor=parameter_list)? ")" blocoConstrutor=statement_block ;
static_initializer: "static" blocoEstatico=statement_block;

creating_expression: 
      "new" ((novoObjeto=name parametros=creating_aux) | (tipoObjeto=type_specifier ->(parametros=aux)? ("[" "]")*) | ("(" expressaoNew=expression ")")) (novo=newBlock)*;


exp_aux: ->expressao=expression ")"
	| type ")" expressao=expression;
expression: 
      (logical=logical_expression
      | numeric=numeric_expression 
      | bit=bit_expression 
      | novo=creating_expression 
      | literal=literal_expression 
      | "null" 
      | "super"
      | "this" 
      | identificador=IDENTIFIER 
      | "(" exp_aux)  expressoes=expression_aux; 
expression_aux: (((("(" (parametros=arglist)? ")") | aux | ("." exp=expression) | ("," expression) | ("instanceof" ->name))
	  | ->op=mais_aux exp=expression
	  | operador=( "++" | "--")
	  | ( ->op=mais_aux | operador="-" | operador="-=" | operador="*" | operador="*=" | operador="/" | operador="/=" | operador="%" | operador="%=" ) exp=expression
	  | (operador=("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" | "||" | "||=" | "%" | "%=" ) exp=expression
	  	| operador="?" exp=expression operador=":" exp=expression
	  	| operador=( ">" | "<" | ">=" | "<=" | "==" | "!=" ) exp=expression
	  	| operador=( ">>=" | "<<" | ">>" | ">>>" ) exp=expression)
	  )  expressoes=expression_aux)?;
mais_aux:  operador="+" |  operador="+=";
newBlock : "{" constructor_declaration "}";      
creating_aux: ->"(" (argumentos=arglist)? ")" 
	  | ->(aux)? ("[" "]")* ;
aux: ("[" espressao=expression "]");

	   
literal_expression:
	  ->decimal=DECIMAL_DIGITS 
      | inteiro=INTEGER_LITERAL
      | l_float=FLOAT_LITERAL 
      | string=STRING;
logical_expression: 
      operador="!" exp=expression 
      | operador="true" 
      | operador="false";
bit_expression: operador="~" expressao=expression;
numeric_expression:
      ( operador=( "-" |  "++" | "--" ) expressao=expression );   
arglist: expressoesArgumentos+=expression ("," expressoesArgumentos+=expression)*
	  | '"' STRING '"'
	  | tipoParametro+=type nomeParametro+=IDENTIFIER ("," tipoParametro+=type nomeParametro+=IDENTIFIER)*;          
name: nome=IDENTIFIER pacote=package_name_aux;
package_name_aux:
	("." nomePacote=IDENTIFIER pacote=package_name_aux)*;	 
type_specifier:
      nome="boolean" 
      | nome="byte" 
      | nome="char" 
      | nome="short" 
      | nome="int" 
      | nome="float" 
      | nome="long" 
      | nome="double";
type: 
      (tipo=type_specifier | tipo=name) ("[" "]")*;
MODIFIER:
      modificador="public" 
      | modificador="private" 
      | modificador="protected" 
      | modificador="static" 
      | modificador="final" 
      | modificador="native" 
      | modificador="synchronized" 
      | modificador="abstract" 
      | modificador="threadsafe" 
      | modificador="transient";


terminal FLOAT_LITERAL: (('0'..'9')+ '.' ('0'..'9')+) (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;
terminal EXPONENT_PART: "e"  ( "+" | "-")? DECIMAL_DIGITS;
terminal FLOAT_TYPE_SUFFIX: "f" | "d";
terminal DECIMAL_DIGITS: INT;   
terminal INTEGER_LITERAL:
      DECIMAL_DIGITS ("l")? 
      | ( "0x" ("0".."9"|"a".."f")+ ) ("l")?;
terminal IDENTIFIER: ID;