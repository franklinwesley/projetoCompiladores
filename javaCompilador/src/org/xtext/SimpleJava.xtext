grammar org.xtext.SimpleJava with org.eclipse.xtext.common.Terminals

generate simpleJava "http://www.xtext.org/SimpleJava"

Model:
	comp+=compilation_unit;

compilation_unit: (package_statement)? (import_statement)* (type_declaration)*;
package_statement: "package" name ";";
import_statement: "import" name (".*;" | ";");
type_declaration: (doc_comment)?  ( class_declaration  | interface_declaration );
doc_comment: "/**" "... text ..." "*/"; //TODO acho q text deve ser um texto mesmo
class_declaration: (MODIFIER)* "class" IDENTIFIER ("extends" name)? ("implements" name ("," name)*)? "{" (field_declaration | class_declaration)* "}";
interface_declaration: (MODIFIER)* "interface" IDENTIFIER ("extends" name ("," name)*)? "{" (field_declaration)* "}";
field_declaration: 
      ( (doc_comment)* ( method_declaration | constructor_declaration | variable_declaration ) ) 
      | static_initializer 
      | ";" ;
method_declaration: "(" (parameter_list)? ")" ("[" "]")* (statement_block | ";" );
parameter: 
      type IDENTIFIER ("[" "]")*; 
parameter_list:
      parameter ("," parameter)*;
statement_block: "{" (statement)* "}";
statement: 
      ->variable_declaration 
      | ->expression ";" 
      | statement_block 
      | if_statement 
      | do_statement
      | while_statement 
      | for_statement 
      | try_statement
      | switch_statement 
      | "synchronized" "(" expression ")" statement 
      | "return" (expression)? ";" 
      | "throw" expression ";" 
      | IDENTIFIER ":" statement 
      | "break" (IDENTIFIER)? ";"
      | "continue" (IDENTIFIER)? ";" 
      | ";";
variable_declaration: (MODIFIER)* (type | "void")? variable_declarator ("," variable_declarator)* (";"| statement_block); 
variable_declarator: "(" (arglist)? ")"
	  | IDENTIFIER  ("["  "]")*  ( "=" variable_initializer)?;
variable_initializer:
	  expression 
      | ( "{" (variable_initializer ("," variable_initializer)* (",")?)? "}" );
if_statement: "if" "(" expression ")" statement =>("else" statement)?;
do_statement: "do" statement "while" "(" expression ")" ";";  
while_statement: "while" "(" expression ")" statement;
for_statement: "for" "(" ( =>variable_declaration | ( expression ";" ) | ";" ) (expression)? ";" (expression)? ")" statement;
try_statement: "try" statement_block => ("catch" "(" parameter ")" statement_block)* =>("finally" statement_block)?;
switch_statement:"switch" "(" expression ")" "{" (( "case" expression ":" ) | ( "default" ":" ) | statement)* "}";
constructor_declaration: (MODIFIER)* (type | "void")? IDENTIFIER "(" (parameter_list)? ")" statement_block ;
static_initializer: "static" statement_block;


exp_aux: ->expression ")"
	| type ")" expression;
expression: 
 
      (logical_expression
      | numeric_expression 
      | bit_expression 
      |  creating_expression 
      | literal_expression 
      | "null" 
      | "super" 
      | "this" 
      | IDENTIFIER 
      | "(" exp_aux)  expression_aux; 
expression_aux: (((("(" (arglist)? ")") | aux | ("." expression) | ("," expression) | ("instanceof" ->name))
	  | ->mais_aux expression
	  | ( "++" | "--")
	  | ( ->mais_aux | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%=" ) expression
	  | (("ampersand" | "ampersand=" | "|" | "|=" | "^" | "^=" | ("ampersand" "ampersand") | "||=" | => "%" | "%=" ) expression
	  	| "?" expression ":" expression
	  	| ( ">" | "<" | ">=" | "<=" | "==" | "!=" ) expression
	  	| ( ">>=" | "<<" | ">>" | ">>>" ) expression)
	  )  expression_aux)?;


mais_aux:  "+" |  "+=";
creating_expression: 
      "new" ((name creating_aux) | (type_specifier ->(aux)? ("[" "]")*) | ("(" expression ")")) (new)*;
new : "{" constructor_declaration "}";      
creating_aux: ->"(" (arglist)? ")" 
	  | ->(aux)? ("[" "]")* ;
aux: ("[" expression "]");
arglist: expression ("," expression)*
	  | '"' STRING '"'
	  | type IDENTIFIER ("," type IDENTIFIER)*;
logical_expression: 
      "!" expression 
      | "true" 
      | "false"; 
bit_expression: "~" expression;

numeric_expression:
      ( ( "-" |  "++" | "--" ) expression );       
name: IDENTIFIER package_name_aux;
package_name_aux:
	("." IDENTIFIER package_name_aux)*; 
type_specifier:
      "boolean" 
      | "byte" 
      | "char" 
      | "short" 
      | "int" 
      | "float" 
      | "long" 
      | "double";
type: 
      (type_specifier | name) ("[" "]")*; 
literal_expression:
	  ->DECIMAL_DIGITS 
      | INTEGER_LITERAL
      | FLOAT_LITERAL 
      | STRING;
MODIFIER:
      "public" 
      | "private" 
      | "protected" 
      | "static" 
      | "final" 
      | "native" 
      | "synchronized" 
      | "abstract" 
      | "threadsafe" 
      | "transient";


terminal FLOAT_LITERAL: (('0'..'9')+ '.' ('0'..'9')+) (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;
terminal EXPONENT_PART: "e"  ( "+" | "-")? DECIMAL_DIGITS;
terminal FLOAT_TYPE_SUFFIX: "f" | "d";
terminal DECIMAL_DIGITS: INT;   
terminal INTEGER_LITERAL:
      DECIMAL_DIGITS ("l")? 
      | ( "0x" ("0".."9"|"a".."f")+ ) ("l")?;
terminal IDENTIFIER: ID;