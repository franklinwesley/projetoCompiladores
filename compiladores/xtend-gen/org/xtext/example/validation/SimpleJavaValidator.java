/**
 * generated by Xtext
 */
package org.xtext.example.validation;

import com.google.common.base.Objects;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.example.simpleJava.SimpleJavaPackage;
import org.xtext.example.simpleJava.arglist;
import org.xtext.example.simpleJava.class_declaration;
import org.xtext.example.simpleJava.compilation_unit;
import org.xtext.example.simpleJava.creating_expression;
import org.xtext.example.simpleJava.expression;
import org.xtext.example.simpleJava.expression_aux;
import org.xtext.example.simpleJava.field_declaration;
import org.xtext.example.simpleJava.interface_declaration;
import org.xtext.example.simpleJava.literal_expression;
import org.xtext.example.simpleJava.logical_expression;
import org.xtext.example.simpleJava.mais_aux;
import org.xtext.example.simpleJava.method_declaration;
import org.xtext.example.simpleJava.numeric_expression;
import org.xtext.example.simpleJava.parameter;
import org.xtext.example.simpleJava.parameter_list;
import org.xtext.example.simpleJava.statement;
import org.xtext.example.simpleJava.statement_block;
import org.xtext.example.simpleJava.type;
import org.xtext.example.simpleJava.type_declaration;
import org.xtext.example.simpleJava.variable_declaration;
import org.xtext.example.simpleJava.variable_declarator;
import org.xtext.example.simpleJava.variable_initializer;
import org.xtext.example.simpleJava.while_statement;
import org.xtext.example.validation.AbstractSimpleJavaValidator;
import org.xtext.example.validation.Metodo;
import org.xtext.example.validation.Tipo;
import org.xtext.example.validation.Variavel;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SimpleJavaValidator extends AbstractSimpleJavaValidator {
  private final List<Tipo> tipos = new ArrayList<Tipo>();
  
  private final Map<String, Variavel> variaveis = new HashMap<String, Variavel>();
  
  private final Map<String, Metodo> metodos = new HashMap<String, Metodo>();
  
  private final List<Integer> registradores = new ArrayList<Integer>();
  
  private final List<Integer> labels = new ArrayList<Integer>();
  
  @Check
  public void runChecks(final compilation_unit comp) {
    EList<type_declaration> _declaracao = comp.getDeclaracao();
    this.checkTypeDeclaration(_declaracao);
    EList<type_declaration> _declaracao_1 = comp.getDeclaracao();
    this.checkVariableDeclaration(_declaracao_1);
    EList<type_declaration> _declaracao_2 = comp.getDeclaracao();
    this.checkVariableInitializer(_declaracao_2);
    EList<type_declaration> _declaracao_3 = comp.getDeclaracao();
    this.checkInterativeWhile(_declaracao_3);
    EList<type_declaration> _declaracao_4 = comp.getDeclaracao();
    this.checkAritmeticExpression(_declaracao_4);
    EList<type_declaration> _declaracao_5 = comp.getDeclaracao();
    this.checkBooleanExpression(_declaracao_5);
    EList<type_declaration> _declaracao_6 = comp.getDeclaracao();
    this.checkLiterals(_declaracao_6);
    EList<type_declaration> _declaracao_7 = comp.getDeclaracao();
    this.checkVariableUsed(_declaracao_7);
    EList<type_declaration> _declaracao_8 = comp.getDeclaracao();
    this.checkMetodDeclaration(_declaracao_8);
    EList<type_declaration> _declaracao_9 = comp.getDeclaracao();
    this.checkMetodoUsed(_declaracao_9);
  }
  
  public void checkMetodoUsed(final EList<type_declaration> list) {
    this.salvarArquivo("oi");
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      this.checkUsoMetodo(_declaracaoMetodo);
    }
  }
  
  public void checkUsoMetodo(final method_declaration declaration) {
    boolean _and = false;
    statement_block _blocoMetodo = declaration.getBlocoMetodo();
    statement _corpo = _blocoMetodo.getCorpo();
    expression _expressao = _corpo.getExpressao();
    String _identificador = _expressao.getIdentificador();
    boolean _notEquals = (!Objects.equal(_identificador, null));
    if (!_notEquals) {
      _and = false;
    } else {
      statement_block _blocoMetodo_1 = declaration.getBlocoMetodo();
      statement _corpo_1 = _blocoMetodo_1.getCorpo();
      expression _expressao_1 = _corpo_1.getExpressao();
      expression_aux _expressoes = _expressao_1.getExpressoes();
      arglist _parametros = _expressoes.getParametros();
      boolean _notEquals_1 = (!Objects.equal(_parametros, null));
      _and = _notEquals_1;
    }
    if (_and) {
      statement_block _blocoMetodo_2 = declaration.getBlocoMetodo();
      statement _corpo_2 = _blocoMetodo_2.getCorpo();
      expression _expressao_2 = _corpo_2.getExpressao();
      String _identificador_1 = _expressao_2.getIdentificador();
      boolean _containsKey = this.metodos.containsKey(_identificador_1);
      if (_containsKey) {
        statement_block _blocoMetodo_3 = declaration.getBlocoMetodo();
        statement _corpo_3 = _blocoMetodo_3.getCorpo();
        expression _expressao_3 = _corpo_3.getExpressao();
        String _identificador_2 = _expressao_3.getIdentificador();
        Metodo m = this.metodos.get(_identificador_2);
        statement_block _blocoMetodo_4 = declaration.getBlocoMetodo();
        statement _corpo_4 = _blocoMetodo_4.getCorpo();
        expression _expressao_4 = _corpo_4.getExpressao();
        expression_aux _expressoes_1 = _expressao_4.getExpressoes();
        arglist _parametros_1 = _expressoes_1.getParametros();
        boolean _verificaParametros = this.verificaParametros(m, _parametros_1);
        boolean _not = (!_verificaParametros);
        if (_not) {
          this.error("Invalid parameters", SimpleJavaPackage.Literals.EXPRESSION_AUX__PARAMETROS);
        }
      } else {
        this.error("inexistent method", SimpleJavaPackage.Literals.METHOD_DECLARATION__BLOCO_METODO);
      }
    }
  }
  
  public Map<String, Tipo> getparametros(final arglist list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    int i = 0;
    while ((i < ((Object[])Conversions.unwrapArray(list.getTipoParametro(), Object.class)).length)) {
      {
        EList<String> _nomeParametro = list.getNomeParametro();
        String _get = _nomeParametro.get(i);
        EList<type> _tipoParametro = list.getTipoParametro();
        type _get_1 = _tipoParametro.get(i);
        String _valueOf = String.valueOf(_get_1);
        Tipo _tipo = new Tipo(_valueOf);
        p.put(_get, _tipo);
        i++;
      }
    }
    return p;
  }
  
  public boolean verificaParametros(final Metodo metodo, final arglist arglist) {
    Map<String, Tipo> _parametros = metodo.getParametros();
    Map<String, Tipo> _parametros_1 = this.getparametros(arglist);
    boolean _equals = _parametros.equals(_parametros_1);
    if (_equals) {
      return true;
    } else {
      return false;
    }
  }
  
  public void checkMetodDeclaration(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      this.checkDeclaracaoMetodo(_declaracaoMetodo);
    }
  }
  
  public Metodo checkDeclaracaoMetodo(final method_declaration declaration) {
    Metodo _xblockexpression = null;
    {
      type _tipoRetorno = declaration.getTipoRetorno();
      EObject _tipo = _tipoRetorno.getTipo();
      String _valueOf = String.valueOf(_tipo);
      Tipo tipo = new Tipo(_valueOf);
      parameter_list _parametrosMetodo = declaration.getParametrosMetodo();
      Map<String, Tipo> parametros = this.getparametros(_parametrosMetodo);
      Metodo _xifexpression = null;
      statement_block _blocoMetodo = declaration.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _return = _corpo.getReturn();
      Tipo _tipo_1 = this.getTipo(_return);
      boolean _equals = tipo.equals(_tipo_1);
      if (_equals) {
        Metodo _xblockexpression_1 = null;
        {
          String _nomeMetodo = declaration.getNomeMetodo();
          Metodo metodo = new Metodo(_nomeMetodo, tipo, parametros);
          String _nomeMetodo_1 = declaration.getNomeMetodo();
          _xblockexpression_1 = this.metodos.put(_nomeMetodo_1, metodo);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        this.error("Invalid return", SimpleJavaPackage.Literals.STATEMENT__RETURN);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public Tipo getTipo(final expression expression) {
    logical_expression _logical = expression.getLogical();
    boolean _notEquals = (!Objects.equal(_logical, null));
    if (_notEquals) {
      return new Tipo("boolean");
    } else {
      literal_expression _literal = expression.getLiteral();
      String _decimal = _literal.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal, null));
      if (_notEquals_1) {
        return new Tipo("double");
      } else {
        literal_expression _literal_1 = expression.getLiteral();
        String _inteiro = _literal_1.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          return new Tipo("int");
        } else {
          literal_expression _literal_2 = expression.getLiteral();
          String _l_float = _literal_2.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            return new Tipo("float");
          } else {
            literal_expression _literal_3 = expression.getLiteral();
            String _string = _literal_3.getString();
            boolean _notEquals_4 = (!Objects.equal(_string, null));
            if (_notEquals_4) {
              return new Tipo("String");
            }
          }
        }
      }
    }
    for (final Tipo tipo : this.tipos) {
      Tipo _herdado = tipo.getHerdado();
      if ((_herdado instanceof org.xtext.example.simpleJava.expression)) {
        return new Tipo("boolean");
      }
    }
    return null;
  }
  
  public Map<String, Tipo> getparametros(final parameter_list list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    EList<parameter> _parametros = list.getParametros();
    for (final parameter parametro : _parametros) {
      {
        String _nomeParametro = parametro.getNomeParametro();
        type _tipoParametro = parametro.getTipoParametro();
        EObject _tipo = _tipoParametro.getTipo();
        String _valueOf = String.valueOf(_tipo);
        Tipo _tipo_1 = new Tipo(_valueOf);
        p.put(_nomeParametro, _tipo_1);
        String _nomeParametro_1 = parametro.getNomeParametro();
        String _nomeParametro_2 = parametro.getNomeParametro();
        type _tipoParametro_1 = parametro.getTipoParametro();
        EObject _tipo_2 = _tipoParametro_1.getTipo();
        String _valueOf_1 = String.valueOf(_tipo_2);
        Tipo _tipo_3 = new Tipo(_valueOf_1);
        Variavel _variavel = new Variavel(_nomeParametro_2, _tipo_3);
        this.variaveis.put(_nomeParametro_1, _variavel);
      }
    }
    return p;
  }
  
  public void checkVariableUsed(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      this.checkUsoVariaveis(_corpo);
    }
  }
  
  public void checkUsoVariaveis(final statement statement) {
    expression _expressao = statement.getExpressao();
    String variavel = _expressao.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(variavel);
    boolean _not = (!_containsKey);
    if (_not) {
      this.error("Inexistent variable", SimpleJavaPackage.Literals.EXPRESSION__IDENTIFICADOR);
    } else {
      Variavel _get = this.variaveis.get(variavel);
      expression _expressao_1 = statement.getExpressao();
      expression_aux _expressoes = _expressao_1.getExpressoes();
      expression _exp = _expressoes.getExp();
      expression_aux _expressoes_1 = _exp.getExpressoes();
      arglist _parametros = _expressoes_1.getParametros();
      Map<String, Tipo> _parametros_1 = this.getparametros(_parametros);
      boolean _equals = _get.equals(_parametros_1);
      boolean _not_1 = (!_equals);
      if (_not_1) {
        this.error("Invalid parameters", SimpleJavaPackage.Literals.EXPRESSION_AUX__PARAMETROS);
      }
    }
  }
  
  public void checkLiterals(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkLiterais(_expressao);
    }
  }
  
  public Object checkLiterais(final expression expression) {
    Object _xifexpression = null;
    literal_expression _literal = expression.getLiteral();
    String _inteiro = _literal.getInteiro();
    boolean _notEquals = (!Objects.equal(_inteiro, null));
    if (_notEquals) {
      _xifexpression = null;
    } else {
      Object _xifexpression_1 = null;
      literal_expression _literal_1 = expression.getLiteral();
      String _string = _literal_1.getString();
      boolean _notEquals_1 = (!Objects.equal(_string, null));
      if (_notEquals_1) {
        _xifexpression_1 = null;
      } else {
        Object _xifexpression_2 = null;
        logical_expression _logical = expression.getLogical();
        boolean _notEquals_2 = (!Objects.equal(_logical, null));
        if (_notEquals_2) {
          _xifexpression_2 = null;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public void checkBooleanExpression(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkBoolean(_expressao);
    }
  }
  
  public void checkBoolean(final expression expression) {
    logical_expression _logical = expression.getLogical();
    boolean _notEquals = (!Objects.equal(_logical, null));
    if (_notEquals) {
      boolean _or = false;
      boolean _or_1 = false;
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      String _operador = expression.getOperador();
      boolean _equals = Objects.equal(_operador, "ampersand");
      if (_equals) {
        _or_8 = true;
      } else {
        String _operador_1 = expression.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "ampersand=");
        _or_8 = _equals_1;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        String _operador_2 = expression.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "|");
        _or_7 = _equals_2;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        String _operador_3 = expression.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "|=");
        _or_6 = _equals_3;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        String _operador_4 = expression.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "^");
        _or_5 = _equals_4;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        String _operador_5 = expression.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "^=");
        _or_4 = _equals_5;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        String _operador_6 = expression.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "ampersand ampersand");
        _or_3 = _equals_6;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        String _operador_7 = expression.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "||=");
        _or_2 = _equals_7;
      }
      if (_or_2) {
        _or_1 = true;
      } else {
        String _operador_8 = expression.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "&");
        _or_1 = _equals_8;
      }
      if (_or_1) {
        _or = true;
      } else {
        String _operador_9 = expression.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or = _equals_9;
      }
      if (_or) {
        org.xtext.example.simpleJava.expression _exp = expression.getExp();
        logical_expression _logical_1 = _exp.getLogical();
        boolean _notEquals_1 = (!Objects.equal(_logical_1, null));
        if (_notEquals_1) {
          this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL);
        }
      } else {
        this.error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR);
      }
    } else {
      this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION__LOGICAL);
    }
  }
  
  public void checkAritmeticExpression(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkArimetic(_expressao);
    }
  }
  
  public void checkArimetic(final expression expression) {
    boolean _or = false;
    boolean _or_1 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      _or_1 = true;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _notEquals_1 = (!Objects.equal(_inteiro, null));
      _or_1 = _notEquals_1;
    }
    if (_or_1) {
      _or = true;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _notEquals_2 = (!Objects.equal(_l_float, null));
      _or = _notEquals_2;
    }
    if (_or) {
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      boolean _or_11 = false;
      boolean _or_12 = false;
      expression_aux _expressoes = expression.getExpressoes();
      mais_aux _op = _expressoes.getOp();
      boolean _notEquals_3 = (!Objects.equal(_op, null));
      if (_notEquals_3) {
        _or_12 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador = _expressoes_1.getOperador();
        boolean _equals = Objects.equal(_operador, "++");
        _or_12 = _equals;
      }
      if (_or_12) {
        _or_11 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_1 = _expressoes_2.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "--");
        _or_11 = _equals_1;
      }
      if (_or_11) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_2 = _expressoes_3.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "-");
        _or_10 = _equals_2;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_3 = _expressoes_4.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "-=");
        _or_9 = _equals_3;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_4 = _expressoes_5.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "*");
        _or_8 = _equals_4;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_5 = _expressoes_6.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "*=");
        _or_7 = _equals_5;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_6 = _expressoes_7.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "/");
        _or_6 = _equals_6;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_7 = _expressoes_8.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "/=");
        _or_5 = _equals_7;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_8 = _expressoes_9.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "%");
        _or_4 = _equals_8;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_9 = _expressoes_10.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or_3 = _equals_9;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        numeric_expression _numeric = expression.getNumeric();
        boolean _notEquals_4 = (!Objects.equal(_numeric, null));
        _or_2 = _notEquals_4;
      }
      if (_or_2) {
        boolean _and = false;
        boolean _and_1 = false;
        expression_aux _expressoes_11 = expression.getExpressoes();
        org.xtext.example.simpleJava.expression _exp = _expressoes_11.getExp();
        literal_expression _literal_3 = _exp.getLiteral();
        String _decimal_1 = _literal_3.getDecimal();
        boolean _equals_10 = Objects.equal(_decimal_1, null);
        if (!_equals_10) {
          _and_1 = false;
        } else {
          expression_aux _expressoes_12 = expression.getExpressoes();
          org.xtext.example.simpleJava.expression _exp_1 = _expressoes_12.getExp();
          literal_expression _literal_4 = _exp_1.getLiteral();
          String _inteiro_1 = _literal_4.getInteiro();
          boolean _equals_11 = Objects.equal(_inteiro_1, null);
          _and_1 = _equals_11;
        }
        if (!_and_1) {
          _and = false;
        } else {
          expression_aux _expressoes_13 = expression.getExpressoes();
          org.xtext.example.simpleJava.expression _exp_2 = _expressoes_13.getExp();
          literal_expression _literal_5 = _exp_2.getLiteral();
          String _l_float_1 = _literal_5.getL_float();
          boolean _equals_12 = Objects.equal(_l_float_1, null);
          _and = _equals_12;
        }
        if (_and) {
          this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION_AUX__EXPRESSOES);
        }
      } else {
        this.error("Invalid operator", SimpleJavaPackage.Literals.EXPRESSION_AUX__OPERADOR);
      }
    } else {
      this.error("Invalid expression", SimpleJavaPackage.Literals.EXPRESSION_AUX__EXPRESSOES);
    }
  }
  
  public void checkInterativeWhile(final EList<type_declaration> list) {
    for (final type_declaration declaracoes : list) {
      class_declaration _declaracaoClasse = declaracoes.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      while_statement _corpoWhile = _corpo.getCorpoWhile();
      this.checkWhile(_corpoWhile);
    }
  }
  
  public void checkVariableDeclaration(final EList<type_declaration> list) {
    for (final type_declaration declaracoes : list) {
      {
        class_declaration _declaracaoClasse = declaracoes.getDeclaracaoClasse();
        field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
        variable_declaration _declaracaoVariavel = _corpoClasse.getDeclaracaoVariavel();
        this.checkDeclaracaoVariavel(_declaracaoVariavel);
        interface_declaration _declaracaoInterface = declaracoes.getDeclaracaoInterface();
        field_declaration _corpoInterface = _declaracaoInterface.getCorpoInterface();
        variable_declaration _declaracaoVariavel_1 = _corpoInterface.getDeclaracaoVariavel();
        this.checkDeclaracaoVariavel(_declaracaoVariavel_1);
      }
    }
  }
  
  public void checkDeclaracaoVariavel(final variable_declaration declaration) {
    type _tipoVariavel = declaration.getTipoVariavel();
    EObject _tipo = _tipoVariavel.getTipo();
    String _valueOf = String.valueOf(_tipo);
    Tipo tipo = new Tipo(_valueOf);
    boolean _contains = this.tipos.contains(tipo);
    boolean _not = (!_contains);
    if (_not) {
      this.error("Inexistent type", SimpleJavaPackage.Literals.VARIABLE_DECLARATION__TIPO_VARIAVEL);
    } else {
      EList<variable_declarator> vars = declaration.getDeclaracaoVariaveis();
      for (final variable_declarator variable : vars) {
        {
          String _nomeVariavel = variable.getNomeVariavel();
          Variavel variavel = new Variavel(_nomeVariavel, tipo);
          String _nomeVariavel_1 = variable.getNomeVariavel();
          boolean _containsKey = this.variaveis.containsKey(_nomeVariavel_1);
          boolean _not_1 = (!_containsKey);
          if (_not_1) {
            String _nomeVariavel_2 = variable.getNomeVariavel();
            this.variaveis.put(_nomeVariavel_2, variavel);
          } else {
            this.error("Variable alredy exist", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL);
          }
        }
      }
    }
  }
  
  public Object checkWhile(final while_statement statement) {
    Object _xblockexpression = null;
    {
      expression _expressaoWhile = statement.getExpressaoWhile();
      expression_aux _expressoes = _expressaoWhile.getExpressoes();
      String operador = _expressoes.getOperador();
      expression _expressaoWhile_1 = statement.getExpressaoWhile();
      String _identificador = _expressaoWhile_1.getIdentificador();
      Metodo metodo = this.metodos.get(_identificador);
      expression _expressaoWhile_2 = statement.getExpressaoWhile();
      String _identificador_1 = _expressaoWhile_2.getIdentificador();
      Variavel variavel = this.variaveis.get(_identificador_1);
      Object _xifexpression = null;
      boolean _and = false;
      boolean _and_1 = false;
      boolean _and_2 = false;
      boolean _and_3 = false;
      boolean _and_4 = false;
      boolean _and_5 = false;
      boolean _and_6 = false;
      boolean _and_7 = false;
      boolean _and_8 = false;
      boolean _and_9 = false;
      boolean _and_10 = false;
      boolean _and_11 = false;
      expression _expressaoWhile_3 = statement.getExpressaoWhile();
      logical_expression _logical = _expressaoWhile_3.getLogical();
      boolean _equals = Objects.equal(_logical, null);
      if (!_equals) {
        _and_11 = false;
      } else {
        boolean _notEquals = (!Objects.equal(operador, ">"));
        _and_11 = _notEquals;
      }
      if (!_and_11) {
        _and_10 = false;
      } else {
        boolean _notEquals_1 = (!Objects.equal(operador, "<"));
        _and_10 = _notEquals_1;
      }
      if (!_and_10) {
        _and_9 = false;
      } else {
        boolean _notEquals_2 = (!Objects.equal(operador, ">="));
        _and_9 = _notEquals_2;
      }
      if (!_and_9) {
        _and_8 = false;
      } else {
        boolean _notEquals_3 = (!Objects.equal(operador, "<="));
        _and_8 = _notEquals_3;
      }
      if (!_and_8) {
        _and_7 = false;
      } else {
        boolean _notEquals_4 = (!Objects.equal(operador, "=="));
        _and_7 = _notEquals_4;
      }
      if (!_and_7) {
        _and_6 = false;
      } else {
        boolean _notEquals_5 = (!Objects.equal(operador, "!="));
        _and_6 = _notEquals_5;
      }
      if (!_and_6) {
        _and_5 = false;
      } else {
        boolean _notEquals_6 = (!Objects.equal(operador, ">>="));
        _and_5 = _notEquals_6;
      }
      if (!_and_5) {
        _and_4 = false;
      } else {
        boolean _notEquals_7 = (!Objects.equal(operador, "<<"));
        _and_4 = _notEquals_7;
      }
      if (!_and_4) {
        _and_3 = false;
      } else {
        boolean _notEquals_8 = (!Objects.equal(operador, ">>"));
        _and_3 = _notEquals_8;
      }
      if (!_and_3) {
        _and_2 = false;
      } else {
        boolean _notEquals_9 = (!Objects.equal(operador, ">>>"));
        _and_2 = _notEquals_9;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals_1 = _nome.equals("boolean");
        boolean _not = (!_equals_1);
        _and_1 = _not;
      }
      if (!_and_1) {
        _and = false;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_2 = _nome_1.equals("boolean");
        boolean _not_1 = (!_equals_2);
        _and = _not_1;
      }
      if (_and) {
        this.error("Invalid expression", SimpleJavaPackage.Literals.STATEMENT__EXPRESSAO);
      } else {
        Object _xifexpression_1 = null;
        org.xtext.example.simpleJava.statement _blocoWhile = statement.getBlocoWhile();
        statement_block _bloco = _blocoWhile.getBloco();
        org.xtext.example.simpleJava.statement _corpo = _bloco.getCorpo();
        while_statement _corpoWhile = _corpo.getCorpoWhile();
        boolean _notEquals_10 = (!Objects.equal(_corpoWhile, null));
        if (_notEquals_10) {
          org.xtext.example.simpleJava.statement _blocoWhile_1 = statement.getBlocoWhile();
          statement_block _bloco_1 = _blocoWhile_1.getBloco();
          org.xtext.example.simpleJava.statement _corpo_1 = _bloco_1.getCorpo();
          while_statement _corpoWhile_1 = _corpo_1.getCorpoWhile();
          _xifexpression_1 = this.checkWhile(_corpoWhile_1);
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void checkVariableInitializer(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      {
        class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
        field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
        variable_declaration _declaracaoVariavel = _corpoClasse.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis = _declaracaoVariavel.getDeclaracaoVariaveis();
        this.checkInicializacaoVariavel(_declaracaoVariaveis);
        interface_declaration _declaracaoInterface = td.getDeclaracaoInterface();
        field_declaration _corpoInterface = _declaracaoInterface.getCorpoInterface();
        variable_declaration _declaracaoVariavel_1 = _corpoInterface.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis_1 = _declaracaoVariavel_1.getDeclaracaoVariaveis();
        this.checkInicializacaoVariavel(_declaracaoVariaveis_1);
      }
    }
  }
  
  public void checkInicializacaoVariavel(final EList<variable_declarator> list) {
    for (final variable_declarator vd : list) {
      String _nomeVariavel = vd.getNomeVariavel();
      boolean _containsKey = this.variaveis.containsKey(_nomeVariavel);
      boolean _not = (!_containsKey);
      if (_not) {
        this.error("inexistent variable", SimpleJavaPackage.Literals.VARIABLE_DECLARATOR__NOME_VARIAVEL);
      } else {
        String _nomeVariavel_1 = vd.getNomeVariavel();
        Variavel v = this.variaveis.get(_nomeVariavel_1);
        boolean _and = false;
        variable_initializer _valorVariavel = vd.getValorVariavel();
        expression _expressaoVariavel = _valorVariavel.getExpressaoVariavel();
        logical_expression _logical = _expressaoVariavel.getLogical();
        boolean _notEquals = (!Objects.equal(_logical, null));
        if (!_notEquals) {
          _and = false;
        } else {
          Tipo _tipo = v.getTipo();
          Tipo _tipo_1 = new Tipo("boolean");
          boolean _equals = _tipo.equals(_tipo_1);
          boolean _not_1 = (!_equals);
          _and = _not_1;
        }
        if (_and) {
          this.error("Expeted to boolean", SimpleJavaPackage.Literals.VARIABLE_INITIALIZER__EXPRESSAO_VARIAVEL);
        } else {
          boolean _and_1 = false;
          variable_initializer _valorVariavel_1 = vd.getValorVariavel();
          expression _expressaoVariavel_1 = _valorVariavel_1.getExpressaoVariavel();
          literal_expression _literal = _expressaoVariavel_1.getLiteral();
          String _decimal = _literal.getDecimal();
          boolean _notEquals_1 = (!Objects.equal(_decimal, null));
          if (!_notEquals_1) {
            _and_1 = false;
          } else {
            Tipo _tipo_2 = v.getTipo();
            Tipo _tipo_3 = new Tipo("double");
            boolean _equals_1 = _tipo_2.equals(_tipo_3);
            boolean _not_2 = (!_equals_1);
            _and_1 = _not_2;
          }
          if (_and_1) {
            this.error("Expeted to double", SimpleJavaPackage.Literals.VARIABLE_INITIALIZER__EXPRESSAO_VARIAVEL);
          } else {
            boolean _and_2 = false;
            variable_initializer _valorVariavel_2 = vd.getValorVariavel();
            expression _expressaoVariavel_2 = _valorVariavel_2.getExpressaoVariavel();
            literal_expression _literal_1 = _expressaoVariavel_2.getLiteral();
            String _l_float = _literal_1.getL_float();
            boolean _notEquals_2 = (!Objects.equal(_l_float, null));
            if (!_notEquals_2) {
              _and_2 = false;
            } else {
              Tipo _tipo_4 = v.getTipo();
              Tipo _tipo_5 = new Tipo("float");
              boolean _equals_2 = _tipo_4.equals(_tipo_5);
              boolean _not_3 = (!_equals_2);
              _and_2 = _not_3;
            }
            if (_and_2) {
              this.error("Expeted to float", SimpleJavaPackage.Literals.VARIABLE_INITIALIZER__EXPRESSAO_VARIAVEL);
            } else {
              boolean _and_3 = false;
              variable_initializer _valorVariavel_3 = vd.getValorVariavel();
              expression _expressaoVariavel_3 = _valorVariavel_3.getExpressaoVariavel();
              literal_expression _literal_2 = _expressaoVariavel_3.getLiteral();
              String _inteiro = _literal_2.getInteiro();
              boolean _notEquals_3 = (!Objects.equal(_inteiro, null));
              if (!_notEquals_3) {
                _and_3 = false;
              } else {
                Tipo _tipo_6 = v.getTipo();
                Tipo _tipo_7 = new Tipo("int");
                boolean _equals_3 = _tipo_6.equals(_tipo_7);
                boolean _not_4 = (!_equals_3);
                _and_3 = _not_4;
              }
              if (_and_3) {
                this.error("Expeted to int", SimpleJavaPackage.Literals.VARIABLE_INITIALIZER__EXPRESSAO_VARIAVEL);
              } else {
                boolean _and_4 = false;
                variable_initializer _valorVariavel_4 = vd.getValorVariavel();
                expression _expressaoVariavel_4 = _valorVariavel_4.getExpressaoVariavel();
                String _identificador = _expressaoVariavel_4.getIdentificador();
                boolean _notEquals_4 = (!Objects.equal(_identificador, null));
                if (!_notEquals_4) {
                  _and_4 = false;
                } else {
                  Tipo _tipo_8 = v.getTipo();
                  variable_initializer _valorVariavel_5 = vd.getValorVariavel();
                  expression _expressaoVariavel_5 = _valorVariavel_5.getExpressaoVariavel();
                  String _identificador_1 = _expressaoVariavel_5.getIdentificador();
                  Variavel _get = this.variaveis.get(_identificador_1);
                  Tipo _tipo_9 = _get.getTipo();
                  boolean _equals_4 = _tipo_8.equals(_tipo_9);
                  boolean _not_5 = (!_equals_4);
                  _and_4 = _not_5;
                }
                if (_and_4) {
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void checkTypeDeclaration(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      boolean _notEquals = (!Objects.equal(_declaracaoClasse, null));
      if (_notEquals) {
        class_declaration _declaracaoClasse_1 = td.getDeclaracaoClasse();
        String _nomeClasse = _declaracaoClasse_1.getNomeClasse();
        this.addType(_nomeClasse);
      } else {
        interface_declaration _declaracaoInterface = td.getDeclaracaoInterface();
        String _nomeInterface = _declaracaoInterface.getNomeInterface();
        this.addType(_nomeInterface);
      }
    }
  }
  
  public boolean addType(final String tipo) {
    boolean _xblockexpression = false;
    {
      Tipo t = new Tipo(tipo);
      boolean _xifexpression = false;
      boolean _contains = this.tipos.contains(t);
      boolean _not = (!_contains);
      if (_not) {
        _xifexpression = this.tipos.add(t);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public boolean isArimeticExp(final expression expression) {
    boolean _or = false;
    boolean _or_1 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      _or_1 = true;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _notEquals_1 = (!Objects.equal(_inteiro, null));
      _or_1 = _notEquals_1;
    }
    if (_or_1) {
      _or = true;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _notEquals_2 = (!Objects.equal(_l_float, null));
      _or = _notEquals_2;
    }
    if (_or) {
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      boolean _or_11 = false;
      boolean _or_12 = false;
      expression_aux _expressoes = expression.getExpressoes();
      mais_aux _op = _expressoes.getOp();
      boolean _notEquals_3 = (!Objects.equal(_op, null));
      if (_notEquals_3) {
        _or_12 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador = _expressoes_1.getOperador();
        boolean _equals = Objects.equal(_operador, "++");
        _or_12 = _equals;
      }
      if (_or_12) {
        _or_11 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_1 = _expressoes_2.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "--");
        _or_11 = _equals_1;
      }
      if (_or_11) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_2 = _expressoes_3.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "-");
        _or_10 = _equals_2;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_3 = _expressoes_4.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "-=");
        _or_9 = _equals_3;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_4 = _expressoes_5.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "*");
        _or_8 = _equals_4;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_5 = _expressoes_6.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "*=");
        _or_7 = _equals_5;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_6 = _expressoes_7.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "/");
        _or_6 = _equals_6;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_7 = _expressoes_8.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "/=");
        _or_5 = _equals_7;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_8 = _expressoes_9.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "%");
        _or_4 = _equals_8;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_9 = _expressoes_10.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or_3 = _equals_9;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        numeric_expression _numeric = expression.getNumeric();
        boolean _notEquals_4 = (!Objects.equal(_numeric, null));
        _or_2 = _notEquals_4;
      }
      if (_or_2) {
        boolean _or_13 = false;
        boolean _or_14 = false;
        literal_expression _literal_3 = expression.getLiteral();
        String _decimal_1 = _literal_3.getDecimal();
        boolean _notEquals_5 = (!Objects.equal(_decimal_1, null));
        if (_notEquals_5) {
          _or_14 = true;
        } else {
          literal_expression _literal_4 = expression.getLiteral();
          String _inteiro_1 = _literal_4.getInteiro();
          boolean _notEquals_6 = (!Objects.equal(_inteiro_1, null));
          _or_14 = _notEquals_6;
        }
        if (_or_14) {
          _or_13 = true;
        } else {
          literal_expression _literal_5 = expression.getLiteral();
          String _l_float_1 = _literal_5.getL_float();
          boolean _notEquals_7 = (!Objects.equal(_l_float_1, null));
          _or_13 = _notEquals_7;
        }
        if (_or_13) {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isBooleanExp(final expression expression) {
    String _identificador = expression.getIdentificador();
    Metodo metodo = this.metodos.get(_identificador);
    String _identificador_1 = expression.getIdentificador();
    Variavel variavel = this.variaveis.get(_identificador_1);
    boolean _or = false;
    boolean _or_1 = false;
    logical_expression _logical = expression.getLogical();
    String _operador = _logical.getOperador();
    boolean _notEquals = (!Objects.equal(_operador, null));
    if (_notEquals) {
      _or_1 = true;
    } else {
      boolean _and = false;
      boolean _notEquals_1 = (!Objects.equal(metodo, null));
      if (!_notEquals_1) {
        _and = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        String _nome = _tipoRetorno.getNome();
        boolean _equals = _nome.equals("boolean");
        _and = _equals;
      }
      _or_1 = _and;
    }
    if (_or_1) {
      _or = true;
    } else {
      boolean _and_1 = false;
      boolean _notEquals_2 = (!Objects.equal(variavel, null));
      if (!_notEquals_2) {
        _and_1 = false;
      } else {
        Tipo _tipo = variavel.getTipo();
        String _nome_1 = _tipo.getNome();
        boolean _equals_1 = _nome_1.equals("boolean");
        _and_1 = _equals_1;
      }
      _or = _and_1;
    }
    if (_or) {
      boolean _or_2 = false;
      boolean _and_2 = false;
      logical_expression _logical_1 = expression.getLogical();
      String _operador_1 = _logical_1.getOperador();
      boolean _equals_2 = Objects.equal(_operador_1, "!");
      if (!_equals_2) {
        _and_2 = false;
      } else {
        logical_expression _logical_2 = expression.getLogical();
        org.xtext.example.simpleJava.expression _exp = _logical_2.getExp();
        boolean _isBooleanExp = this.isBooleanExp(_exp);
        _and_2 = _isBooleanExp;
      }
      if (_and_2) {
        _or_2 = true;
      } else {
        boolean _and_3 = false;
        boolean _or_3 = false;
        logical_expression _logical_3 = expression.getLogical();
        String _operador_2 = _logical_3.getOperador();
        boolean _equals_3 = Objects.equal(_operador_2, "true");
        if (_equals_3) {
          _or_3 = true;
        } else {
          logical_expression _logical_4 = expression.getLogical();
          String _operador_3 = _logical_4.getOperador();
          boolean _equals_4 = Objects.equal(_operador_3, "false");
          _or_3 = _equals_4;
        }
        if (!_or_3) {
          _and_3 = false;
        } else {
          expression_aux _expressoes = expression.getExpressoes();
          mais_aux _op = _expressoes.getOp();
          boolean _equals_5 = Objects.equal(_op, null);
          _and_3 = _equals_5;
        }
        _or_2 = _and_3;
      }
      if (_or_2) {
        return true;
      }
      boolean _or_4 = false;
      boolean _and_4 = false;
      boolean _notEquals_3 = (!Objects.equal(metodo, null));
      if (!_notEquals_3) {
        _and_4 = false;
      } else {
        Tipo _tipoRetorno_1 = metodo.getTipoRetorno();
        String _nome_2 = _tipoRetorno_1.getNome();
        boolean _equals_6 = _nome_2.equals("boolean");
        _and_4 = _equals_6;
      }
      if (_and_4) {
        _or_4 = true;
      } else {
        boolean _and_5 = false;
        boolean _and_6 = false;
        boolean _notEquals_4 = (!Objects.equal(variavel, null));
        if (!_notEquals_4) {
          _and_6 = false;
        } else {
          Tipo _tipo_1 = variavel.getTipo();
          String _nome_3 = _tipo_1.getNome();
          boolean _equals_7 = _nome_3.equals("boolean");
          _and_6 = _equals_7;
        }
        if (!_and_6) {
          _and_5 = false;
        } else {
          expression_aux _expressoes_1 = expression.getExpressoes();
          mais_aux _op_1 = _expressoes_1.getOp();
          boolean _equals_8 = Objects.equal(_op_1, null);
          _and_5 = _equals_8;
        }
        _or_4 = _and_5;
      }
      if (_or_4) {
        return true;
      }
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      boolean _or_11 = false;
      boolean _or_12 = false;
      boolean _or_13 = false;
      boolean _or_14 = false;
      expression_aux _expressoes_2 = expression.getExpressoes();
      String _operador_4 = _expressoes_2.getOperador();
      boolean _equals_9 = Objects.equal(_operador_4, "&");
      if (_equals_9) {
        _or_14 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_5 = _expressoes_3.getOperador();
        boolean _equals_10 = Objects.equal(_operador_5, "^=");
        _or_14 = _equals_10;
      }
      if (_or_14) {
        _or_13 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_6 = _expressoes_4.getOperador();
        boolean _equals_11 = Objects.equal(_operador_6, "&=");
        _or_13 = _equals_11;
      }
      if (_or_13) {
        _or_12 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_7 = _expressoes_5.getOperador();
        boolean _equals_12 = Objects.equal(_operador_7, "||");
        _or_12 = _equals_12;
      }
      if (_or_12) {
        _or_11 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_8 = _expressoes_6.getOperador();
        boolean _equals_13 = Objects.equal(_operador_8, "&&");
        _or_11 = _equals_13;
      }
      if (_or_11) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_9 = _expressoes_7.getOperador();
        boolean _equals_14 = Objects.equal(_operador_9, "|");
        _or_10 = _equals_14;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_10 = _expressoes_8.getOperador();
        boolean _equals_15 = Objects.equal(_operador_10, "||=");
        _or_9 = _equals_15;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_11 = _expressoes_9.getOperador();
        boolean _equals_16 = Objects.equal(_operador_11, "|=");
        _or_8 = _equals_16;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_12 = _expressoes_10.getOperador();
        boolean _equals_17 = Objects.equal(_operador_12, "%");
        _or_7 = _equals_17;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_11 = expression.getExpressoes();
        String _operador_13 = _expressoes_11.getOperador();
        boolean _equals_18 = Objects.equal(_operador_13, "^");
        _or_6 = _equals_18;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_12 = expression.getExpressoes();
        String _operador_14 = _expressoes_12.getOperador();
        boolean _equals_19 = Objects.equal(_operador_14, "%=");
        _or_5 = _equals_19;
      }
      if (_or_5) {
        boolean _or_15 = false;
        boolean _or_16 = false;
        logical_expression _logical_5 = expression.getLogical();
        String _operador_15 = _logical_5.getOperador();
        boolean _notEquals_5 = (!Objects.equal(_operador_15, null));
        if (_notEquals_5) {
          _or_16 = true;
        } else {
          boolean _and_7 = false;
          boolean _notEquals_6 = (!Objects.equal(metodo, null));
          if (!_notEquals_6) {
            _and_7 = false;
          } else {
            Tipo _tipoRetorno_2 = metodo.getTipoRetorno();
            String _nome_4 = _tipoRetorno_2.getNome();
            boolean _equals_20 = _nome_4.equals("boolean");
            _and_7 = _equals_20;
          }
          _or_16 = _and_7;
        }
        if (_or_16) {
          _or_15 = true;
        } else {
          boolean _and_8 = false;
          boolean _notEquals_7 = (!Objects.equal(variavel, null));
          if (!_notEquals_7) {
            _and_8 = false;
          } else {
            Tipo _tipo_2 = variavel.getTipo();
            String _nome_5 = _tipo_2.getNome();
            boolean _equals_21 = _nome_5.equals("boolean");
            _and_8 = _equals_21;
          }
          _or_15 = _and_8;
        }
        if (_or_15) {
          return true;
        }
      }
      boolean _and_9 = false;
      expression_aux _expressoes_13 = expression.getExpressoes();
      String _operador_16 = _expressoes_13.getOperador();
      boolean _equals_22 = Objects.equal(_operador_16, "?");
      if (!_equals_22) {
        _and_9 = false;
      } else {
        expression_aux _expressoes_14 = expression.getExpressoes();
        org.xtext.example.simpleJava.expression _exp_1 = _expressoes_14.getExp();
        expression_aux _expressoes_15 = _exp_1.getExpressoes();
        String _operador_17 = _expressoes_15.getOperador();
        boolean _equals_23 = Objects.equal(_operador_17, ":");
        _and_9 = _equals_23;
      }
      if (_and_9) {
        return true;
      }
    }
    return false;
  }
  
  public boolean isRelativeExp(final expression expression) {
    return false;
  }
  
  public boolean isVariable(final expression expression) {
    String _identificador = expression.getIdentificador();
    boolean _containsKey = this.variaveis.containsKey(_identificador);
    if (_containsKey) {
      return true;
    }
    return false;
  }
  
  public boolean isLiteral(final expression expression) {
    boolean _or = false;
    literal_expression _literal = expression.getLiteral();
    boolean _notEquals = (!Objects.equal(_literal, null));
    if (_notEquals) {
      _or = true;
    } else {
      logical_expression _logical = expression.getLogical();
      String _operador = _logical.getOperador();
      boolean _notEquals_1 = (!Objects.equal(_operador, "!"));
      _or = _notEquals_1;
    }
    if (_or) {
      return true;
    }
    return false;
  }
  
  public boolean isAtribuicao(final expression expression) {
    boolean _or = false;
    boolean _or_1 = false;
    boolean _or_2 = false;
    boolean _or_3 = false;
    boolean _or_4 = false;
    boolean _or_5 = false;
    boolean _or_6 = false;
    boolean _or_7 = false;
    creating_expression _novo = expression.getNovo();
    boolean _notEquals = (!Objects.equal(_novo, null));
    if (_notEquals) {
      _or_7 = true;
    } else {
      expression_aux _expressoes = expression.getExpressoes();
      String _operador = _expressoes.getOperador();
      boolean _equals = Objects.equal(_operador, "^=");
      _or_7 = _equals;
    }
    if (_or_7) {
      _or_6 = true;
    } else {
      expression_aux _expressoes_1 = expression.getExpressoes();
      String _operador_1 = _expressoes_1.getOperador();
      boolean _equals_1 = Objects.equal(_operador_1, "*=");
      _or_6 = _equals_1;
    }
    if (_or_6) {
      _or_5 = true;
    } else {
      expression_aux _expressoes_2 = expression.getExpressoes();
      String _operador_2 = _expressoes_2.getOperador();
      boolean _equals_2 = Objects.equal(_operador_2, "-=");
      _or_5 = _equals_2;
    }
    if (_or_5) {
      _or_4 = true;
    } else {
      expression_aux _expressoes_3 = expression.getExpressoes();
      String _operador_3 = _expressoes_3.getOperador();
      boolean _equals_3 = Objects.equal(_operador_3, "||=");
      _or_4 = _equals_3;
    }
    if (_or_4) {
      _or_3 = true;
    } else {
      expression_aux _expressoes_4 = expression.getExpressoes();
      String _operador_4 = _expressoes_4.getOperador();
      boolean _equals_4 = Objects.equal(_operador_4, "|=");
      _or_3 = _equals_4;
    }
    if (_or_3) {
      _or_2 = true;
    } else {
      expression_aux _expressoes_5 = expression.getExpressoes();
      String _operador_5 = _expressoes_5.getOperador();
      boolean _equals_5 = Objects.equal(_operador_5, "/=");
      _or_2 = _equals_5;
    }
    if (_or_2) {
      _or_1 = true;
    } else {
      expression_aux _expressoes_6 = expression.getExpressoes();
      String _operador_6 = _expressoes_6.getOperador();
      boolean _equals_6 = Objects.equal(_operador_6, "%=");
      _or_1 = _equals_6;
    }
    if (_or_1) {
      _or = true;
    } else {
      expression_aux _expressoes_7 = expression.getExpressoes();
      String _operador_7 = _expressoes_7.getOperador();
      boolean _equals_7 = Objects.equal(_operador_7, "&=");
      _or = _equals_7;
    }
    if (_or) {
      return true;
    }
    return false;
  }
  
  public void load(final String end1, final String end2) {
    this.salvarArquivo(((("LD " + end1) + ", ") + end2));
  }
  
  public void load(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("LD " + end1) + ", ") + end2) + "(") + deslocamento) + ")"));
  }
  
  public void storeRight(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("ST " + end1) + ", ") + end2) + "(") + deslocamento) + ")"));
  }
  
  public void storeLeft(final String end1, final String end2, final String deslocamento) {
    this.salvarArquivo((((((("ST " + end1) + "(") + deslocamento) + ")") + ", ") + end2));
  }
  
  public void store(final String end1, final String end2) {
    this.salvarArquivo(((("ST " + end1) + ", ") + end2));
  }
  
  public void DesvioIncod(final String label) {
    this.salvarArquivo(("BR " + label));
  }
  
  public void DesvioCond(final String op, final String end, final String label) {
    boolean _equals = op.equals("maior");
    if (_equals) {
      this.salvarArquivo(((("BGTZ " + end) + ", ") + label));
    } else {
      boolean _equals_1 = op.equals("menor");
      if (_equals_1) {
        this.salvarArquivo(((("BLTZ " + end) + ", ") + label));
      } else {
        boolean _equals_2 = op.equals("igual");
        if (_equals_2) {
          this.salvarArquivo(((("BETZ " + end) + ", ") + label));
        }
      }
    }
  }
  
  public void op(final String op, final String dest, final String end1, final String end2) {
    boolean _equals = op.equals("soma");
    if (_equals) {
      this.salvarArquivo(((((("ADD " + dest) + ", ") + end1) + ", ") + end2));
    } else {
      boolean _equals_1 = op.equals("subtracao");
      if (_equals_1) {
        this.salvarArquivo(((((("SUB " + dest) + ", ") + end1) + ", ") + end2));
      } else {
        boolean _equals_2 = op.equals("multplicacao");
        if (_equals_2) {
          this.salvarArquivo(((((("MULT " + dest) + ", ") + end1) + ", ") + end2));
        } else {
          boolean _equals_3 = op.equals("divisao");
          if (_equals_3) {
            this.salvarArquivo(((((("DIV " + dest) + ", ") + end1) + ", ") + end2));
          }
        }
      }
    }
  }
  
  public void salvarArquivo(final String s) {
    try {
      File arquivo = new File("/home/franklin/teste.txt");
      FileWriter fw = new FileWriter(arquivo, true);
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(s);
      bw.newLine();
      bw.close();
      fw.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void genCodeOP(final expression exp, final String op) {
    literal_expression _literal = exp.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (_notEquals) {
      expression _exp = exp.getExp();
      literal_expression _literal_1 = _exp.getLiteral();
      String _decimal_1 = _literal_1.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal_1, null));
      if (_notEquals_1) {
        literal_expression _literal_2 = exp.getLiteral();
        String _decimal_2 = _literal_2.getDecimal();
        expression _exp_1 = exp.getExp();
        literal_expression _literal_3 = _exp_1.getLiteral();
        String _decimal_3 = _literal_3.getDecimal();
        this.op(op, "r1", _decimal_2, _decimal_3);
      } else {
        expression _exp_2 = exp.getExp();
        literal_expression _literal_4 = _exp_2.getLiteral();
        String _inteiro = _literal_4.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          literal_expression _literal_5 = exp.getLiteral();
          String _decimal_4 = _literal_5.getDecimal();
          expression _exp_3 = exp.getExp();
          literal_expression _literal_6 = _exp_3.getLiteral();
          String _inteiro_1 = _literal_6.getInteiro();
          this.op(op, "r1", _decimal_4, _inteiro_1);
        } else {
          expression _exp_4 = exp.getExp();
          literal_expression _literal_7 = _exp_4.getLiteral();
          String _l_float = _literal_7.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            literal_expression _literal_8 = exp.getLiteral();
            String _decimal_5 = _literal_8.getDecimal();
            expression _exp_5 = exp.getExp();
            literal_expression _literal_9 = _exp_5.getLiteral();
            String _l_float_1 = _literal_9.getL_float();
            this.op(op, "r1", _decimal_5, _l_float_1);
          } else {
            expression _exp_6 = exp.getExp();
            String _identificador = _exp_6.getIdentificador();
            boolean _notEquals_4 = (!Objects.equal(_identificador, null));
            if (_notEquals_4) {
              expression _exp_7 = exp.getExp();
              this.genUseVariableCode(_exp_7);
              literal_expression _literal_10 = exp.getLiteral();
              String _decimal_6 = _literal_10.getDecimal();
              int _size = this.registradores.size();
              int _minus = (_size - 1);
              Integer _get = this.registradores.get(_minus);
              String _plus = ("r" + _get);
              this.op(op, "r1", _decimal_6, _plus);
            }
          }
        }
      }
    } else {
      literal_expression _literal_11 = exp.getLiteral();
      String _inteiro_2 = _literal_11.getInteiro();
      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
      if (_notEquals_5) {
        expression _exp_8 = exp.getExp();
        literal_expression _literal_12 = _exp_8.getLiteral();
        String _decimal_7 = _literal_12.getDecimal();
        boolean _notEquals_6 = (!Objects.equal(_decimal_7, null));
        if (_notEquals_6) {
          literal_expression _literal_13 = exp.getLiteral();
          String _inteiro_3 = _literal_13.getInteiro();
          expression _exp_9 = exp.getExp();
          literal_expression _literal_14 = _exp_9.getLiteral();
          String _decimal_8 = _literal_14.getDecimal();
          this.op(op, "r1", _inteiro_3, _decimal_8);
        } else {
          expression _exp_10 = exp.getExp();
          literal_expression _literal_15 = _exp_10.getLiteral();
          String _inteiro_4 = _literal_15.getInteiro();
          boolean _notEquals_7 = (!Objects.equal(_inteiro_4, null));
          if (_notEquals_7) {
            literal_expression _literal_16 = exp.getLiteral();
            String _inteiro_5 = _literal_16.getInteiro();
            expression _exp_11 = exp.getExp();
            literal_expression _literal_17 = _exp_11.getLiteral();
            String _inteiro_6 = _literal_17.getInteiro();
            this.op(op, "r1", _inteiro_5, _inteiro_6);
          } else {
            expression _exp_12 = exp.getExp();
            literal_expression _literal_18 = _exp_12.getLiteral();
            String _l_float_2 = _literal_18.getL_float();
            boolean _notEquals_8 = (!Objects.equal(_l_float_2, null));
            if (_notEquals_8) {
              literal_expression _literal_19 = exp.getLiteral();
              String _inteiro_7 = _literal_19.getInteiro();
              expression _exp_13 = exp.getExp();
              literal_expression _literal_20 = _exp_13.getLiteral();
              String _l_float_3 = _literal_20.getL_float();
              this.op(op, "r1", _inteiro_7, _l_float_3);
            } else {
              expression _exp_14 = exp.getExp();
              String _identificador_1 = _exp_14.getIdentificador();
              boolean _notEquals_9 = (!Objects.equal(_identificador_1, null));
              if (_notEquals_9) {
                expression _exp_15 = exp.getExp();
                this.genUseVariableCode(_exp_15);
                literal_expression _literal_21 = exp.getLiteral();
                String _decimal_9 = _literal_21.getDecimal();
                int _size_1 = this.registradores.size();
                int _minus_1 = (_size_1 - 1);
                Integer _get_1 = this.registradores.get(_minus_1);
                String _plus_1 = ("r" + _get_1);
                this.op(op, "r1", _decimal_9, _plus_1);
              }
            }
          }
        }
      } else {
        literal_expression _literal_22 = exp.getLiteral();
        String _l_float_4 = _literal_22.getL_float();
        boolean _notEquals_10 = (!Objects.equal(_l_float_4, null));
        if (_notEquals_10) {
          expression _exp_16 = exp.getExp();
          literal_expression _literal_23 = _exp_16.getLiteral();
          String _decimal_10 = _literal_23.getDecimal();
          boolean _notEquals_11 = (!Objects.equal(_decimal_10, null));
          if (_notEquals_11) {
            literal_expression _literal_24 = exp.getLiteral();
            String _l_float_5 = _literal_24.getL_float();
            expression _exp_17 = exp.getExp();
            literal_expression _literal_25 = _exp_17.getLiteral();
            String _decimal_11 = _literal_25.getDecimal();
            this.op(op, "r1", _l_float_5, _decimal_11);
          } else {
            expression _exp_18 = exp.getExp();
            literal_expression _literal_26 = _exp_18.getLiteral();
            String _inteiro_8 = _literal_26.getInteiro();
            boolean _notEquals_12 = (!Objects.equal(_inteiro_8, null));
            if (_notEquals_12) {
              literal_expression _literal_27 = exp.getLiteral();
              String _l_float_6 = _literal_27.getL_float();
              expression _exp_19 = exp.getExp();
              literal_expression _literal_28 = _exp_19.getLiteral();
              String _inteiro_9 = _literal_28.getInteiro();
              this.op(op, "r1", _l_float_6, _inteiro_9);
            } else {
              expression _exp_20 = exp.getExp();
              literal_expression _literal_29 = _exp_20.getLiteral();
              String _l_float_7 = _literal_29.getL_float();
              boolean _notEquals_13 = (!Objects.equal(_l_float_7, null));
              if (_notEquals_13) {
                literal_expression _literal_30 = exp.getLiteral();
                String _l_float_8 = _literal_30.getL_float();
                expression _exp_21 = exp.getExp();
                literal_expression _literal_31 = _exp_21.getLiteral();
                String _l_float_9 = _literal_31.getL_float();
                this.op(op, "r1", _l_float_8, _l_float_9);
              } else {
                expression _exp_22 = exp.getExp();
                String _identificador_2 = _exp_22.getIdentificador();
                boolean _notEquals_14 = (!Objects.equal(_identificador_2, null));
                if (_notEquals_14) {
                  expression _exp_23 = exp.getExp();
                  this.genUseVariableCode(_exp_23);
                  literal_expression _literal_32 = exp.getLiteral();
                  String _decimal_12 = _literal_32.getDecimal();
                  int _size_2 = this.registradores.size();
                  int _minus_2 = (_size_2 - 1);
                  Integer _get_2 = this.registradores.get(_minus_2);
                  String _plus_2 = ("r" + _get_2);
                  this.op(op, "r1", _decimal_12, _plus_2);
                }
              }
            }
          }
        } else {
          expression _exp_24 = exp.getExp();
          String _identificador_3 = _exp_24.getIdentificador();
          boolean _notEquals_15 = (!Objects.equal(_identificador_3, null));
          if (_notEquals_15) {
            expression _exp_25 = exp.getExp();
            literal_expression _literal_33 = _exp_25.getLiteral();
            String _decimal_13 = _literal_33.getDecimal();
            boolean _notEquals_16 = (!Objects.equal(_decimal_13, null));
            if (_notEquals_16) {
              String _identificador_4 = exp.getIdentificador();
              expression _exp_26 = exp.getExp();
              literal_expression _literal_34 = _exp_26.getLiteral();
              String _decimal_14 = _literal_34.getDecimal();
              this.op(op, "r1", _identificador_4, _decimal_14);
            } else {
              expression _exp_27 = exp.getExp();
              literal_expression _literal_35 = _exp_27.getLiteral();
              String _inteiro_10 = _literal_35.getInteiro();
              boolean _notEquals_17 = (!Objects.equal(_inteiro_10, null));
              if (_notEquals_17) {
                String _identificador_5 = exp.getIdentificador();
                expression _exp_28 = exp.getExp();
                literal_expression _literal_36 = _exp_28.getLiteral();
                String _inteiro_11 = _literal_36.getInteiro();
                this.op(op, "r1", _identificador_5, _inteiro_11);
              } else {
                expression _exp_29 = exp.getExp();
                literal_expression _literal_37 = _exp_29.getLiteral();
                String _l_float_10 = _literal_37.getL_float();
                boolean _notEquals_18 = (!Objects.equal(_l_float_10, null));
                if (_notEquals_18) {
                  String _identificador_6 = exp.getIdentificador();
                  expression _exp_30 = exp.getExp();
                  literal_expression _literal_38 = _exp_30.getLiteral();
                  String _l_float_11 = _literal_38.getL_float();
                  this.op(op, "r1", _identificador_6, _l_float_11);
                } else {
                  expression _exp_31 = exp.getExp();
                  String _identificador_7 = _exp_31.getIdentificador();
                  boolean _notEquals_19 = (!Objects.equal(_identificador_7, null));
                  if (_notEquals_19) {
                    expression _exp_32 = exp.getExp();
                    this.genUseVariableCode(_exp_32);
                    String _identificador_8 = exp.getIdentificador();
                    int _size_3 = this.registradores.size();
                    int _minus_3 = (_size_3 - 1);
                    Integer _get_3 = this.registradores.get(_minus_3);
                    String _plus_3 = ("r" + _get_3);
                    this.op(op, "r1", _identificador_8, _plus_3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void genAritmeticExpCode(final expression exp) {
    boolean _isArimeticExp = this.isArimeticExp(exp);
    if (_isArimeticExp) {
      mais_aux _op = exp.getOp();
      boolean _notEquals = (!Objects.equal(_op, null));
      if (_notEquals) {
        mais_aux _op_1 = exp.getOp();
        String _operador = _op_1.getOperador();
        boolean _equals = _operador.equals("+");
        if (_equals) {
          this.genCodeOP(exp, "soma");
        } else {
          expression _exp = exp.getExp();
          this.genCodeOP(_exp, "soma");
          String _identificador = exp.getIdentificador();
          this.store(_identificador, "r1");
        }
      } else {
        mais_aux _op_2 = exp.getOp();
        String _operador_1 = _op_2.getOperador();
        boolean _equals_1 = _operador_1.equals("-");
        if (_equals_1) {
          this.genCodeOP(exp, "subtracao");
        } else {
          mais_aux _op_3 = exp.getOp();
          String _operador_2 = _op_3.getOperador();
          boolean _equals_2 = _operador_2.equals("*");
          if (_equals_2) {
            this.genCodeOP(exp, "multplicacao");
          } else {
            mais_aux _op_4 = exp.getOp();
            String _operador_3 = _op_4.getOperador();
            boolean _equals_3 = _operador_3.equals("/");
            if (_equals_3) {
              this.genCodeOP(exp, "divisao");
            } else {
              mais_aux _op_5 = exp.getOp();
              String _operador_4 = _op_5.getOperador();
              boolean _equals_4 = _operador_4.equals("-");
              if (_equals_4) {
                this.genCodeOP(exp, "subtracao");
              } else {
                mais_aux _op_6 = exp.getOp();
                String _operador_5 = _op_6.getOperador();
                boolean _equals_5 = _operador_5.equals("++");
                if (_equals_5) {
                  literal_expression _literal = exp.getLiteral();
                  String _decimal = _literal.getDecimal();
                  boolean _notEquals_1 = (!Objects.equal(_decimal, null));
                  if (_notEquals_1) {
                    literal_expression _literal_1 = exp.getLiteral();
                    String _decimal_1 = _literal_1.getDecimal();
                    this.op("mais", "r1", _decimal_1, "1");
                  } else {
                    literal_expression _literal_2 = exp.getLiteral();
                    String _inteiro = _literal_2.getInteiro();
                    boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
                    if (_notEquals_2) {
                      literal_expression _literal_3 = exp.getLiteral();
                      String _inteiro_1 = _literal_3.getInteiro();
                      this.op("mais", "r1", _inteiro_1, "1");
                    } else {
                      literal_expression _literal_4 = exp.getLiteral();
                      String _l_float = _literal_4.getL_float();
                      boolean _notEquals_3 = (!Objects.equal(_l_float, null));
                      if (_notEquals_3) {
                        literal_expression _literal_5 = exp.getLiteral();
                        String _l_float_1 = _literal_5.getL_float();
                        this.op("mais", "r1", _l_float_1, "1");
                      }
                    }
                  }
                } else {
                  mais_aux _op_7 = exp.getOp();
                  String _operador_6 = _op_7.getOperador();
                  boolean _equals_6 = _operador_6.equals("--");
                  if (_equals_6) {
                    literal_expression _literal_6 = exp.getLiteral();
                    String _decimal_2 = _literal_6.getDecimal();
                    boolean _notEquals_4 = (!Objects.equal(_decimal_2, null));
                    if (_notEquals_4) {
                      literal_expression _literal_7 = exp.getLiteral();
                      String _decimal_3 = _literal_7.getDecimal();
                      this.op("menos", "r1", _decimal_3, "1");
                    } else {
                      literal_expression _literal_8 = exp.getLiteral();
                      String _inteiro_2 = _literal_8.getInteiro();
                      boolean _notEquals_5 = (!Objects.equal(_inteiro_2, null));
                      if (_notEquals_5) {
                        literal_expression _literal_9 = exp.getLiteral();
                        String _inteiro_3 = _literal_9.getInteiro();
                        this.op("menos", "r1", _inteiro_3, "1");
                      } else {
                        literal_expression _literal_10 = exp.getLiteral();
                        String _l_float_2 = _literal_10.getL_float();
                        boolean _notEquals_6 = (!Objects.equal(_l_float_2, null));
                        if (_notEquals_6) {
                          literal_expression _literal_11 = exp.getLiteral();
                          String _l_float_3 = _literal_11.getL_float();
                          this.op("menos", "r1", _l_float_3, "1");
                        }
                      }
                    }
                  } else {
                    mais_aux _op_8 = exp.getOp();
                    String _operador_7 = _op_8.getOperador();
                    boolean _equals_7 = _operador_7.equals("-=");
                    if (_equals_7) {
                      expression _exp_1 = exp.getExp();
                      this.genCodeOP(_exp_1, "menos");
                      String _identificador_1 = exp.getIdentificador();
                      this.store(_identificador_1, "r1");
                    } else {
                      mais_aux _op_9 = exp.getOp();
                      String _operador_8 = _op_9.getOperador();
                      boolean _equals_8 = _operador_8.equals("*=");
                      if (_equals_8) {
                        expression _exp_2 = exp.getExp();
                        this.genCodeOP(_exp_2, "multiplicacao");
                        String _identificador_2 = exp.getIdentificador();
                        this.store(_identificador_2, "r1");
                      } else {
                        mais_aux _op_10 = exp.getOp();
                        String _operador_9 = _op_10.getOperador();
                        boolean _equals_9 = _operador_9.equals("/=");
                        if (_equals_9) {
                          expression _exp_3 = exp.getExp();
                          this.genCodeOP(_exp_3, "divisao");
                          String _identificador_3 = exp.getIdentificador();
                          this.store(_identificador_3, "r1");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public Object genBooleanExpCode(final expression exp) {
    return null;
  }
  
  public Object genExpCode(final expression exp) {
    Object _xifexpression = null;
    boolean _isBooleanExp = this.isBooleanExp(exp);
    if (_isBooleanExp) {
      _xifexpression = this.genBooleanExpCode(exp);
    } else {
      boolean _isArimeticExp = this.isArimeticExp(exp);
      if (_isArimeticExp) {
        this.genAritmeticExpCode(exp);
      } else {
        boolean _isAtribuicao = this.isAtribuicao(exp);
        if (_isAtribuicao) {
          String _identificador = exp.getIdentificador();
          expression _exp = exp.getExp();
          this.genAttCode(_identificador, _exp);
        }
      }
    }
    return _xifexpression;
  }
  
  public Object genWhileCode(final while_statement loop) {
    int _size = this.labels.size();
    int _minus = (_size - 1);
    Integer _get = this.labels.get(_minus);
    int nextLabel = ((_get).intValue() + 1);
    String label = ("label" + Integer.valueOf(nextLabel));
    expression _expressaoWhile = loop.getExpressaoWhile();
    this.genExpCode(_expressaoWhile);
    this.label(label);
    int proxLabel = (nextLabel + 1);
    String label2 = ("label" + Integer.valueOf(proxLabel));
    this.DesvioCond("BETZ", "r2", label2);
    statement _blocoWhile = loop.getBlocoWhile();
    this.genStatementCode(_blocoWhile);
    this.DesvioIncod(label);
    this.label(label);
    return null;
  }
  
  public void genSPIncCode(final String tamanho) {
    this.salvarArquivo(("ADD SP, SP, " + tamanho));
  }
  
  public void genSPDecCode(final String tamanho) {
    this.salvarArquivo(("SUB SP, SP, " + tamanho));
  }
  
  public void genUseMethodCode(final String metodo, final String tamanho) {
    this.genSPIncCode(tamanho);
    int _size = this.labels.size();
    int _minus = (_size - 1);
    Integer _get = this.labels.get(_minus);
    int nextLabel = ((_get).intValue() + 1);
    String label = ("label" + Integer.valueOf(nextLabel));
    this.store("*SP", label);
    this.DesvioIncod(metodo);
    this.label(label);
    this.genSPDecCode(tamanho);
  }
  
  public Object genStatementCode(final statement st) {
    Object _xifexpression = null;
    expression _expressao = st.getExpressao();
    boolean _notEquals = (!Objects.equal(_expressao, null));
    if (_notEquals) {
      expression _expressao_1 = st.getExpressao();
      _xifexpression = this.genExpCode(_expressao_1);
    } else {
      Object _xifexpression_1 = null;
      variable_declaration _declaracaoVariavel = st.getDeclaracaoVariavel();
      boolean _notEquals_1 = (!Objects.equal(_declaracaoVariavel, null));
      if (_notEquals_1) {
        variable_declaration _declaracaoVariavel_1 = st.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis = _declaracaoVariavel_1.getDeclaracaoVariaveis();
        for (final variable_declarator vd : _declaracaoVariaveis) {
          this.genDeclarationVariableCode(vd);
        }
      } else {
        Object _xifexpression_2 = null;
        while_statement _corpoWhile = st.getCorpoWhile();
        boolean _notEquals_2 = (!Objects.equal(_corpoWhile, null));
        if (_notEquals_2) {
          while_statement _corpoWhile_1 = st.getCorpoWhile();
          _xifexpression_2 = this.genWhileCode(_corpoWhile_1);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public void label(final String name) {
    this.salvarArquivo((name + ":"));
  }
  
  public void genStart() {
    this.load("SP", "#600");
  }
  
  public void genAttCode(final String name, final expression exp) {
    boolean _isAtribuicao = this.isAtribuicao(exp);
    if (_isAtribuicao) {
      this.genExpCode(exp);
      this.store(name, "r1");
    }
  }
  
  public Boolean genUseVariableCode(final expression exp) {
    boolean _xifexpression = false;
    boolean _isVariable = this.isVariable(exp);
    if (_isVariable) {
      boolean _xifexpression_1 = false;
      boolean _isEmpty = this.registradores.isEmpty();
      if (_isEmpty) {
        boolean _xblockexpression = false;
        {
          String _identificador = exp.getIdentificador();
          this.load("r10", _identificador);
          _xblockexpression = this.registradores.add(Integer.valueOf(10));
        }
        _xifexpression_1 = _xblockexpression;
      } else {
        String _register = this.getRegister();
        String _identificador = exp.getIdentificador();
        this.load(_register, _identificador);
      }
      _xifexpression = _xifexpression_1;
    }
    return Boolean.valueOf(_xifexpression);
  }
  
  public void genDeclarationVariableCode(final variable_declarator vd) {
    variable_initializer _valorVariavel = vd.getValorVariavel();
    expression _expressaoVariavel = _valorVariavel.getExpressaoVariavel();
    this.genExpCode(_expressaoVariavel);
    String _nomeVariavel = vd.getNomeVariavel();
    this.store(_nomeVariavel, "r1");
  }
  
  public String getRegister() {
    int _size = this.registradores.size();
    int _minus = (_size - 1);
    Integer ultimo = this.registradores.get(_minus);
    int registrador = ((ultimo).intValue() + 1);
    return ("r" + Integer.valueOf(registrador));
  }
}
