/**
 * generated by Xtext
 */
package org.xtext.example.validation;

import com.google.common.base.Objects;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.example.simpleJava.arglist;
import org.xtext.example.simpleJava.class_declaration;
import org.xtext.example.simpleJava.compilation_unit;
import org.xtext.example.simpleJava.expression;
import org.xtext.example.simpleJava.expression_aux;
import org.xtext.example.simpleJava.field_declaration;
import org.xtext.example.simpleJava.interface_declaration;
import org.xtext.example.simpleJava.literal_expression;
import org.xtext.example.simpleJava.logical_expression;
import org.xtext.example.simpleJava.mais_aux;
import org.xtext.example.simpleJava.method_declaration;
import org.xtext.example.simpleJava.numeric_expression;
import org.xtext.example.simpleJava.parameter;
import org.xtext.example.simpleJava.parameter_list;
import org.xtext.example.simpleJava.statement;
import org.xtext.example.simpleJava.statement_block;
import org.xtext.example.simpleJava.type;
import org.xtext.example.simpleJava.type_declaration;
import org.xtext.example.simpleJava.variable_declaration;
import org.xtext.example.simpleJava.variable_declarator;
import org.xtext.example.simpleJava.variable_initializer;
import org.xtext.example.simpleJava.while_statement;
import org.xtext.example.validation.AbstractSimpleJavaValidator;
import org.xtext.example.validation.Metodo;
import org.xtext.example.validation.Tipo;
import org.xtext.example.validation.Variavel;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SimpleJavaValidator extends AbstractSimpleJavaValidator {
  private final List<Tipo> tipos = new ArrayList<Tipo>();
  
  private final Map<String, Variavel> variaveis = new HashMap<String, Variavel>();
  
  private final Map<String, Metodo> metodos = new HashMap<String, Metodo>();
  
  @Check
  public void runChecks(final compilation_unit comp) {
    EList<type_declaration> _declaracao = comp.getDeclaracao();
    this.checkTypeDeclaration(_declaracao);
    EList<type_declaration> _declaracao_1 = comp.getDeclaracao();
    this.checkVariableDeclaration(_declaracao_1);
    EList<type_declaration> _declaracao_2 = comp.getDeclaracao();
    this.checkVariableInitializer(_declaracao_2);
    EList<type_declaration> _declaracao_3 = comp.getDeclaracao();
    this.checkInterativeWhile(_declaracao_3);
    EList<type_declaration> _declaracao_4 = comp.getDeclaracao();
    this.checkAritmeticExpression(_declaracao_4);
    EList<type_declaration> _declaracao_5 = comp.getDeclaracao();
    this.checkBooleanExpression(_declaracao_5);
    EList<type_declaration> _declaracao_6 = comp.getDeclaracao();
    this.checkLiterals(_declaracao_6);
    EList<type_declaration> _declaracao_7 = comp.getDeclaracao();
    this.checkVariableUsed(_declaracao_7);
    EList<type_declaration> _declaracao_8 = comp.getDeclaracao();
    this.checkMetodDeclaration(_declaracao_8);
    EList<type_declaration> _declaracao_9 = comp.getDeclaracao();
    this.checkMetodoUsed(_declaracao_9);
    EList<type_declaration> _declaracao_10 = comp.getDeclaracao();
    type_declaration _get = _declaracao_10.get(0);
    class_declaration _declaracaoClasse = _get.getDeclaracaoClasse();
    field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
    method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
    statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
    statement _corpo = _blocoMetodo.getCorpo();
    expression _expressao = _corpo.getExpressao();
    this.genArimeticExpCode(_expressao);
  }
  
  public void checkMetodoUsed(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      this.checkUsoMetodo(_declaracaoMetodo);
    }
  }
  
  public Object checkUsoMetodo(final method_declaration declaration) {
    Object _xifexpression = null;
    boolean _and = false;
    statement_block _blocoMetodo = declaration.getBlocoMetodo();
    statement _corpo = _blocoMetodo.getCorpo();
    expression _expressao = _corpo.getExpressao();
    String _identificador = _expressao.getIdentificador();
    boolean _notEquals = (!Objects.equal(_identificador, null));
    if (!_notEquals) {
      _and = false;
    } else {
      statement_block _blocoMetodo_1 = declaration.getBlocoMetodo();
      statement _corpo_1 = _blocoMetodo_1.getCorpo();
      expression _expressao_1 = _corpo_1.getExpressao();
      expression_aux _expressoes = _expressao_1.getExpressoes();
      arglist _parametros = _expressoes.getParametros();
      boolean _notEquals_1 = (!Objects.equal(_parametros, null));
      _and = _notEquals_1;
    }
    if (_and) {
      Object _xifexpression_1 = null;
      statement_block _blocoMetodo_2 = declaration.getBlocoMetodo();
      statement _corpo_2 = _blocoMetodo_2.getCorpo();
      expression _expressao_2 = _corpo_2.getExpressao();
      String _identificador_1 = _expressao_2.getIdentificador();
      boolean _containsKey = this.metodos.containsKey(_identificador_1);
      if (_containsKey) {
        Object _xblockexpression = null;
        {
          statement_block _blocoMetodo_3 = declaration.getBlocoMetodo();
          statement _corpo_3 = _blocoMetodo_3.getCorpo();
          expression _expressao_3 = _corpo_3.getExpressao();
          String _identificador_2 = _expressao_3.getIdentificador();
          Metodo m = this.metodos.get(_identificador_2);
          Object _xifexpression_2 = null;
          statement_block _blocoMetodo_4 = declaration.getBlocoMetodo();
          statement _corpo_4 = _blocoMetodo_4.getCorpo();
          expression _expressao_4 = _corpo_4.getExpressao();
          expression_aux _expressoes_1 = _expressao_4.getExpressoes();
          arglist _parametros_1 = _expressoes_1.getParametros();
          boolean _verificaParametros = this.verificaParametros(m, _parametros_1);
          boolean _not = (!_verificaParametros);
          if (_not) {
            _xifexpression_2 = null;
          }
          _xblockexpression = _xifexpression_2;
        }
        _xifexpression_1 = _xblockexpression;
      } else {
        _xifexpression_1 = null;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public Map<String, Tipo> getparametros(final arglist list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    int i = 0;
    while ((i < ((Object[])Conversions.unwrapArray(list.getTipoParametro(), Object.class)).length)) {
      {
        EList<String> _nomeParametro = list.getNomeParametro();
        String _get = _nomeParametro.get(i);
        EList<type> _tipoParametro = list.getTipoParametro();
        type _get_1 = _tipoParametro.get(i);
        String _valueOf = String.valueOf(_get_1);
        Tipo _tipo = new Tipo(_valueOf);
        p.put(_get, _tipo);
        i++;
      }
    }
    return p;
  }
  
  public boolean verificaParametros(final Metodo metodo, final arglist arglist) {
    Map<String, Tipo> _parametros = metodo.getParametros();
    Map<String, Tipo> _parametros_1 = this.getparametros(arglist);
    boolean _equals = _parametros.equals(_parametros_1);
    if (_equals) {
      return true;
    } else {
      return false;
    }
  }
  
  public void checkMetodDeclaration(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      this.checkDeclaracaoMetodo(_declaracaoMetodo);
    }
  }
  
  public Metodo checkDeclaracaoMetodo(final method_declaration declaration) {
    Metodo _xblockexpression = null;
    {
      type _tipoRetorno = declaration.getTipoRetorno();
      EObject _tipo = _tipoRetorno.getTipo();
      String _valueOf = String.valueOf(_tipo);
      Tipo tipo = new Tipo(_valueOf);
      parameter_list _parametrosMetodo = declaration.getParametrosMetodo();
      Map<String, Tipo> parametros = this.getparametros(_parametrosMetodo);
      Metodo _xifexpression = null;
      statement_block _blocoMetodo = declaration.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _return = _corpo.getReturn();
      Tipo _tipo_1 = this.getTipo(_return);
      boolean _equals = tipo.equals(_tipo_1);
      if (_equals) {
        Metodo _xblockexpression_1 = null;
        {
          String _nomeMetodo = declaration.getNomeMetodo();
          Metodo metodo = new Metodo(_nomeMetodo, tipo, parametros);
          String _nomeMetodo_1 = declaration.getNomeMetodo();
          _xblockexpression_1 = this.metodos.put(_nomeMetodo_1, metodo);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        _xifexpression = null;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public Tipo getTipo(final expression expression) {
    logical_expression _logical = expression.getLogical();
    boolean _notEquals = (!Objects.equal(_logical, null));
    if (_notEquals) {
      return new Tipo("boolean");
    } else {
      literal_expression _literal = expression.getLiteral();
      String _decimal = _literal.getDecimal();
      boolean _notEquals_1 = (!Objects.equal(_decimal, null));
      if (_notEquals_1) {
        return new Tipo("double");
      } else {
        literal_expression _literal_1 = expression.getLiteral();
        String _inteiro = _literal_1.getInteiro();
        boolean _notEquals_2 = (!Objects.equal(_inteiro, null));
        if (_notEquals_2) {
          return new Tipo("int");
        } else {
          literal_expression _literal_2 = expression.getLiteral();
          String _l_float = _literal_2.getL_float();
          boolean _notEquals_3 = (!Objects.equal(_l_float, null));
          if (_notEquals_3) {
            return new Tipo("float");
          } else {
            literal_expression _literal_3 = expression.getLiteral();
            String _string = _literal_3.getString();
            boolean _notEquals_4 = (!Objects.equal(_string, null));
            if (_notEquals_4) {
              return new Tipo("String");
            }
          }
        }
      }
    }
    for (final Tipo tipo : this.tipos) {
      Tipo _herdado = tipo.getHerdado();
      if ((_herdado instanceof org.xtext.example.simpleJava.expression)) {
        return new Tipo("boolean");
      }
    }
    return null;
  }
  
  public Map<String, Tipo> getparametros(final parameter_list list) {
    HashMap<String, Tipo> p = new HashMap<String, Tipo>();
    EList<parameter> _parametros = list.getParametros();
    for (final parameter parametro : _parametros) {
      String _nomeParametro = parametro.getNomeParametro();
      type _tipoParametro = parametro.getTipoParametro();
      EObject _tipo = _tipoParametro.getTipo();
      String _valueOf = String.valueOf(_tipo);
      Tipo _tipo_1 = new Tipo(_valueOf);
      p.put(_nomeParametro, _tipo_1);
    }
    return p;
  }
  
  public void checkVariableUsed(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      this.checkUsoVariaveis(_corpo);
    }
  }
  
  public Object checkUsoVariaveis(final statement statement) {
    Object _xblockexpression = null;
    {
      expression _expressao = statement.getExpressao();
      String variavel = _expressao.getIdentificador();
      Object _xifexpression = null;
      boolean _containsKey = this.variaveis.containsKey(variavel);
      boolean _not = (!_containsKey);
      if (_not) {
        _xifexpression = null;
      } else {
        Object _xifexpression_1 = null;
        Variavel _get = this.variaveis.get(variavel);
        expression _expressao_1 = statement.getExpressao();
        expression_aux _expressoes = _expressao_1.getExpressoes();
        expression _exp = _expressoes.getExp();
        expression_aux _expressoes_1 = _exp.getExpressoes();
        arglist _parametros = _expressoes_1.getParametros();
        Map<String, Tipo> _parametros_1 = this.getparametros(_parametros);
        boolean _equals = _get.equals(_parametros_1);
        boolean _not_1 = (!_equals);
        if (_not_1) {
          _xifexpression_1 = null;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void checkLiterals(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkLiterais(_expressao);
    }
  }
  
  public Object checkLiterais(final expression expression) {
    Object _xifexpression = null;
    literal_expression _literal = expression.getLiteral();
    String _inteiro = _literal.getInteiro();
    boolean _notEquals = (!Objects.equal(_inteiro, null));
    if (_notEquals) {
      _xifexpression = null;
    } else {
      Object _xifexpression_1 = null;
      literal_expression _literal_1 = expression.getLiteral();
      String _string = _literal_1.getString();
      boolean _notEquals_1 = (!Objects.equal(_string, null));
      if (_notEquals_1) {
        _xifexpression_1 = null;
      } else {
        Object _xifexpression_2 = null;
        logical_expression _logical = expression.getLogical();
        boolean _notEquals_2 = (!Objects.equal(_logical, null));
        if (_notEquals_2) {
          _xifexpression_2 = null;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public void checkBooleanExpression(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkBoolean(_expressao);
    }
  }
  
  public Object checkBoolean(final expression expression) {
    Object _xifexpression = null;
    logical_expression _logical = expression.getLogical();
    boolean _notEquals = (!Objects.equal(_logical, null));
    if (_notEquals) {
      Object _xifexpression_1 = null;
      boolean _or = false;
      boolean _or_1 = false;
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      String _operador = expression.getOperador();
      boolean _equals = Objects.equal(_operador, "ampersand");
      if (_equals) {
        _or_8 = true;
      } else {
        String _operador_1 = expression.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "ampersand=");
        _or_8 = _equals_1;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        String _operador_2 = expression.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "|");
        _or_7 = _equals_2;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        String _operador_3 = expression.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "|=");
        _or_6 = _equals_3;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        String _operador_4 = expression.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "^");
        _or_5 = _equals_4;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        String _operador_5 = expression.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "^=");
        _or_4 = _equals_5;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        String _operador_6 = expression.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "ampersand ampersand");
        _or_3 = _equals_6;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        String _operador_7 = expression.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "||=");
        _or_2 = _equals_7;
      }
      if (_or_2) {
        _or_1 = true;
      } else {
        String _operador_8 = expression.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "%");
        _or_1 = _equals_8;
      }
      if (_or_1) {
        _or = true;
      } else {
        String _operador_9 = expression.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or = _equals_9;
      }
      if (_or) {
        Object _xifexpression_2 = null;
        org.xtext.example.simpleJava.expression _exp = expression.getExp();
        logical_expression _logical_1 = _exp.getLogical();
        boolean _notEquals_1 = (!Objects.equal(_logical_1, null));
        if (_notEquals_1) {
          _xifexpression_2 = null;
        }
        _xifexpression_1 = _xifexpression_2;
      } else {
        _xifexpression_1 = null;
      }
      _xifexpression = _xifexpression_1;
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public void checkAritmeticExpression(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      expression _expressao = _corpo.getExpressao();
      this.checkArimetic(_expressao);
    }
  }
  
  public Object checkArimetic(final expression expression) {
    Object _xifexpression = null;
    boolean _and = false;
    boolean _and_1 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (!_notEquals) {
      _and_1 = false;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _notEquals_1 = (!Objects.equal(_inteiro, null));
      _and_1 = _notEquals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _notEquals_2 = (!Objects.equal(_l_float, null));
      _and = _notEquals_2;
    }
    if (_and) {
      Object _xifexpression_1 = null;
      boolean _or = false;
      boolean _or_1 = false;
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      expression_aux _expressoes = expression.getExpressoes();
      mais_aux _op = _expressoes.getOp();
      boolean _notEquals_3 = (!Objects.equal(_op, null));
      if (_notEquals_3) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador = _expressoes_1.getOperador();
        boolean _equals = Objects.equal(_operador, "++");
        _or_10 = _equals;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_1 = _expressoes_2.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "--");
        _or_9 = _equals_1;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_2 = _expressoes_3.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "-");
        _or_8 = _equals_2;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_3 = _expressoes_4.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "-=");
        _or_7 = _equals_3;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_4 = _expressoes_5.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "*");
        _or_6 = _equals_4;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_5 = _expressoes_6.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "*=");
        _or_5 = _equals_5;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_6 = _expressoes_7.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "/");
        _or_4 = _equals_6;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_7 = _expressoes_8.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "/=");
        _or_3 = _equals_7;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_8 = _expressoes_9.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "%");
        _or_2 = _equals_8;
      }
      if (_or_2) {
        _or_1 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_9 = _expressoes_10.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or_1 = _equals_9;
      }
      if (_or_1) {
        _or = true;
      } else {
        numeric_expression _numeric = expression.getNumeric();
        boolean _notEquals_4 = (!Objects.equal(_numeric, null));
        _or = _notEquals_4;
      }
      if (_or) {
        Object _xifexpression_2 = null;
        boolean _and_2 = false;
        boolean _and_3 = false;
        expression_aux _expressoes_11 = expression.getExpressoes();
        org.xtext.example.simpleJava.expression _exp = _expressoes_11.getExp();
        literal_expression _literal_3 = _exp.getLiteral();
        String _decimal_1 = _literal_3.getDecimal();
        boolean _equals_10 = Objects.equal(_decimal_1, null);
        if (!_equals_10) {
          _and_3 = false;
        } else {
          expression_aux _expressoes_12 = expression.getExpressoes();
          org.xtext.example.simpleJava.expression _exp_1 = _expressoes_12.getExp();
          literal_expression _literal_4 = _exp_1.getLiteral();
          String _inteiro_1 = _literal_4.getInteiro();
          boolean _equals_11 = Objects.equal(_inteiro_1, null);
          _and_3 = _equals_11;
        }
        if (!_and_3) {
          _and_2 = false;
        } else {
          expression_aux _expressoes_13 = expression.getExpressoes();
          org.xtext.example.simpleJava.expression _exp_2 = _expressoes_13.getExp();
          literal_expression _literal_5 = _exp_2.getLiteral();
          String _l_float_1 = _literal_5.getL_float();
          boolean _equals_12 = Objects.equal(_l_float_1, null);
          _and_2 = _equals_12;
        }
        if (_and_2) {
          _xifexpression_2 = null;
        }
        _xifexpression_1 = _xifexpression_2;
      } else {
        _xifexpression_1 = null;
      }
      _xifexpression = _xifexpression_1;
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public void checkInterativeWhile(final EList<type_declaration> list) {
    for (final type_declaration declaracoes : list) {
      class_declaration _declaracaoClasse = declaracoes.getDeclaracaoClasse();
      field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
      method_declaration _declaracaoMetodo = _corpoClasse.getDeclaracaoMetodo();
      statement_block _blocoMetodo = _declaracaoMetodo.getBlocoMetodo();
      statement _corpo = _blocoMetodo.getCorpo();
      while_statement _corpoWhile = _corpo.getCorpoWhile();
      this.checkWhile(_corpoWhile);
    }
  }
  
  public void checkVariableDeclaration(final EList<type_declaration> list) {
    for (final type_declaration declaracoes : list) {
      {
        class_declaration _declaracaoClasse = declaracoes.getDeclaracaoClasse();
        field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
        variable_declaration _declaracaoVariavel = _corpoClasse.getDeclaracaoVariavel();
        this.checkDeclaracaoVariavel(_declaracaoVariavel);
        interface_declaration _declaracaoInterface = declaracoes.getDeclaracaoInterface();
        field_declaration _corpoInterface = _declaracaoInterface.getCorpoInterface();
        variable_declaration _declaracaoVariavel_1 = _corpoInterface.getDeclaracaoVariavel();
        this.checkDeclaracaoVariavel(_declaracaoVariavel_1);
      }
    }
  }
  
  public Object checkDeclaracaoVariavel(final variable_declaration declaration) {
    Object _xblockexpression = null;
    {
      type _tipoVariavel = declaration.getTipoVariavel();
      EObject _tipo = _tipoVariavel.getTipo();
      String _valueOf = String.valueOf(_tipo);
      Tipo tipo = new Tipo(_valueOf);
      Object _xifexpression = null;
      boolean _contains = this.tipos.contains(tipo);
      boolean _not = (!_contains);
      if (_not) {
        _xifexpression = null;
      } else {
        EList<variable_declarator> vars = declaration.getDeclaracaoVariaveis();
        for (final variable_declarator variable : vars) {
          {
            String _nomeVariavel = variable.getNomeVariavel();
            Variavel variavel = new Variavel(_nomeVariavel, tipo);
            String _nomeVariavel_1 = variable.getNomeVariavel();
            boolean _containsKey = this.variaveis.containsKey(_nomeVariavel_1);
            boolean _not_1 = (!_containsKey);
            if (_not_1) {
              String _nomeVariavel_2 = variable.getNomeVariavel();
              this.variaveis.put(_nomeVariavel_2, variavel);
            } else {
            }
          }
        }
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public Object checkWhile(final while_statement statement) {
    Object _xblockexpression = null;
    {
      expression _expressaoWhile = statement.getExpressaoWhile();
      expression_aux _expressoes = _expressaoWhile.getExpressoes();
      String operador = _expressoes.getOperador();
      expression _expressaoWhile_1 = statement.getExpressaoWhile();
      String _identificador = _expressaoWhile_1.getIdentificador();
      Metodo metodo = this.metodos.get(_identificador);
      expression _expressaoWhile_2 = statement.getExpressaoWhile();
      String _identificador_1 = _expressaoWhile_2.getIdentificador();
      Variavel variavel = this.variaveis.get(_identificador_1);
      Object _xifexpression = null;
      boolean _and = false;
      boolean _and_1 = false;
      boolean _and_2 = false;
      boolean _and_3 = false;
      boolean _and_4 = false;
      boolean _and_5 = false;
      boolean _and_6 = false;
      boolean _and_7 = false;
      boolean _and_8 = false;
      boolean _and_9 = false;
      boolean _and_10 = false;
      boolean _and_11 = false;
      expression _expressaoWhile_3 = statement.getExpressaoWhile();
      logical_expression _logical = _expressaoWhile_3.getLogical();
      boolean _equals = Objects.equal(_logical, null);
      if (!_equals) {
        _and_11 = false;
      } else {
        boolean _notEquals = (!Objects.equal(operador, ">"));
        _and_11 = _notEquals;
      }
      if (!_and_11) {
        _and_10 = false;
      } else {
        boolean _notEquals_1 = (!Objects.equal(operador, "<"));
        _and_10 = _notEquals_1;
      }
      if (!_and_10) {
        _and_9 = false;
      } else {
        boolean _notEquals_2 = (!Objects.equal(operador, ">="));
        _and_9 = _notEquals_2;
      }
      if (!_and_9) {
        _and_8 = false;
      } else {
        boolean _notEquals_3 = (!Objects.equal(operador, "<="));
        _and_8 = _notEquals_3;
      }
      if (!_and_8) {
        _and_7 = false;
      } else {
        boolean _notEquals_4 = (!Objects.equal(operador, "=="));
        _and_7 = _notEquals_4;
      }
      if (!_and_7) {
        _and_6 = false;
      } else {
        boolean _notEquals_5 = (!Objects.equal(operador, "!="));
        _and_6 = _notEquals_5;
      }
      if (!_and_6) {
        _and_5 = false;
      } else {
        boolean _notEquals_6 = (!Objects.equal(operador, ">>="));
        _and_5 = _notEquals_6;
      }
      if (!_and_5) {
        _and_4 = false;
      } else {
        boolean _notEquals_7 = (!Objects.equal(operador, "<<"));
        _and_4 = _notEquals_7;
      }
      if (!_and_4) {
        _and_3 = false;
      } else {
        boolean _notEquals_8 = (!Objects.equal(operador, ">>"));
        _and_3 = _notEquals_8;
      }
      if (!_and_3) {
        _and_2 = false;
      } else {
        boolean _notEquals_9 = (!Objects.equal(operador, ">>>"));
        _and_2 = _notEquals_9;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        Tipo _tipoRetorno = metodo.getTipoRetorno();
        Tipo _tipo = new Tipo("boolean");
        boolean _equals_1 = _tipoRetorno.equals(_tipo);
        boolean _not = (!_equals_1);
        _and_1 = _not;
      }
      if (!_and_1) {
        _and = false;
      } else {
        Tipo _tipo_1 = variavel.getTipo();
        Tipo _tipo_2 = new Tipo("boolean");
        boolean _equals_2 = _tipo_1.equals(_tipo_2);
        boolean _not_1 = (!_equals_2);
        _and = _not_1;
      }
      if (_and) {
        _xifexpression = null;
      } else {
        Object _xifexpression_1 = null;
        org.xtext.example.simpleJava.statement _blocoWhile = statement.getBlocoWhile();
        statement_block _bloco = _blocoWhile.getBloco();
        org.xtext.example.simpleJava.statement _corpo = _bloco.getCorpo();
        while_statement _corpoWhile = _corpo.getCorpoWhile();
        boolean _notEquals_10 = (!Objects.equal(_corpoWhile, null));
        if (_notEquals_10) {
          org.xtext.example.simpleJava.statement _blocoWhile_1 = statement.getBlocoWhile();
          statement_block _bloco_1 = _blocoWhile_1.getBloco();
          org.xtext.example.simpleJava.statement _corpo_1 = _bloco_1.getCorpo();
          while_statement _corpoWhile_1 = _corpo_1.getCorpoWhile();
          _xifexpression_1 = this.checkWhile(_corpoWhile_1);
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void checkVariableInitializer(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      {
        class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
        field_declaration _corpoClasse = _declaracaoClasse.getCorpoClasse();
        variable_declaration _declaracaoVariavel = _corpoClasse.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis = _declaracaoVariavel.getDeclaracaoVariaveis();
        this.checkInicializacaoVariavel(_declaracaoVariaveis);
        interface_declaration _declaracaoInterface = td.getDeclaracaoInterface();
        field_declaration _corpoInterface = _declaracaoInterface.getCorpoInterface();
        variable_declaration _declaracaoVariavel_1 = _corpoInterface.getDeclaracaoVariavel();
        EList<variable_declarator> _declaracaoVariaveis_1 = _declaracaoVariavel_1.getDeclaracaoVariaveis();
        this.checkInicializacaoVariavel(_declaracaoVariaveis_1);
      }
    }
  }
  
  public void checkInicializacaoVariavel(final EList<variable_declarator> list) {
    for (final variable_declarator vd : list) {
      String _nomeVariavel = vd.getNomeVariavel();
      boolean _containsKey = this.variaveis.containsKey(_nomeVariavel);
      boolean _not = (!_containsKey);
      if (_not) {
      } else {
        String _nomeVariavel_1 = vd.getNomeVariavel();
        Variavel v = this.variaveis.get(_nomeVariavel_1);
        boolean _and = false;
        variable_initializer _valorVariavel = vd.getValorVariavel();
        expression _expressaoVariavel = _valorVariavel.getExpressaoVariavel();
        logical_expression _logical = _expressaoVariavel.getLogical();
        boolean _notEquals = (!Objects.equal(_logical, null));
        if (!_notEquals) {
          _and = false;
        } else {
          Tipo _tipo = v.getTipo();
          Tipo _tipo_1 = new Tipo("boolean");
          boolean _equals = _tipo.equals(_tipo_1);
          boolean _not_1 = (!_equals);
          _and = _not_1;
        }
        if (_and) {
        } else {
          boolean _and_1 = false;
          variable_initializer _valorVariavel_1 = vd.getValorVariavel();
          expression _expressaoVariavel_1 = _valorVariavel_1.getExpressaoVariavel();
          literal_expression _literal = _expressaoVariavel_1.getLiteral();
          String _decimal = _literal.getDecimal();
          boolean _notEquals_1 = (!Objects.equal(_decimal, null));
          if (!_notEquals_1) {
            _and_1 = false;
          } else {
            Tipo _tipo_2 = v.getTipo();
            Tipo _tipo_3 = new Tipo("double");
            boolean _equals_1 = _tipo_2.equals(_tipo_3);
            boolean _not_2 = (!_equals_1);
            _and_1 = _not_2;
          }
          if (_and_1) {
          } else {
            boolean _and_2 = false;
            variable_initializer _valorVariavel_2 = vd.getValorVariavel();
            expression _expressaoVariavel_2 = _valorVariavel_2.getExpressaoVariavel();
            literal_expression _literal_1 = _expressaoVariavel_2.getLiteral();
            String _l_float = _literal_1.getL_float();
            boolean _notEquals_2 = (!Objects.equal(_l_float, null));
            if (!_notEquals_2) {
              _and_2 = false;
            } else {
              Tipo _tipo_4 = v.getTipo();
              Tipo _tipo_5 = new Tipo("float");
              boolean _equals_2 = _tipo_4.equals(_tipo_5);
              boolean _not_3 = (!_equals_2);
              _and_2 = _not_3;
            }
            if (_and_2) {
            } else {
              boolean _and_3 = false;
              variable_initializer _valorVariavel_3 = vd.getValorVariavel();
              expression _expressaoVariavel_3 = _valorVariavel_3.getExpressaoVariavel();
              literal_expression _literal_2 = _expressaoVariavel_3.getLiteral();
              String _inteiro = _literal_2.getInteiro();
              boolean _notEquals_3 = (!Objects.equal(_inteiro, null));
              if (!_notEquals_3) {
                _and_3 = false;
              } else {
                Tipo _tipo_6 = v.getTipo();
                Tipo _tipo_7 = new Tipo("int");
                boolean _equals_3 = _tipo_6.equals(_tipo_7);
                boolean _not_4 = (!_equals_3);
                _and_3 = _not_4;
              }
              if (_and_3) {
              } else {
                boolean _and_4 = false;
                variable_initializer _valorVariavel_4 = vd.getValorVariavel();
                expression _expressaoVariavel_4 = _valorVariavel_4.getExpressaoVariavel();
                String _identificador = _expressaoVariavel_4.getIdentificador();
                boolean _notEquals_4 = (!Objects.equal(_identificador, null));
                if (!_notEquals_4) {
                  _and_4 = false;
                } else {
                  Tipo _tipo_8 = v.getTipo();
                  variable_initializer _valorVariavel_5 = vd.getValorVariavel();
                  expression _expressaoVariavel_5 = _valorVariavel_5.getExpressaoVariavel();
                  String _identificador_1 = _expressaoVariavel_5.getIdentificador();
                  Variavel _get = this.variaveis.get(_identificador_1);
                  Tipo _tipo_9 = _get.getTipo();
                  boolean _equals_4 = _tipo_8.equals(_tipo_9);
                  boolean _not_5 = (!_equals_4);
                  _and_4 = _not_5;
                }
                if (_and_4) {
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void checkTypeDeclaration(final EList<type_declaration> list) {
    for (final type_declaration td : list) {
      class_declaration _declaracaoClasse = td.getDeclaracaoClasse();
      boolean _notEquals = (!Objects.equal(_declaracaoClasse, null));
      if (_notEquals) {
        class_declaration _declaracaoClasse_1 = td.getDeclaracaoClasse();
        String _nomeClasse = _declaracaoClasse_1.getNomeClasse();
        this.addType(_nomeClasse);
      } else {
        interface_declaration _declaracaoInterface = td.getDeclaracaoInterface();
        String _nomeInterface = _declaracaoInterface.getNomeInterface();
        this.addType(_nomeInterface);
      }
    }
  }
  
  public boolean addType(final String tipo) {
    boolean _xblockexpression = false;
    {
      Tipo t = new Tipo(tipo);
      boolean _xifexpression = false;
      boolean _contains = this.tipos.contains(t);
      boolean _not = (!_contains);
      if (_not) {
        _xifexpression = this.tipos.add(t);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void genArimeticExpCode(final expression expression) {
    boolean _and = false;
    boolean _and_1 = false;
    literal_expression _literal = expression.getLiteral();
    String _decimal = _literal.getDecimal();
    boolean _notEquals = (!Objects.equal(_decimal, null));
    if (!_notEquals) {
      _and_1 = false;
    } else {
      literal_expression _literal_1 = expression.getLiteral();
      String _inteiro = _literal_1.getInteiro();
      boolean _notEquals_1 = (!Objects.equal(_inteiro, null));
      _and_1 = _notEquals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      literal_expression _literal_2 = expression.getLiteral();
      String _l_float = _literal_2.getL_float();
      boolean _notEquals_2 = (!Objects.equal(_l_float, null));
      _and = _notEquals_2;
    }
    if (_and) {
      literal_expression _literal_3 = expression.getLiteral();
      String _string = _literal_3.toString();
      this.salvarArquivo(_string);
      boolean _or = false;
      boolean _or_1 = false;
      boolean _or_2 = false;
      boolean _or_3 = false;
      boolean _or_4 = false;
      boolean _or_5 = false;
      boolean _or_6 = false;
      boolean _or_7 = false;
      boolean _or_8 = false;
      boolean _or_9 = false;
      boolean _or_10 = false;
      expression_aux _expressoes = expression.getExpressoes();
      mais_aux _op = _expressoes.getOp();
      boolean _notEquals_3 = (!Objects.equal(_op, null));
      if (_notEquals_3) {
        _or_10 = true;
      } else {
        expression_aux _expressoes_1 = expression.getExpressoes();
        String _operador = _expressoes_1.getOperador();
        boolean _equals = Objects.equal(_operador, "++");
        _or_10 = _equals;
      }
      if (_or_10) {
        _or_9 = true;
      } else {
        expression_aux _expressoes_2 = expression.getExpressoes();
        String _operador_1 = _expressoes_2.getOperador();
        boolean _equals_1 = Objects.equal(_operador_1, "--");
        _or_9 = _equals_1;
      }
      if (_or_9) {
        _or_8 = true;
      } else {
        expression_aux _expressoes_3 = expression.getExpressoes();
        String _operador_2 = _expressoes_3.getOperador();
        boolean _equals_2 = Objects.equal(_operador_2, "-");
        _or_8 = _equals_2;
      }
      if (_or_8) {
        _or_7 = true;
      } else {
        expression_aux _expressoes_4 = expression.getExpressoes();
        String _operador_3 = _expressoes_4.getOperador();
        boolean _equals_3 = Objects.equal(_operador_3, "-=");
        _or_7 = _equals_3;
      }
      if (_or_7) {
        _or_6 = true;
      } else {
        expression_aux _expressoes_5 = expression.getExpressoes();
        String _operador_4 = _expressoes_5.getOperador();
        boolean _equals_4 = Objects.equal(_operador_4, "*");
        _or_6 = _equals_4;
      }
      if (_or_6) {
        _or_5 = true;
      } else {
        expression_aux _expressoes_6 = expression.getExpressoes();
        String _operador_5 = _expressoes_6.getOperador();
        boolean _equals_5 = Objects.equal(_operador_5, "*=");
        _or_5 = _equals_5;
      }
      if (_or_5) {
        _or_4 = true;
      } else {
        expression_aux _expressoes_7 = expression.getExpressoes();
        String _operador_6 = _expressoes_7.getOperador();
        boolean _equals_6 = Objects.equal(_operador_6, "/");
        _or_4 = _equals_6;
      }
      if (_or_4) {
        _or_3 = true;
      } else {
        expression_aux _expressoes_8 = expression.getExpressoes();
        String _operador_7 = _expressoes_8.getOperador();
        boolean _equals_7 = Objects.equal(_operador_7, "/=");
        _or_3 = _equals_7;
      }
      if (_or_3) {
        _or_2 = true;
      } else {
        expression_aux _expressoes_9 = expression.getExpressoes();
        String _operador_8 = _expressoes_9.getOperador();
        boolean _equals_8 = Objects.equal(_operador_8, "%");
        _or_2 = _equals_8;
      }
      if (_or_2) {
        _or_1 = true;
      } else {
        expression_aux _expressoes_10 = expression.getExpressoes();
        String _operador_9 = _expressoes_10.getOperador();
        boolean _equals_9 = Objects.equal(_operador_9, "%=");
        _or_1 = _equals_9;
      }
      if (_or_1) {
        _or = true;
      } else {
        numeric_expression _numeric = expression.getNumeric();
        boolean _notEquals_4 = (!Objects.equal(_numeric, null));
        _or = _notEquals_4;
      }
      if (_or) {
        expression_aux _expressoes_11 = expression.getExpressoes();
        mais_aux _op_1 = _expressoes_11.getOp();
        boolean _notEquals_5 = (!Objects.equal(_op_1, null));
        if (_notEquals_5) {
          expression_aux _expressoes_12 = expression.getExpressoes();
          mais_aux _op_2 = _expressoes_12.getOp();
          String _operador_10 = _op_2.getOperador();
          this.salvarArquivo(_operador_10);
        } else {
          numeric_expression _numeric_1 = expression.getNumeric();
          boolean _notEquals_6 = (!Objects.equal(_numeric_1, null));
          if (_notEquals_6) {
            numeric_expression _numeric_2 = expression.getNumeric();
            String _operador_11 = _numeric_2.getOperador();
            this.salvarArquivo(_operador_11);
          } else {
            expression_aux _expressoes_13 = expression.getExpressoes();
            String _operador_12 = _expressoes_13.getOperador();
            this.salvarArquivo(_operador_12);
          }
        }
        boolean _and_2 = false;
        boolean _and_3 = false;
        literal_expression _literal_4 = expression.getLiteral();
        String _decimal_1 = _literal_4.getDecimal();
        boolean _notEquals_7 = (!Objects.equal(_decimal_1, null));
        if (!_notEquals_7) {
          _and_3 = false;
        } else {
          literal_expression _literal_5 = expression.getLiteral();
          String _inteiro_1 = _literal_5.getInteiro();
          boolean _notEquals_8 = (!Objects.equal(_inteiro_1, null));
          _and_3 = _notEquals_8;
        }
        if (!_and_3) {
          _and_2 = false;
        } else {
          literal_expression _literal_6 = expression.getLiteral();
          String _l_float_1 = _literal_6.getL_float();
          boolean _notEquals_9 = (!Objects.equal(_l_float_1, null));
          _and_2 = _notEquals_9;
        }
        if (_and_2) {
          literal_expression _literal_7 = expression.getLiteral();
          String _string_1 = _literal_7.toString();
          this.salvarArquivo(_string_1);
        }
      }
    }
  }
  
  public void salvarArquivo(final String s) {
    try {
      File arquivo = new File("/home/franklin/teste.txt");
      FileWriter fw = new FileWriter(arquivo, true);
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(s);
      bw.newLine();
      bw.close();
      fw.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
